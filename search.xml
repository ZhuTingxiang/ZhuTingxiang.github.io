<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[数据结构：二叉树]]></title>
      <url>http://yoursite.com/2017/02/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="本文是总结tree这种结构的常用知识点暂时总结binary-tree">本文是总结Tree这种结构的常用知识点，暂时总结Binary Tree。</h2>
<h2 id="binary-tree二叉树">Binary Tree二叉树</h2>
<h3 id="why-tree">Why Tree?</h3>
<p>因为树结合了其他数据结构的优势：</p>
<ul>
<li>顺序数组： 用Binary Search查找会很快。</li>
<li>链表：插入和删除会非常快，不需要shift值。</li>
</ul>
<h3 id="基本概念">基本概念：</h3>
<ul>
<li>根： 树的顶部。</li>
<li>父节点</li>
<li>子节点</li>
<li>叶节点：没有子节点的节点。</li>
<li>Leve（高度）：代表有几代。</li>
</ul>
<h3 id="平衡树和非平衡树">平衡树和非平衡树</h3>
<p>平衡树：
左右子树及其的高度相差&lt;=1，并且左右子树也是平衡树。
<img src="assets/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91-f4cbe342.jpg" alt=""><img src="assets/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91-f4cbe342.jpg" alt="">
（此处为了插入图片浪费了半个小时，原来是S3挂了，还以为我的插件坏了..心累）</p>
<h3 id="full-tree-和-complete-tree">Full Tree 和 Complete Tree：</h3>
<ul>
<li>Full Tree:每个节点都有0/2个子节点。</li>
<li>Complete Tree:除了最右边的节点，其他节点都是满节点，并且都靠左。
Uploading...</li>
</ul>
<h3 id="binary-tree代码实现">Binary Tree代码实现</h3>
<h4 id="binary-tree-interface">Binary Tree Interface</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public interface BSTInterface &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Searches for the specified key in the tree.</div><div class="line">     * @param key key of the element to search</div><div class="line">     * @return boolean value indication of success or failure</div><div class="line">     */</div><div class="line">    boolean find(int key);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Inserts a new element into the tree.</div><div class="line">     * @param key key of the element</div><div class="line">     * @param value value of the element</div><div class="line">     */</div><div class="line">    void insert(int key, double value);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Deletes an element from the tree using the specified key.</div><div class="line">     * @param key key of the element to delete</div><div class="line">     */</div><div class="line">    void delete(int key);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Traverses and prints values of the tree in ascending order based on key.</div><div class="line">     */</div><div class="line">    void traverse();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="binary-tree功能实现">Binary Tree功能实现</h4>
<ol>
<li>
<p>Find:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public boolean find(int key) &#123;</div><div class="line">    // tree is empty</div><div class="line">    if (root == null) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node curr = root;</div><div class="line">    // while not found</div><div class="line">    while (curr.key != key) &#123;</div><div class="line">        if (curr.key &lt; key) &#123;</div><div class="line">            // go right</div><div class="line">            curr = curr.right;</div><div class="line">        &#125; else &#123;</div><div class="line">            // go left</div><div class="line">            curr = curr.left;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // not found</div><div class="line">        if (curr == null) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return true; // found</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Insert
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public void insert(int key, double value) &#123;</div><div class="line">    Node newNode = new Node(key, value);</div><div class="line">    // empty tree</div><div class="line">    if (root == null) &#123;</div><div class="line">        root = newNode;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node parent = root; // keep track of parent</div><div class="line">    Node curr = root;</div><div class="line">    while (true) &#123;</div><div class="line">        // no duplicate keys allowed</div><div class="line">        // simply keep the existing one here</div><div class="line">        if (curr.key == key) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        parent = curr; // update parent</div><div class="line">        if (curr.key &lt; key) &#123;</div><div class="line">            // go right</div><div class="line">            curr = curr.right;</div><div class="line">            if (curr == null) &#123;</div><div class="line">                // found a spot</div><div class="line">                parent.right = newNode;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            // go left</div><div class="line">            curr = curr.left;</div><div class="line">            if (curr == null) &#123;</div><div class="line">                // found a spot</div><div class="line">                parent.left = newNode;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125; // end of if-else to go right or left</div><div class="line">    &#125; // end of while</div><div class="line">&#125; // end of insert method</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Delete
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">public void delete(int key) &#123;</div><div class="line">    // empty tree</div><div class="line">    if (root == null) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node parent = root;</div><div class="line">    Node curr = root;</div><div class="line">    /*</div><div class="line">     * flag to check left child</div><div class="line">     *</div><div class="line">     * need this flag because actual deletion process happens after the</div><div class="line">     * while loop that is to find the key to delete</div><div class="line">     */</div><div class="line">    boolean isLeftChild = true;</div><div class="line"></div><div class="line">    while (curr.key != key) &#123;</div><div class="line">        parent = curr; // update parent first</div><div class="line">        if (curr.key &lt; key) &#123; // go right</div><div class="line">            isLeftChild = false;</div><div class="line">            curr = curr.right;</div><div class="line">        &#125; else &#123; // go left</div><div class="line">            isLeftChild = true;</div><div class="line">            curr = curr.left;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // case 1: not found</div><div class="line">        if (curr == null) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (curr.left == null &amp;&amp; curr.right == null) &#123;</div><div class="line">        // case 2: leaf</div><div class="line">        if (curr == root) &#123;</div><div class="line">            root = null;</div><div class="line">        &#125; else if (isLeftChild) &#123;</div><div class="line">            parent.left = null;</div><div class="line">        &#125; else &#123;</div><div class="line">            parent.right = null;</div><div class="line">        &#125;</div><div class="line">    &#125; else if (curr.right == null) &#123;</div><div class="line">        // case 3: no right child</div><div class="line">        if (curr == root) &#123;</div><div class="line">            root = curr.left;</div><div class="line">        &#125; else if (isLeftChild) &#123;</div><div class="line">            parent.left = curr.left;</div><div class="line">        &#125; else &#123;</div><div class="line">            parent.right = curr.left;</div><div class="line">        &#125;</div><div class="line">    &#125; else if (curr.left == null) &#123;</div><div class="line">        // case 3: no left child</div><div class="line">        if (curr == root) &#123;</div><div class="line">            root = curr.right;</div><div class="line">        &#125; else if (isLeftChild) &#123;</div><div class="line">            parent.left = curr.right;</div><div class="line">        &#125; else &#123;</div><div class="line">            parent.right = curr.right;</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        // case 4: with two children</div><div class="line">        // here we use successor but using predecessor is also an option</div><div class="line">        Node successor = getSuccessor(curr);</div><div class="line"></div><div class="line">        if(curr == root) &#123;</div><div class="line">            root = successor;</div><div class="line">        &#125; else if(isLeftChild) &#123;</div><div class="line">            parent.left = successor;</div><div class="line">        &#125; else &#123;</div><div class="line">            parent.right = successor;</div><div class="line">        &#125;</div><div class="line">        successor.left = curr.left;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>找到下一个节点
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Helper method to find the successor of the toDelete node.</div><div class="line"> * This tries to find the smallest value of the right subtree</div><div class="line"> * of the toDelete node by going down to the left most node in the subtree</div><div class="line"> * @param toDelete node to delete</div><div class="line"> * @return the successor of the toDelete node</div><div class="line"> */</div><div class="line">private Node getSuccessor(Node toDelete) &#123;</div><div class="line">    Node successorParent = toDelete;</div><div class="line">    Node successor = toDelete;</div><div class="line">    // start the search from the root of the right subtree</div><div class="line">    Node curr = toDelete.right;</div><div class="line"></div><div class="line">    // move down to left as far as possible in the right subtree</div><div class="line">    // successor&apos;s left child must be null</div><div class="line">    while (curr != null) &#123;</div><div class="line">        successorParent = successor;</div><div class="line">        successor = curr;</div><div class="line">        curr = curr.left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*</div><div class="line">     * If successor is NOT the right child of the node to delete, then</div><div class="line">     * need to take care of two connections in the right subtree</div><div class="line">     */</div><div class="line">    if (successor != toDelete.right) &#123;</div><div class="line">        successorParent.left = successor.right;</div><div class="line">        successor.right = toDelete.right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return successor;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Traverse Binary Tree:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void traverse() &#123;</div><div class="line">    inOrderHelper(root);</div><div class="line">    System.out.println();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void inOrderHelper(Node toVisit) &#123;</div><div class="line">    if(toVisit != null) &#123;</div><div class="line">        inOrderHelper(toVisit.left);</div><div class="line">        System.out.print(toVisit);</div><div class="line">        inOrderHelper(toVisit.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
</ol>
<hr>
<p>Reference:<br>
@Terry Lee</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 388. Longest Absolute File Path]]></title>
      <url>http://yoursite.com/2017/02/28/Leetcode-388-Longest-Absolute-File-Path/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Suppose we abstract our file system by a string in the following manner:</p>
<p>The string &quot;dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext&quot; represents:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dir</div><div class="line">    subdir1</div><div class="line">    subdir2</div><div class="line">        file.ext</div></pre></td></tr></table></figure></p>
<p>The directory dir contains an empty sub-directory subdir1 and a sub-directory subdir2 containing a file file.ext.</p>
<p>The string &quot;dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext&quot; represents:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dir</div><div class="line">    subdir1</div><div class="line">        file1.ext</div><div class="line">        subsubdir1</div><div class="line">    subdir2</div><div class="line">        subsubdir2</div><div class="line">            file2.ext</div></pre></td></tr></table></figure></p>
<p>The directory dir contains two sub-directories subdir1 and subdir2. subdir1 contains a file file1.ext and an empty second-level sub-directory subsubdir1. subdir2 contains a second-level sub-directory subsubdir2 containing a file file2.ext.</p>
<p>We are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is &quot;dir/subdir2/subsubdir2/file2.ext&quot;, and its length is 32 (not including the double quotes).</p>
<p>Given a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return 0.</p>
<p>Note:
The name of a file contains at least a . and an extension.
The name of a directory or sub-directory will not contain a ..
Time complexity required: O(n) where n is the size of the input string.</p>
<p>Notice that a/aa/aaa/file1.txt is not the longest file path, if there is another path aaaaaaaaaaaaaaaaaaaaa/sth.png.</p>
<h3 id="explaination">Explaination:</h3>
<p>计算每个文件是第几level，记下到现在为止的文件path长度，和当前最长的比较。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int lengthLongestPath(String input) &#123;</div><div class="line">        String[] paths = input.split(&quot;\n&quot;);</div><div class="line">        int[] stack = new int[paths.length + 1];</div><div class="line">        int maxLen = 0;</div><div class="line">        int curLen = 0;</div><div class="line">        for(String s: paths) &#123;</div><div class="line">            // get level of the s</div><div class="line">            int lev = s.lastIndexOf(&apos;\t&apos;)+1;</div><div class="line">            // get curLen</div><div class="line">            curLen= stack[lev+1] = stack[lev]+s.length()-lev+1;</div><div class="line">            // if find file, get the file path length</div><div class="line">            if (s.contains(&quot;.&quot;)) &#123;</div><div class="line">                maxLen = Math.max(maxLen, curLen-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return maxLen;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[云计算Project：Twitter大数据分析]]></title>
      <url>http://yoursite.com/2017/02/27/%E4%BA%91%E8%AE%A1%E7%AE%97Project%EF%BC%9ATwitter%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文是Twitter Analytics on the Cloud项目的介绍及分析总结。小组作业当时做的匆忙，现在再思考下可以优化的地方很多。感谢队友@shuangshuang 和 @烟酱。</p>
<h2 id="项目介绍">项目介绍</h2>
<p>目标：</p>
<ul>
<li>在云上建立一个高性能又可靠的web服务。</li>
<li>设计，开发和部署并优化服务器以能够处理每秒上万次请求的高负载。</li>
<li>在一个1TB的数据集上完成ETL并载入到Mysql和HBase中。</li>
<li>设计MySQL和HBase并优化配置，提高性能。</li>
<li>探索基于云的web服务存在瓶颈的方法，并提高性能。</li>
</ul>
<h2 id="基本结构">基本结构：</h2>
<p>￼￼￼￼￼
<img src="http://i.imgur.com/qMn31B4.png" alt=""></p>
<h3 id="前端">前端：</h3>
<ul>
<li>通过HTTP GET请求访问web服务，不同的请求有不同的地址，后面有不同参数。</li>
<li>返回相应的响应时，必须要在持续若干个小时的测试中正常运行。</li>
<li>web服务不能拒绝请求，要能承受高负载。</li>
</ul>
<h3 id="后端">后端：</h3>
<ul>
<li>保存用来查询的数据文件</li>
<li>比较SQL(MySQL)和NoSQL(HBase)</li>
<li>比较不同数据集不同查询类型的表现，来决定如何实现后端。</li>
</ul>
<h3 id="数据集">数据集：</h3>
<p>Twitter数据集，大于1T，JSON格式存储。</p>
<h2 id="项目实战">项目实战</h2>
<h3 id="搭建前端">搭建前端：</h3>
<p>在搭建前端之前，需要慎重选择框架。对比主流web框架，参考<a href="https://www.techempower.com/benchmarks/" target="_blank" rel="external">Techempower</a>,我们最终选择用vertx和undertow进行开发。
具体可以参考一些比较好的配置指南：</p>
<p>Vertx:</p>
<p><a href="http://vertx.io/docs/" target="_blank" rel="external">vertx Document</a>
<a href="http://vertx.io/blog/my-first-vert-x-3-application/index.html" target="_blank" rel="external">My first Vert.x 3 Application</a></p>
<h4 id="前端优化">前端优化：</h4>
<ul>
<li>运用Cache，每次得到请求先check是否有缓存。当缓存满了的时候，就把最不常用的缓存踢出去。</li>
</ul>
<h3 id="etl">ETL:</h3>
<p>根据request设计好数据库的schema以后，要好好设计ETL。因为我们这里用EMR把twitter数据集载入到数据仓库中，每次需要10-20个小时，而EMR特别贵，所以最好不要重复劳动。最初，用小数据及来测试。</p>
<p>这一阶段我们要处理两类请求，从存储系统中获取数据，搭建好的web service 需要能够连接到两个不同的后端存储系统(MySQL 和 HBase)，前端需要通过端口 80 接收 HTTP GET 请求。</p>
<h4 id="操作过程">操作过程：</h4>
<p>这里主要要写一个Map和一个Reduce文件来处理数据。原始数据的格式是JSON，我们需要处理成需要的数据格式：</p>
<p>请求格式
userid+hashtag
<code>GET /q2?userid=uid&amp;hashtag=hashtag</code></p>
<p>响应格式 (如果Tweet存在)</p>
<ul>
<li>tweet 的 sentiment density</li>
<li>tweet 的发布时间</li>
<li>tweet id</li>
<li>审查修改过的的 tweet 内容，这里有很多可能出问题的地方，比如 emoji 表情、反斜杠、其他语言的字符等等</li>
</ul>
<p><code>TEAMID,TEAM_AWS_ACCOUNT_ID\n Sentiment_density1:Tweet_time1:Tweet_id1:Cencored_text1\n Sentiment_density2:Tweet_time2:Tweet_id2:Cencored_text2\n Sentiment_density3:Tweet_time3:Tweet_id3:Cencored_text3\n</code></p>
<p>响应格式 (如果Tweet不存在)
<code>TEAMID,TEAM_AWS_ACCOUNT_ID\n \n</code></p>
<p>map和reduce程序写完后，到EMR上面跑，要注意：</p>
<ul>
<li>现用小数据集测试。</li>
<li>注意各种小细节</li>
<li>关于EMR的操作，步骤之后有空总结下之前云计算的EMR project。</li>
</ul>
<h3 id="query-文本清理和分析">Query 文本清理和分析</h3>
<p>目标吞吐量： 10000 rps
不允许用现用的缓存设备，可以自己写缓存。
会查询某个用户用指定的 hashtag 发的 tweet，主要考察如何设计一个高效的后端来处理大量的请求。</p>
<h3 id="后端数据库">后端数据库</h3>
<p>ETL结束以后，我们需要导入数据库。在这个过程中，我们纠结于replication和sharding的选择。
Replication是指将完整的数据库存在每一台机器上，而Sharding是指分成几个部分分别存在每一台机器上。最终，选择了Sharding模式。</p>
<h4 id="数据库设计">数据库设计：</h4>
<p>按照我们刚刚说过的请求格式和响应格式，我们对MySQL和HBase进行设计：</p>
<h5 id="mysql">MySQL：</h5>
<h6 id="设计模式">设计模式：</h6>
<p>（这里参照了Yuki组的赢家设计模式，非常简单粗暴）
原来的schema是每一列都很清晰，但是这样row相比后面的设计模式多了很多，导致数据库的读取速度慢了很多。
所以新的schema就选择只存取id，读取所有的tweets以后，让前端进行相应的解析。</p>
<p><img src="http://i.imgur.com/Zmk6QUp.png" alt=""></p>
<h6 id="优化方法">优化方法：</h6>
<ul>
<li>建立索引Index</li>
<li>mysql有两个存储引擎，MyISAM和InnoDB，MyISAM适用于大量查寻，对写并不是非常友好，updata时会整表锁住。而InnoDB使用的是“行锁&quot;。
设置Key_buffer_size以及Query_cache_size到更高的值，可以增加缓冲容量。</li>
<li>设置所有column为not null，这样mysql不用预留空间检查null值。会提高读取速度。</li>
</ul>
<h5 id="hbase">HBase:</h5>
<p>鉴于HBase是key-value存储模式，我们在这里只要考虑key里怎么放，剩下的数据全都放到column family里面就可以了。
我们采用tweet_id + user_id + hashtag作为rowkey。</p>
<h6 id="优化方法摘自小土刀博客">优化方法（摘自小土刀博客）：</h6>
<p>1.分配合适的内存给 RegionServer 服务:
例如在 HBase 的 conf 目录下的 hbase-env.sh 的最后添加 export HBASE_REGIONSERVER_OPTS=”-Xmx16000m $HBASE_REGIONSERVER_OPTS”
其中 16000m 为分配给 RegionServer 的内存大小。</p>
<p>2.RegionServer 的请求处理 IO 线程数:
较少的 IO 线程适用于处理单次请求内存消耗较高的 Big Put 场景 (大容量单次 Put 或设置了较大 cache 的 Scan，均属于 Big Put) 或 ReigonServer 的内存比较紧张的场景。
较多的 IO 线程，适用于单次请求内存消耗低，TPS 要求 (每秒事务处理量 (TransactionPerSecond)) 非常高的场景。设置该值的时候，以监控内存为主要参考。
在 hbase-site.xml 配置文件中配置项为 hbase.regionserver.handler.count 200</p>
<p>3.调整 Block Cache:
hfile.block.cache.size：RS的block cache的内存大小限制，默认值0.25，在偏向读的业务中，可以适当调大该值，具体配置时需试hbase集群服务的业务特征，结合memstore的内存占比进行综合考虑。</p>
<h2 id="总结">总结：</h2>
<p>Team Project过去挺久了，很多细节记不得了，清洗数据的部分有很多细节需要注意，并不像这里写的一两句话就讲清楚了。还有数据库优化是一条不归路，盲目优化会导致反向优化，其实根据后来赢家的报告来看，优化并起不到多少作用，好的schema设计才是提高performance的最根本。
云计算这门课的精华，都在这个Project，覆盖了大部分这门课的所实验的知识。从load balance到sharding和replication，再到SQL和NoSQL数据库，再到EMR的应用，就差并行并发那部分的内容了。
学习是不难的，有指导来做project也不难，真正到了实际应用中，没有人知道正确答案，靠的都是思考和经验了。</p>
<p><strong>References：</strong></p>
<ol>
<li><a href="http://wdxtub.com/" target="_blank" rel="external">小土刀云计算语料分析&amp;反思课</a></li>
<li>小Yuki的Report</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 325. Maximum Size Subarray Sum Equals k]]></title>
      <url>http://yoursite.com/2017/02/25/Leetcode-325-Maximum-Size-Subarray-Sum-Equals-k/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.</p>
<p>Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.</p>
<p>Example 1:
Given nums = [1, -1, 5, -2, 3], k = 3,
return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)</p>
<p>Example 2:
Given nums = [-2, -1, 2, 1], k = 1,
return 2. (because the subarray [-1, 2] sums to 1 and is the longest)</p>
<p>Follow Up:
Can you do it in O(n) time?</p>
<h3 id="explanation">Explanation:</h3>
<p>思路就是，算从第一个数到每一个数的sum，存在map里，如果之后有key和sum-k相等，就表示那段数字的和为k。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int maxSubArrayLen(int[] nums, int k) &#123;</div><div class="line">        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">        int sum = 0;</div><div class="line">        int result = 0;</div><div class="line"></div><div class="line">        for (int i=0; i&lt;nums.length; i++) &#123;</div><div class="line">            sum += nums[i];</div><div class="line">            if (sum == k) &#123;</div><div class="line">                result = i+1;</div><div class="line"></div><div class="line">            &#125; else if (map.containsKey(sum - k)) &#123;</div><div class="line">                result =Math.max(max, i - map.get(sum));</div><div class="line">            &#125;</div><div class="line">            if (!map.containsKey(sum)) &#123;</div><div class="line">                map.put(sum, i);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(map.toString());</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 277. Find the Celebrity]]></title>
      <url>http://yoursite.com/2017/02/24/Leetcode-277-Find-the-Celebrity/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Suppose you are at a party with n people (labeled from 0 to n - 1) and among them, there may exist one celebrity. The definition of a celebrity is that all the other n - 1 people know him/her but he/she does not know any of them.</p>
<p>Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: &quot;Hi, A. Do you know B?&quot; to get information of whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).</p>
<p>You are given a helper function bool knows(a, b) which tells you whether A knows B. Implement a function int findCelebrity(n), your function should minimize the number of calls to knows.</p>
<p>Note: There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return -1.</p>
<h3 id="explanation">Explanation:</h3>
<p>两次遍历。第一轮假设候选人，如果候选人认识i，就换到i。第二轮是验证候选人是否存在。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* The knows API is defined in the parent class Relation.</div><div class="line">      boolean knows(int a, int b); */</div><div class="line"></div><div class="line">public class Solution extends Relation &#123;</div><div class="line">    public int findCelebrity(int n) &#123;</div><div class="line">        int candidate = 0;</div><div class="line">        for (int i=1; i&lt;n; i++) &#123;</div><div class="line">            if (knows(candidate,i)) candidate =i;</div><div class="line">        &#125;</div><div class="line">        for (int i=0; i&lt;n; i++) &#123;</div><div class="line">            if (i != candidate &amp;&amp; (knows(candidate,i) || (!knows(i,candidate)))) return -1;</div><div class="line">        &#125;</div><div class="line">        return candidate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[云计算Project：基于多个后端的社交网络时间线的实现]]></title>
      <url>http://yoursite.com/2017/02/23/%E4%BA%91%E8%AE%A1%E7%AE%97Project%EF%BC%9A%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%B8%AA%E5%90%8E%E7%AB%AF%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E7%BA%BF%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文是关于CMU15619Cloud Computing项目:<code>Social Networking Timeline with Heterogeneous Backends</code>的介绍以及总结反思。</p>
<p>项目主要目标：</p>
<ul>
<li>探索AWS的DBaas服务的申请、配置和管理</li>
<li>比较MySQL, HBase和MongoDB在使用Java API载入数据时的异同。</li>
<li>利用多个后端为同一个复杂的web应用提供数据。</li>
<li>比较不同数据库在实际应用中的特点。</li>
</ul>
<h2 id="背景介绍">背景介绍</h2>
<h3 id="dbaasdatabase-as-a-services">DBaas(Database-as-a-Services)：</h3>
<p>在AWS中，我们可以用其中的RDS的MySQL服务。</p>
<h3 id="mongodb">MongoDB：</h3>
<p>MongoDB是NoSQL数据库的典型，基于文档存储（Document-oriented），不支持事务和表连接，所以查询的编写、理解和优化比较容易。之后会写一篇关于NoSQL的总结（一个坑）。
和HBase的key-value存储模式不同，MongoDB基于文档存储模式的优势在于可以支持复杂的数据类型，并且也支持Index。
MongoDB使用BSON类型存储数据，据说就是把文本直接转成二进制表示，BSON用于以下三种目的：</p>
<ul>
<li>节省空间：BSON即使在最坏的情况下，也比普通的JSON占用空间少。</li>
<li>移动性</li>
<li>Performance：BSON对内容的编码和解码的速度快于很多编程语言。</li>
</ul>
<h3 id="数据结构-图">数据结构： 图</h3>
<h4 id="1邻接矩阵adjacent-matrix空间复杂度为on2">1.邻接矩阵Adjacent Matrix：空间复杂度为O（n^2)</h4>
<p>比如这个：
<img src="http://i.imgur.com/Qyrp0rL.png" alt="">
<img src="http://i.imgur.com/x2yyDEI.png" alt=""></p>
<h4 id="2邻接表adjacent-list-空间较少">2.邻接表Adjacent List 空间较少：</h4>
<p><img src="http://i.imgur.com/ofeLFxn.png" alt=""></p>
<h3 id="社交网络应用基础">社交网络应用基础：</h3>
<p>如今像Facebook, Twitter和Instagram都需要复杂和涉及良好的后端来处理多种类型的用户数据，提供持续的高性能低延迟的服务。同时还要通过实时数据分析为公司和广告商提供有价值的信息。</p>
<ul>
<li>不同的数据类型（Video，Text，Link，etc.)需要存在不同的数据库中）</li>
<li>一个简单的展示社交网络页面的HTTP请求会触发后端一系列的请求和数据库动作。可以参见下图：
<img src="http://i.imgur.com/r3gf00x.png" alt=""></li>
</ul>
<p>社交网络中的数据通常包括以下三种：</p>
<ul>
<li>用户信息：
<ul>
<li>身份验证系统</li>
<li>用户信息/简介</li>
<li>活动日志</li>
<li>社交关系图（在下面会进步介绍）</li>
</ul>
</li>
<li>用户活动：
<ul>
<li>用户产生的多媒体数据</li>
</ul>
</li>
<li>大数据分析系统：
<ul>
<li>搜索系统</li>
<li>推荐系统</li>
<li>用户行为分析（基于云数据仓库的OLAP，有机会单独更新这个部分）</li>
</ul>
</li>
</ul>
<p><img src="http://i.imgur.com/Qwd8z0q.png" alt=""></p>
<p>社交网络的前端已经做好，我们需要把四中不同的数据集存入三种数据库（MySQL, HBase, MongoDB),你完成的后端要能同时响应四中不同的request。</p>
<h2 id="项目操作">项目操作</h2>
<h3 id="通过rds的mysql实现基本登录">通过RDS的MySQL实现基本登录：</h3>
<p>在AWS RDS中配置MySQL并导入users.csv, userinfo.csv数据集。
连接AWS RDS中MySQL时注意：
远程登录需要导入数据时要加入 --local-infile得到授权。
<code>mysql -u username -p password -h hostname --port=portname --local-infile database</code></p>
<p>数据集格式:</p>
<ul>
<li>users.csv [UserID, Password]</li>
<li>userinfo.csv [UserID, Name, Profile Image URL]</li>
</ul>
<p>导入MySQL语句:
<code>LOAD DATA LOCAL INFILE 'filename' INTO TABLE tablename CHARACTER SET utf8mb4 FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n';</code></p>
<p>请求格式:
<code>GET /task1?id=[UserID]&amp;pwd=[Password]</code></p>
<p>响应格式:
<code>returnRes({&quot;name&quot;:&quot;my_name&quot;, &quot;profile&quot;:&quot;profile_image_url&quot;})</code></p>
<p>所以，之后在Java文件中连接数据库，再创建JSON相应的代码即可。
测试：</p>
<ol>
<li>启动前后端服务器，访问<code>http://&lt;your_front_end_dns&gt;:3000</code></li>
<li>输入正确或错误的账号密码登录测试</li>
</ol>
<p><img src="http://i.imgur.com/rv5LnYr.png" alt=""></p>
<h3 id="利用hbase存储社交图谱">利用HBase存储社交图谱：</h3>
<p>用HBase来保存用户间的follow关系，可以选择用之前在图中介绍的邻接矩阵和邻接表中选择一种，来保存数据。
原始数据格式：
<code>&lt;followee, follower&gt;</code></p>
<p>请求格式：
<code>GET /task2?id=[UserID]</code></p>
<p>响应格式:
<code>{&quot;followers&quot;:[{&quot;name&quot;:&quot;follower_name_1&quot;, &quot;profile&quot;:&quot;profile_image_url_1&quot;}, {&quot;name&quot;:&quot;follower_name_2&quot;, &quot;profile&quot;:&quot;profile_image_url_2&quot;}, ...]}</code></p>
<h4 id="思路">思路：</h4>
<ul>
<li>在HBase中存成followee： follower1， follower2， ...的格式</li>
<li>设计好HBase之后导入数据</li>
<li>启动前后端服务器后访问http://&lt;your_front_end_dns&gt;:3000</li>
<li>输入userid进行测试</li>
</ul>
<h3 id="用mongdb搭建主页">用MongDB搭建主页：</h3>
<p>如之前介绍的那样，对于各种形式的帖子，用MongoDB存储会是一个很好的选择。这里会查询一些特定的field，所以可以建立索引来加速查询。</p>
<p>帖子数据的形式：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;pid&quot;:xxx,                                      // PostID</div><div class="line">    &quot;uid&quot;:xxx,                                      // UserID of poster</div><div class="line">    &quot;name&quot;:&quot;xxx&quot;,                                   // User name of poster</div><div class="line">    &quot;profile&quot;:&quot;xxx&quot;,                                // Poster profile image URL</div><div class="line">    &quot;timestamp&quot;:&quot;YYYY-MM-DD HH:MM:SS&quot;,              // When post is posted</div><div class="line">    &quot;image&quot;:&quot;xxx&quot;,                                  // Post image</div><div class="line">    &quot;content&quot;:&quot;xxx&quot;,                                // Post text content</div><div class="line">    &quot;comments&quot;:[                                    // comments json array</div><div class="line">        &#123;</div><div class="line">            &quot;uid&quot;:xxx,                              // UserID of commenter</div><div class="line">            &quot;name&quot;:&quot;xxx&quot;,                           // User name of commenter</div><div class="line">            &quot;profile&quot;:&quot;xxx&quot;,                        // Commenter profile image URL</div><div class="line">            &quot;timestamp&quot;:&quot;YYYY-MM-DD HH:MM:SS&quot;,      // When comment is made</div><div class="line">            &quot;content&quot;:&quot;xxx&quot;                         // Comment text content</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            &quot;uid&quot;:xxx,</div><div class="line">            .......</div><div class="line">        &#125;,</div><div class="line">        ......</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于MongoDB建立索引，可以参考<a href="https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/" target="_blank" rel="external">这里</a></p>
<p>请求格式：
<code>GET /task3?id=[UserID]</code></p>
<p>响应格式：
<code>{&quot;posts&quot;:[{post1_json}, {post2_json}, ...]}</code></p>
<p>测试方法：</p>
<ul>
<li>启动前后端服务器，输入userid</li>
</ul>
<p><img src="http://i.imgur.com/8p2pep3.png" alt=""></p>
<h3 id="最终整合">最终整合</h3>
<p>之前三个部分分别实现了三个数据库的存储，现在我们希望实现输入一个userid就可以返回用户信息（MySQL),用户粉丝列表（HBase）以及用户关注的人最新三十条帖子（MongoDB）。</p>
<p>排序规则：</p>
<ul>
<li>对followers进行排序:
<ul>
<li>姓名升序排列</li>
<li>Profile image URL升序排列</li>
</ul>
</li>
<li>对最新30篇post排序：
<ul>
<li>按照timestamp升序排序</li>
<li>按照PostID升序排序</li>
</ul>
</li>
</ul>
<p>请求格式：
<code>GET /task4?id=[UserID]</code></p>
<p>响应格式:
<code>{&quot;name&quot;:&quot;my_name&quot;, &quot;profile&quot;:&quot;my_profile_image_url&quot;, &quot;followers&quot;:[{&quot;name&quot;:&quot;follower_name_1&quot;, &quot;profile&quot;:&quot;profile_image_url_1&quot;}, {&quot;name&quot;:&quot;follower_name_2&quot;, &quot;profile&quot;:&quot;profile_image_url_2&quot;}, ...], &quot;posts&quot;:[{post1_json, post2_json, ...}]}</code></p>
<p><img src="http://i.imgur.com/EpRB33c.png" alt=""></p>
<h3 id="简单推荐的实现">简单推荐的实现</h3>
<p>推荐系统的内容太多了，可以看看<a href="http://www.shuang0420.com/categories/Recommender-System/" target="_blank" rel="external">shaung的博客</a>（一个广告）
这次我们用协同过滤算法实现一个简单的推荐系统，利用“朋友的朋友”来推荐好友。</p>
<h4 id="graph-distance">Graph Distance：</h4>
<p>比如：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A follows &#123;B, C, D&#125;</div><div class="line">Followee B follows &#123;C, E, A&#125;</div><div class="line">followee C follows &#123;F, G&#125;</div><div class="line">followee D follows &#123;G, H&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://i.imgur.com/83cuJ8G.png" alt="">
我们可以得到与A的距离关系为：
<code>{A:1, C:1, E:1, F:1, G:2, H:1}</code>
其中去掉A本身，去掉A已经关注的C，剩下的就是
<code>{G: 2, E: 1, F: 1, H: 1}</code></p>
<h4 id="思路">思路：</h4>
<ul>
<li>找到userid的关注的人的集合</li>
<li>将关注的人的集合中的每个人关注的人添加到信集合中，第一次出现则为1，之后的为原来的加1</li>
<li>用优先队列存储，注意第一个关注的人集合中的元素都不应该在此队列中</li>
<li>返回前十个的name和url，并返回</li>
</ul>
<p>请求格式：
<code>http://backend-public-dns:8080/MiniSite/task5?id=&lt;user_id&gt;</code></p>
<p>响应格式：
<code>returnRes({&quot;recommendation&quot;:[{name:&lt;name1&gt;, profile:&lt;profile1&gt;},{name:&lt;name2&gt;, profile:&lt;profile2&gt;},...,{name:&lt;name10&gt;, profile:&lt;profile10&gt;]})</code></p>
<p>Done!</p>
<p><strong>Reference：</strong><br>
CMU15619课件：<code>Social Networking Timeline with Heterogeneous Backends</code>
小土刀博客：<code>http://wdxtub.com/vault/cc-17.html</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[到达之前]]></title>
      <url>http://yoursite.com/2017/02/22/%E5%9C%A8%E6%88%91%E5%88%B0%E8%BE%BE%E4%B9%8B%E5%89%8D/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&lt;center&gt;<strong>2017-02-22</strong>&lt;/center&gt;
<em>Key Words</em>: <code>Broker Genius HR面</code> <code>EXL HR面</code></p>
<p>&lt;center&gt;<strong>2017-02-21</strong>&lt;/center&gt;</p>
<p><em>Key Words</em>: <code>Facebook内推</code></p>
<p>今天大概是一个全新的日子。我不知道之后会不会保持这样的火力继续前进，又或者我会不停跌倒，但是没关系。</p>
<p>两周前，开始正式投出简历。悄无声息，没有人理睬。我无数次打开邮箱，就像是无数次和一个不愿意面对我的人说话。我抱怨，没有面试。</p>
<p>昨天发现linkedin上的frank来CMU招人，他在FB，求了一个内推。早上XD哥说他出差在南通，和我聊了一会儿。“你和我说说，工作找的怎样了。“
我把简历发给他，他说找找人。晚上给我推了一个Google。</p>
<p>下午收到两个面试电话。
明天，将有两场面试。</p>
<p>一切都开始了。我不能懈怠，不能放弃，不能随意。</p>
<p>这场战争，遍体鳞伤也要赢，也要赢得漂亮。</p>
<p>其实早上特别感动，XD哥无论什么时候都在support我，可是我却做不到support他，我知道那些时刻他是一个人挺过来的。他是条汉子，除了他我没见过这么汉子的人。我爱他。</p>
<p>生命里有这样一个人，真的很值得。</p>
<p>我有的时候，也想，自己能不能跳出自己的小世界，成为别人坚强的后盾，爸爸妈妈，外公外婆，我的朋友们，他们都需要我。</p>
<p>我来不及慢慢成长了。来不及了。我必须马上长大，快速地去未来。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 252. Meeting Rooms I]]></title>
      <url>http://yoursite.com/2017/02/20/Leetcode-252-Meeting-Rooms-I/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &lt; ei), determine if a person could attend all meetings.</p>
<p>For example,
Given [[0, 30],[5, 10],[15, 20]],
return false.</p>
<h3 id="explanation">Explanation:</h3>
<p>先按照start time排序，只要每一个end time都比下一个start time小，即可行。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">    public boolean canAttendMeetings(Interval[] intervals) &#123;</div><div class="line">       Arrays.sort(intervals, new Comparator&lt;Interval&gt;()&#123;</div><div class="line">            public int compare(Interval i1, Interval i2) &#123;</div><div class="line">                return i1.start - i2.start;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        for(int i=0; i&lt;intervals.length-1; i++) &#123;</div><div class="line">            if (intervals[i].end &gt; intervals[i+1].start) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 253. Meeting Rooms II]]></title>
      <url>http://yoursite.com/2017/02/20/Leetcode-253-Meeting-Rooms/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本题的简单版本是<a href="http://starllap.space/2017/02/20/Leetcode-252-Meeting-Rooms-I/" target="_blank" rel="external">Meeting Rooms I</a></p>
<h3 id="question">Question:</h3>
<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &lt; ei), find the minimum number of conference rooms required.</p>
<p>For example,
Given [[0, 30],[5, 10],[15, 20]],
return 2.</p>
<h3 id="explanation">Explanation:</h3>
<p>先对start sort，用heap存end，相当于按照end也sort一遍，之后与最快结束的meeting对比，如果start time比最快结束的要小，则另开一间房间。
先开始我用了两次循环，TLE了。用Heap是一个不错的选择，其实也可以用指针。直接贴一个<a href="https://discuss.leetcode.com/topic/20958/ac-java-solution-using-min-heap" target="_blank" rel="external">标准答案</a>。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">public int minMeetingRooms(Interval[] intervals) &#123;</div><div class="line">    if (intervals == null || intervals.length == 0)</div><div class="line">        return 0;</div><div class="line"></div><div class="line">    // Sort the intervals by start time</div><div class="line">    Arrays.sort(intervals, new Comparator&lt;Interval&gt;() &#123;</div><div class="line">        public int compare(Interval a, Interval b) &#123; return a.start - b.start; &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // Use a min heap to track the minimum end time of merged intervals</div><div class="line">    PriorityQueue&lt;Interval&gt; heap = new PriorityQueue&lt;Interval&gt;(intervals.length, new Comparator&lt;Interval&gt;() &#123;</div><div class="line">        public int compare(Interval a, Interval b) &#123; return a.end - b.end; &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // start with the first meeting, put it to a meeting room</div><div class="line">    heap.offer(intervals[0]);</div><div class="line"></div><div class="line">    for (int i = 1; i &lt; intervals.length; i++) &#123;</div><div class="line">        // get the meeting room that finishes earliest</div><div class="line">        Interval interval = heap.poll();</div><div class="line"></div><div class="line">        if (intervals[i].start &gt;= interval.end) &#123;</div><div class="line">            // if the current meeting starts right after</div><div class="line">            // there&apos;s no need for a new room, merge the interval</div><div class="line">            interval.end = intervals[i].end;</div><div class="line">        &#125; else &#123;</div><div class="line">            // otherwise, this meeting needs a new room</div><div class="line">            heap.offer(intervals[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // don&apos;t forget to put the meeting room back</div><div class="line">        heap.offer(interval);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return heap.size();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 294. Flip GameII]]></title>
      <url>http://yoursite.com/2017/02/20/Leetcode-294-Flip-GameII/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive &quot;++&quot; into &quot;--&quot;. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>
<p>Write a function to determine if the starting player can guarantee a win.</p>
<p>For example, given s = &quot;++++&quot;, return true. The starting player can guarantee a win by flipping the middle &quot;++&quot; to become &quot;+--+&quot;.</p>
<p>Follow up:
Derive your algorithm's runtime complexity.</p>
<h4 id="explanation">Explanation:</h4>
<p>本来想找规律，后来想想太天真了。用backtracking解，罗列所有的情况，如果下一局对手会输，就表示可以。现在我的算法是o(N!!)
discuss中有一个牛逼的game theory博弈论算法，看不懂。有机会可以研究一下，会将time complexity降低到O(N^2)</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public boolean canWin(String s) &#123;</div><div class="line">        if (s == null || s.length() &lt;2) return false;</div><div class="line">        char[] charString = s.toCharArray();</div><div class="line">        for (int i=0; i&lt;s.length()-1; i++) &#123;</div><div class="line"></div><div class="line">            if (charString[i] == &apos;+&apos; &amp;&amp; charString[i+1] == &apos;+&apos;) &#123;</div><div class="line">                charString[i] = &apos;-&apos;;</div><div class="line">                charString[i+1] = &apos;-&apos;;</div><div class="line">                if (!canWin(String.valueOf(charString))) &#123;</div><div class="line">                    return true;</div><div class="line">                &#125;</div><div class="line">                charString[i] = &apos;+&apos;; charString[i+1] = &apos;+&apos;;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 380. Insert Delete GetRandom O(1)]]></title>
      <url>http://yoursite.com/2017/02/19/Leetcode-380-Insert-Delete-GetRandom-O-1/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Design a data structure that supports all following operations in average O(1) time.</p>
<p>insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// Init an empty set.</div><div class="line">RandomizedSet randomSet = new RandomizedSet();</div><div class="line"></div><div class="line">// Inserts 1 to the set. Returns true as 1 was inserted successfully.</div><div class="line">randomSet.insert(1);</div><div class="line"></div><div class="line">// Returns false as 2 does not exist in the set.</div><div class="line">randomSet.remove(2);</div><div class="line"></div><div class="line">// Inserts 2 to the set, returns true. Set now contains [1,2].</div><div class="line">randomSet.insert(2);</div><div class="line"></div><div class="line">// getRandom should return either 1 or 2 randomly.</div><div class="line">randomSet.getRandom();</div><div class="line"></div><div class="line">// Removes 1 from the set, returns true. Set now contains [2].</div><div class="line">randomSet.remove(1);</div><div class="line"></div><div class="line">// 2 was already in the set, so return false.</div><div class="line">randomSet.insert(2);</div><div class="line"></div><div class="line">// Since 2 is the only number in the set, getRandom always return 2.</div><div class="line">randomSet.getRandom();</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation:</h3>
<p>很神奇的一道题，因为需要每个操作的复杂度平均为O(1),最初我只用了一个Arraylist存也AC了，但是时间很久，因为remove的时候不是O(1).换了Hashmap存index，快一些。但是要注意，remove那边不能直接count--，需要和最后一个值调换，这样保证其他的index不变，只减少最后一个。A little tricky
总而言之，算法设计还是蛮有趣的，好好想想。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public class RandomizedSet &#123;</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    int count;</div><div class="line">    public RandomizedSet() &#123;</div><div class="line">        count = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</div><div class="line">    public boolean insert(int val) &#123;</div><div class="line">        if(map.containsKey(val)) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        map.put(val,count);</div><div class="line">        list.add(val);</div><div class="line">        count=map.size();</div><div class="line">        // System.out.println(list);</div><div class="line">        return true;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Removes a value from the set. Returns true if the set contained the specified element. */</div><div class="line">    public boolean remove(int val) &#123;</div><div class="line">        if (map.containsKey(val)) &#123;</div><div class="line">            int index = map.get(val);</div><div class="line">            // change the index with the last one if it is not the last one;</div><div class="line">            if (index &lt; list.size()-1) &#123;</div><div class="line">                int lastone = list.get(list.size()-1);</div><div class="line">                list.set(index, lastone);</div><div class="line">                map.put(lastone,index);</div><div class="line">            &#125;</div><div class="line">            map.remove(val);</div><div class="line">            list.remove(list.size()-1);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return false;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Get a random element from the set. */</div><div class="line">    public int getRandom() &#123;</div><div class="line">        int r =(int)(Math.random()*list.size());</div><div class="line">        // System.out.println(r);</div><div class="line">        return list.get(r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Your RandomizedSet object will be instantiated and called as such:</div><div class="line"> * RandomizedSet obj = new RandomizedSet();</div><div class="line"> * boolean param_1 = obj.insert(val);</div><div class="line"> * boolean param_2 = obj.remove(val);</div><div class="line"> * int param_3 = obj.getRandom();</div><div class="line"> */</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 331. Verify Preorder Serialization of a Binary Tree]]></title>
      <url>http://yoursite.com/2017/02/19/Leetcode-331-Verify-Preorder-Serialization-of-a-Binary-Tree/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">     _9_</div><div class="line">    /   \</div><div class="line">   3     2</div><div class="line">  / \   / \</div><div class="line"> 4   1  #  6</div><div class="line">/ \ / \   / \</div><div class="line"># # # #   # #</div></pre></td></tr></table></figure></p>
<p>For example, the above binary tree can be serialized to the string &quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;, where # represents a null node.</p>
<p>Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.</p>
<p>Each comma separated value in the string must be either an integer or a character '#' representing null pointer.</p>
<p>You may assume that the input format is always valid, for example it could never contain two consecutive commas such as &quot;1,,3&quot;.</p>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</div></pre></td></tr></table></figure></p>
<p>Return true</p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;1,#&quot;</div></pre></td></tr></table></figure></p>
<p>Return false</p>
<p>Example 3:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;9,#,#,1&quot;</div></pre></td></tr></table></figure></p>
<p>Return false</p>
<h3 id="explanation">Explanation:</h3>
<p>该怎么说呢，就是想破脑袋才想到stack做，再然后调了半天bug。如果遇到#，去检查是不是stack里面有一个#和一个阿拉伯数字，如果是的话，全部替换成一个“#”，表示一个子节点结束。最后判断是不是stack里只有一个“#”表示的根节点。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public boolean isValidSerialization(String preorder) &#123;</div><div class="line">        Stack&lt;String&gt; stack = new Stack&lt;&gt;();</div><div class="line">        String[] nodes = preorder.split(&quot;,&quot;);</div><div class="line">        for(String s: nodes) &#123;</div><div class="line">            while (!stack.isEmpty() &amp;&amp; stack.peek().equals(&quot;#&quot;)) &#123;</div><div class="line">                if (s.equals(&quot;#&quot;)) &#123;</div><div class="line">                    stack.pop();</div><div class="line">                    if (!stack.empty() &amp;&amp; !stack.peek().equals(&quot;#&quot;)) &#123;</div><div class="line">                        stack.pop();</div><div class="line">                    &#125;else &#123;</div><div class="line">                        stack.push(&quot;#&quot;);</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            stack.push(s);</div><div class="line">        &#125;</div><div class="line">        return stack.size() == 1 &amp;&amp; stack.peek().equals(&quot;#&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 289. Game of Life]]></title>
      <url>http://yoursite.com/2017/02/19/Leetcode-289-Game-of-Life/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>According to the Wikipedia's article: &quot;The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&quot;</p>
<p>Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p>
<p>Any live cell with fewer than two live neighbors dies, as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population..
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
Write a function to compute the next state (after one update) of the board given its current state.</p>
<p>Follow up:
Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</p>
<h4 id="explanation">Explanation:</h4>
<p>依次遍历matrix，判断周围八个方向总和，如果之后是live，就设置为3，否则设置为2。最后再遍历一次，改成0或者1。
感觉这道题的考点是in place，其他的比较简单，遍历没有讨巧的方法。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public void gameOfLife(int[][] board) &#123;</div><div class="line">        if (board == null || board.length == 0) return;</div><div class="line">        int m = board.length; int n = board[0].length;</div><div class="line">        for (int i=0; i&lt;board.length; ++i) &#123;</div><div class="line">            for (int j = 0; j &lt; board[0].length; ++j) &#123;</div><div class="line">                int sum = sumHelper(board, i, j, m, n);</div><div class="line">                if(board[i][j]==0 &amp;&amp; sum==3) board[i][j]=3;</div><div class="line">                if(board[i][j]==1 &amp;&amp; (sum&lt;2 || sum&gt;3)) board[i][j]=2;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (int i=0; i&lt;board.length; i++) &#123;</div><div class="line">            for (int j = 0; j &lt; board[0].length; j++) &#123;</div><div class="line">                board[i][j]%=2;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int sumHelper(int[][] board, int i, int j, int m, int n) &#123;</div><div class="line">        int sum = 0;</div><div class="line">        for (int x = Math.max(i-1, 0); x&lt;=Math.min(i+1, m-1); ++x) &#123;</div><div class="line">            for (int y = Math.max(j-1,0); y&lt;=Math.min(j+1,n-1); ++y) &#123;</div><div class="line">                if (board[x][y] == 2 || board[x][y] == 1) &#123;</div><div class="line">                    sum += 1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sum -= board[i][j];</div><div class="line">        return sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 298. Binary Tree Longest Consecutive Sequence]]></title>
      <url>http://yoursite.com/2017/02/18/LeetCode-298-Binary-Tree-Longest-Consecutive-Sequence/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>Given a binary tree, find the length of the longest consecutive sequence path.</p>
<p>The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">For example,</div><div class="line">   1</div><div class="line">    \</div><div class="line">     3</div><div class="line">    / \</div><div class="line">   2   4</div><div class="line">        \</div><div class="line">         5</div><div class="line">Longest consecutive sequence path is 3-4-5, so return 3.</div><div class="line">   2</div><div class="line">    \</div><div class="line">     3</div><div class="line">    /</div><div class="line">   2</div><div class="line">  /</div><div class="line"> 1</div><div class="line">Longest consecutive sequence path is 2-3,not3-2-1, so return 2.</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>递归。想清楚base case和递归的模式即可。左右值，以及当前值，不要混淆。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int longestConsecutive(TreeNode root) &#123;</div><div class="line">        return (root==null)?0:Math.max(Helper(root.left,1,root.val), Helper(root.right, 1, root.val));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public int Helper(TreeNode root, int count, int val) &#123;</div><div class="line">        if (root == null) return count;</div><div class="line">        count = (root.val - val == 1) ? count+1:1;</div><div class="line">        int leftCount = Helper(root.left, count, root.val);</div><div class="line">        int rightCount = Helper(root.right, count, root.val);</div><div class="line">        return Math.max(count, Math.max(leftCount, rightCount));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 2Sum/3sum/4sum及其各种变体]]></title>
      <url>http://yoursite.com/2017/02/16/Leetcode-Two-Sum-Three-Sum-and-their-variations/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>经典的2sum，3sum，4sum极其变体题目总结，需要熟记。</p>
<h3 id="leetcode-1-two-sum">Leetcode 1. Two Sum</h3>
<h4 id="question">Question:</h4>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<p>Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Given nums = [2, 7, 11, 15], target = 9,</div><div class="line"></div><div class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</div><div class="line">return [0, 1].</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>用HashMap存差值，如果之后找到了立即返回两个index。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int[] twoSum(int[] nums, int target) &#123;</div><div class="line">    int[] result = new int[2];</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    for (int i=0; i&lt;nums.length; i++) &#123;</div><div class="line">        int minus = target - nums[i];</div><div class="line">        if (map.containsKey(nums[i])) &#123;</div><div class="line">            result[1] = i;</div><div class="line">            result[0] = map.get(nums[i]);</div><div class="line">            break;</div><div class="line">        &#125; else &#123;</div><div class="line">            map.put(minus, i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-167-two-sum-ii-input-array-is-sorted">Leetcode 167. Two Sum II - Input array is sorted</h3>
<h4 id="question">Question:</h4>
<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>
<p>Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2</p>
<h4 id="explanation">Explanation:</h4>
<p>Array是sorted，所以用两指针，找到符合条件的两个index。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public int[] twoSum(int[] num, int target) &#123;</div><div class="line">    int[] result = new int[2];</div><div class="line">    int left = 0;</div><div class="line">    int right = num.length - 1;</div><div class="line">    while (left &lt; right) &#123;</div><div class="line">        int sum = num[left]+num[right];</div><div class="line">        if (sum == target) &#123;</div><div class="line">            result[0] = left + 1;</div><div class="line">            result[1] = right + 1;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        else if (sum &lt; target) &#123;</div><div class="line">            left++;</div><div class="line">        &#125; else &#123;</div><div class="line">            right--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-170-two-sum-iii-data-structure-design">Leetcode 170. Two Sum III - Data structure design</h3>
<h4 id="question">Question:</h4>
<p>Design and implement a TwoSum class. It should support the following operations: add and find.</p>
<p>add - Add the number to an internal data structure.
find - Find if there exists any pair of numbers which sum is equal to the value.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">For example,</div><div class="line">add(1); add(3); add(5);</div><div class="line">find(4) -&gt; true</div><div class="line">find(7) -&gt; false</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>一道典型的Trade off， 如果要add为O(n), 则find为 o(1),反之。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class TwoSum &#123;</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    public TwoSum() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Add the number to an internal data structure.. */</div><div class="line">    public void add(int number) &#123;</div><div class="line">        if (map.containsKey(number)) &#123;</div><div class="line">            map.put(number, map.get(number)+1);</div><div class="line">        &#125; else &#123;</div><div class="line">            map.put(number, 1);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Find if there exists any pair of numbers which sum is equal to the value. */</div><div class="line">    public boolean find(int value) &#123;</div><div class="line">        for (int n:map.keySet()) &#123;</div><div class="line">            int minus = value -n;</div><div class="line">            if (map.containsKey(minus)) &#123;</div><div class="line">                if (minus == n &amp;&amp; map.get(n) &gt; 1) return true;</div><div class="line">                if (minus != n) return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-15-3sum">Leetcode 15. 3Sum</h3>
<h4 id="question">Question:</h4>
<p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>
<p>Note: The solution set must not contain duplicate triplets.</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">For example, given array S = [-1, 0, 1, 2, -1, -4],</div><div class="line"></div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>先排序，遍历其中每个值，找到target减去后的值，按照two sum in sorted来做就行了。要注意skip相同值，不能重复放。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) &#123;</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();</div><div class="line">    Arrays.sort(nums);</div><div class="line">    for (int i=0; i&lt;nums.length-2; i++) &#123;</div><div class="line">        if (i&gt;0 &amp;&amp; nums[i] == nums[i-1]) continue;</div><div class="line">        int twoSum = 0 - nums[i];</div><div class="line">        int left = i+1;</div><div class="line">        int right = nums.length-1;</div><div class="line">        while (left &lt; right) &#123;</div><div class="line">            if (nums[left] + nums[right] == twoSum) &#123;</div><div class="line">                result.add(Arrays.asList(nums[i], nums[left], nums[right]));</div><div class="line">                // skip the same ones</div><div class="line">                while (left &lt; right &amp;&amp; nums[left] == nums[left+1]) left ++;</div><div class="line">                while (left &lt; right &amp;&amp; nums[right] == nums[right-1]) right --;</div><div class="line">                left++; right--;</div><div class="line">            &#125;</div><div class="line">            else if (nums[left] + nums[right] &lt; twoSum) &#123;</div><div class="line">                left ++;</div><div class="line">            &#125; else &#123;</div><div class="line">                right --;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-16-3sum-closest">Leetcode 16. 3Sum Closest</h3>
<h4 id="question">Question:</h4>
<p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">For example, given array S = &#123;-1 2 1 -4&#125;, and target = 1.</div><div class="line"></div><div class="line">The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>同样的用3sum的方法做，只不过要多一个值来存储最小的diff和最靠近的sum。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int threeSumClosest(int[] nums, int target) &#123;</div><div class="line">        int closest = target;</div><div class="line">        int minDiff = Integer.MAX_VALUE;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        for (int i=0; i&lt;nums.length-2; i++) &#123;</div><div class="line">            int left = i+1; int right = nums.length-1;</div><div class="line">            int twoSum = target - nums[i];</div><div class="line">            System.out.println(closest);</div><div class="line">            while (left &lt; right) &#123;</div><div class="line">                int sum = nums[left] + nums[right];</div><div class="line">                // if equal target, just return. Else find out the closest sum.</div><div class="line">                if (twoSum == sum) &#123;</div><div class="line">                    return target;</div><div class="line">                &#125; else&#123;</div><div class="line">                    if (Math.abs(twoSum - sum) &lt; minDiff) &#123;</div><div class="line">                        minDiff = Math.abs(twoSum - sum);</div><div class="line">                        closest = sum+nums[i];</div><div class="line">                    &#125;</div><div class="line">                    if (twoSum &lt; sum) right--;</div><div class="line">                    else left++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return closest;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-259-3sum-smaller">Leetcode 259. 3Sum Smaller</h3>
<h4 id="question">Question:</h4>
<p>Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 &lt;= i &lt; j &lt; k &lt; n that satisfy the condition nums[i] + nums[j] + nums[k] &lt; target.</p>
<p>For example, given nums = [-2, 0, 1, 3], and target = 2.</p>
<p>Return 2. Because there are two triplets which sums are less than 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[-2, 0, 1]</div><div class="line">[-2, 0, 3]</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>先排序，遍历其中每个值，找到target减去后的值，按照two sum in sorted来做就行了，但是要注意，因为只要算比它小的个数，所以注意指针如何移动，并且如何count。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public int threeSumSmaller(int[] nums, int target) &#123;</div><div class="line">    int count = 0;</div><div class="line">    Arrays.sort(nums);</div><div class="line">    if (nums.length &lt; 3) return 0;</div><div class="line">    for (int i=0; i&lt;nums.length; i++) &#123;</div><div class="line">        int twoSum = target - nums[i];</div><div class="line">        int left = i+1; int right = nums.length - 1;</div><div class="line">        while (left &lt; right) &#123;</div><div class="line">            if (nums[left] + nums[right] &gt;= twoSum) &#123;</div><div class="line">                right --;</div><div class="line">            &#125; else &#123;</div><div class="line">                count += right - left;</div><div class="line">                left ++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-18-4sum">Leetcode 18. 4Sum</h3>
<h4 id="question">Question:</h4>
<p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>
<p>Note: The solution set must not contain duplicate quadruplets.</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.</div><div class="line"></div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1,  0, 0, 1],</div><div class="line">  [-2, -1, 1, 2],</div><div class="line">  [-2,  0, 0, 2]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>在3Sum上面套一层就行了。吐槽无力。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) &#123;</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    if (nums.length &lt; 4) return list;</div><div class="line">    Arrays.sort(nums);</div><div class="line">    for (int i=0; i&lt;nums.length - 3; i++) &#123;</div><div class="line">        if (i &gt; 0 &amp;&amp; nums[i] == nums[i-1]) continue;</div><div class="line">        for (int j=i+1; j&lt;nums.length-2; j++) &#123;</div><div class="line">            if (j &gt; i+1 &amp;&amp; nums[j] == nums[j-1]) continue;</div><div class="line">            int left = j+1; int right = nums.length-1;</div><div class="line">            while (left &lt;right) &#123;</div><div class="line">                if (nums[left] + nums[right] == target - nums[i] - nums[j]) &#123;</div><div class="line">                    list.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));</div><div class="line">                    while (left &lt; right &amp;&amp; nums[left] == nums[left+1]) left ++;</div><div class="line">                    while (left &lt; right &amp;&amp; nums[right] == nums[right-1]) right --;</div><div class="line">                    left ++; right --;</div><div class="line">                &#125; else if (nums[left] + nums[right]&lt; target - nums[i] - nums[j]) &#123;</div><div class="line">                    left++;</div><div class="line">                &#125; else &#123;</div><div class="line">                    right--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return list;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-454-4sum-ii">Leetcode 454. 4Sum II</h3>
<h4 id="question">Question:</h4>
<p>Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.</p>
<p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line"></div><div class="line">Input:</div><div class="line">A = [ 1, 2]</div><div class="line">B = [-2,-1]</div><div class="line">C = [-1, 2]</div><div class="line">D = [ 0, 2]</div><div class="line"></div><div class="line">Output:</div><div class="line">2</div><div class="line"></div><div class="line">Explanation:</div><div class="line">The two tuples are:</div><div class="line">1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0</div><div class="line">2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation：</h4>
<p>O(N^2)+Hashmap. Boring，下一题。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public int fourSumCount(int[] A, int[] B, int[] C, int[] D) &#123;</div><div class="line">    HashMap&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    int count = 0;</div><div class="line">    for (int i=0; i&lt;A.length; i++) &#123;</div><div class="line">        for (int j=0; j&lt;B.length; j++) &#123;</div><div class="line">            int sumAB = A[i] + B[j];</div><div class="line">            if (!map.containsKey(0-sumAB)) map.put(0-sumAB, 1);</div><div class="line">            else map.put(0-sumAB, map.get(0-sumAB)+1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    for (int ii = 0; ii&lt;C.length; ii++) &#123;</div><div class="line">        for (int jj=0; jj&lt;D.length; jj++) &#123;</div><div class="line">            int sumCD = C[ii] + D[jj];</div><div class="line">            if (map.containsKey(sumCD)) count+= map.get(sumCD);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 359. Logger Rate Limiter]]></title>
      <url>http://yoursite.com/2017/02/15/Leetcode-359-Logger-Rate-Limiter/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is not printed in the last 10 seconds.</p>
<p>Given a message and a timestamp (in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.</p>
<p>It is possible that several messages arrive roughly at the same time.</p>
<p>Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Logger logger = new Logger();</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 1</div><div class="line">logger.shouldPrintMessage(1, &quot;foo&quot;); returns true;</div><div class="line"></div><div class="line">// logging string &quot;bar&quot; at timestamp 2</div><div class="line">logger.shouldPrintMessage(2,&quot;bar&quot;); returns true;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 3</div><div class="line">logger.shouldPrintMessage(3,&quot;foo&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;bar&quot; at timestamp 8</div><div class="line">logger.shouldPrintMessage(8,&quot;bar&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 10</div><div class="line">logger.shouldPrintMessage(10,&quot;foo&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 11</div><div class="line">logger.shouldPrintMessage(11,&quot;foo&quot;); returns true;</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation:</h3>
<p>按照普通的hashmap存下所有值，然后更新timestamp是一种办法。但是实际中会浪费很多空间，所以比较好的方式其实是用queue存下最近timestamp在10以内的值，保持一个size最多为10的窗口就行。但是跑出来时间挺久的，用的空间少。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">class Log&#123;</div><div class="line">    int timestamp;</div><div class="line">    String message;</div><div class="line">    public Log(int Timestamp, String Message) &#123;</div><div class="line">        timestamp = Timestamp;</div><div class="line">        message = Message;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class Logger &#123;</div><div class="line"></div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    PriorityQueue&lt;Log&gt; queue;</div><div class="line">    Set&lt;String&gt; set;</div><div class="line">    public Logger() &#123;</div><div class="line">        queue = new PriorityQueue&lt;&gt;(10, new Comparator&lt;Log&gt;()&#123;</div><div class="line">            public int compare(Log l1, Log l2)&#123;</div><div class="line">                return l1.timestamp - l2.timestamp;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        set = new HashSet&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.</div><div class="line">        If this method returns false, the message will not be printed.</div><div class="line">        The timestamp is in seconds granularity. */</div><div class="line">    public boolean shouldPrintMessage(int timestamp, String message) &#123;</div><div class="line">        while (queue.size() &gt; 0) &#123;</div><div class="line">            Log log = queue.peek();</div><div class="line">            if (timestamp - log.timestamp &gt;= 10) &#123;</div><div class="line">                Log pollLog = queue.poll();</div><div class="line">                set.remove(pollLog.message);</div><div class="line">            &#125; else &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        boolean result = !set.contains(message);</div><div class="line">        if ( !set.contains(message)) &#123;</div><div class="line">            queue.add(new Log(timestamp, message));</div><div class="line">            set.add(message);</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Your Logger object will be instantiated and called as such:</div><div class="line"> * Logger obj = new Logger();</div><div class="line"> * boolean param_1 = obj.shouldPrintMessage(timestamp,message);</div><div class="line"> */</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 459. Repeated Substring Pattern]]></title>
      <url>http://yoursite.com/2017/02/12/Leetcode-459-Repeated-Substring-Pattern/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>一道很简单的题。但是一直在调corner case，好不容易写完了再感受下速度和别人写的代码，差距太大了。心疼三秒钟。</p>
<h4 id="question">Question:</h4>
<p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.</p>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: &quot;abab&quot;</div><div class="line"></div><div class="line">Output: True</div><div class="line"></div><div class="line">Explanation: It&apos;s the substring &quot;ab&quot; twice.</div></pre></td></tr></table></figure></p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: &quot;aba&quot;</div><div class="line"></div><div class="line">Output: False</div></pre></td></tr></table></figure></p>
<p>Example 3:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: &quot;abcabcabcabc&quot;</div><div class="line"></div><div class="line">Output: True</div><div class="line"></div><div class="line">Explanation: It&apos;s the substring &quot;abc&quot; four times. (And the substring &quot;abcabc&quot; twice.)</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>原理很简单，就是每次得到一个substring，往后检查相同长度的下一段string。要注意的是，遍历的index只要到length/2就行了，毕竟至少也要重复两遍的。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public boolean repeatedSubstringPattern(String str) &#123;</div><div class="line">        if(str == null || str.length() &lt;= 1) return false;</div><div class="line">        int len = str.length();</div><div class="line">        for ( int i=0; i&lt;=len/2; i++) &#123;</div><div class="line">            boolean flag = true;</div><div class="line">            if (len%(i+1) != 0 || len == i+1) continue;</div><div class="line">            String subString = str.substring(0,(i+1));</div><div class="line">            int start = i+1;</div><div class="line">            int end = start * 2;</div><div class="line">            while (end&lt;=len) &#123;</div><div class="line">                if (!subString.equals(str.substring(start,end)))&#123;</div><div class="line">                    flag = false; break;</div><div class="line">                &#125;</div><div class="line">                start = start + i+1;</div><div class="line">                end = end + i+1;</div><div class="line">            &#125;</div><div class="line">            // System.out.println(flag);</div><div class="line">            if (flag) return true;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 475. Heaters]]></title>
      <url>http://yoursite.com/2017/02/12/Leetcode-475-Heaters/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.</p>
<p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p>
<p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p>
<p>Note:</p>
<ol>
<li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>
<li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>
<li>As long as a house is in the heaters' warm radius range, it can be warmed.</li>
<li>All the heaters follow your radius standard and the warm radius will the same.</li>
</ol>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,3],[2]</div><div class="line">Output: 1</div><div class="line">Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.</div></pre></td></tr></table></figure></p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,3,4],[1,4]</div><div class="line">Output: 1</div><div class="line">Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.</div></pre></td></tr></table></figure></p>
<h4 id="solution-1-binary-search-slow">Solution 1: Binary Search (slow)</h4>
<h5 id="explanation">Explanation:</h5>
<p>heaters排序，对每个house用binary Search找到最靠近的那个值。</p>
<h5 id="code">Code:</h5>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public int findRadius(int[] houses, int[] heaters) &#123;</div><div class="line">    Arrays.sort(heaters);</div><div class="line">    int radius = 0;</div><div class="line">    for ( int h : houses) &#123;</div><div class="line">        radius = Math.max(radius, binarySearch(h, heaters));</div><div class="line">    &#125;</div><div class="line">    return radius;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public int binarySearch(int val, int[] heaters) &#123;</div><div class="line">    int start = 0;</div><div class="line">    int end = heaters.length - 1;</div><div class="line">    int diff =Integer.MAX_VALUE;</div><div class="line">    while (start &lt; end) &#123;</div><div class="line">        int mid = (start + (end-start)/2);</div><div class="line">        if (val &lt; heaters[mid]) &#123;</div><div class="line">            end = mid;</div><div class="line">        &#125; else &#123;</div><div class="line">            start = mid+1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (start &gt; 0) &#123;</div><div class="line">        diff = Math.min(Math.abs(val - heaters[start]), Math.abs(val - heaters[start-1]));</div><div class="line">    &#125;</div><div class="line">    if (start &lt; heaters.length - 1) &#123;</div><div class="line">        diff = Math.min(diff, Math.abs(val - heaters[start+1]));</div><div class="line">    &#125;</div><div class="line">    diff = Math.min(diff, Math.abs(val - heaters[start]));</div><div class="line">    return diff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="solution-2-two-pointersquicker">Solution 2: Two pointers(quicker)</h4>
<h5 id="explanation">Explanation:</h5>
<p>heaters, houses排序，用两个指针分别遍历一遍，主体部分的复杂度是O（m+n）</p>
<h5 id="code">Code:</h5>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int findRadius(int[] houses, int[] heaters) &#123;</div><div class="line">    // O(mlogm)</div><div class="line">    Arrays.sort(houses);</div><div class="line">    // O(nlogn)</div><div class="line">    Arrays.sort(heaters);</div><div class="line">    int i = 0, res = 0;</div><div class="line">    // O(m+n)</div><div class="line">    for (int house : houses) &#123;</div><div class="line">        while (i &lt; heaters.length - 1 &amp;&amp; heaters[i] + heaters[i + 1] &lt;= house * 2) &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        res = Math.max(res, Math.abs(heaters[i] - house));</div><div class="line">    &#125;</div><div class="line">    return res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 356. Line Reflection]]></title>
      <url>http://yoursite.com/2017/02/12/Leetcode-356-Line-Reflection/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points.</p>
<p><strong>Example 1:</strong>
Given points = [[1,1],[-1,1]], return true.</p>
<p><strong>Example 2:</strong>
Given points = [[1,1],[-1,-1]], return false.</p>
<p><strong>Follow up:</strong>
Could you do better than O(n2)?</p>
<p><strong>Hint:</strong></p>
<blockquote>
<p>Find the smallest and largest x-value for all points.
If there is a line then it should be at y = (minX + maxX) / 2.
For each point, make sure that it has a reflected point in the opposite side.</p>
</blockquote>
<h4 id="explanation">Explanation:</h4>
<p>刚开始的思路是， 用一个map存{y值:[所有相应x值]}。
对于每一个y值，将其对应的x值的list排序。用two pointers检查是不是对称。
这样的复杂度超过O(n^2)了，sort就已经O(nlogn)了。
于是，按照了hint写，先遍历一遍，得到x最大值和最小值，从而得到x中间值。再遍历一遍，存下每个点的对称点。最后遍历一遍，如果有哪个坐标不在set里面，说明没有对称点。（和two sum一样的思路）</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public boolean isReflected(int[][] points) &#123;</div><div class="line">    if(points == null || points.length == 0) return true;</div><div class="line">    int minX = Integer.MAX_VALUE;</div><div class="line">    int maxX = Integer.MIN_VALUE;</div><div class="line">    double midX = 0.0;</div><div class="line">    for( int i=0; i&lt;points.length; i++) &#123;</div><div class="line">        int[] point = points[i];</div><div class="line">        int x = point[0]; int y = point[1];</div><div class="line">        minX = Math.min(minX, x);</div><div class="line">        maxX = Math.max(maxX, x);</div><div class="line">    &#125;</div><div class="line">    midX = (minX + maxX) / 2.0;</div><div class="line">    HashSet&lt;Integer&gt; set = new HashSet&lt;&gt;();</div><div class="line">    for( int i=0; i&lt;points.length; i++) &#123;</div><div class="line">        int[] point = points[i];</div><div class="line">        int x = point[0]; int y = point[1];</div><div class="line">        int[] reflect = new int[2];</div><div class="line">        reflect[0] = (int)(2*midX- x);</div><div class="line">        reflect[1] = y;</div><div class="line">        set.add(Arrays.hashCode(reflect));</div><div class="line">    &#125;</div><div class="line">    for( int i=0; i&lt;points.length; i++) &#123;</div><div class="line">        int[] point = points[i];</div><div class="line">        if (!set.contains(Arrays.hashCode(point))) return false;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 409. Longest Palindrome]]></title>
      <url>http://yoursite.com/2017/02/12/Leetcode-409-Longest-Palindrome/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>
<p>This is case sensitive, for example &quot;Aa&quot; is not considered a palindrome here.</p>
<p>Note:
Assume the length of given string will not exceed 1,010.</p>
<p>Example:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;abccccdd&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">7</div><div class="line"></div><div class="line">Explanation:</div><div class="line">One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>超简单的题。
Solution 1:
可以用数组存储每个字母的次数，但是需要考虑大小写字母，分开根据ascii计算index。
Solution 2:
用Hashmap存储每个字符出现的次数，加和所有even次数，再加和odd/2*2，如果出现过odd，最后加上1，否则不加。
Solution 3:<br>
用HashSet，如果出现过，就加2，去掉。再出现，再加入。最后如果set是空的，说明没有odd，否则加上1。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public int longestPalindrome(String s) &#123;</div><div class="line">    HashSet&lt;Character&gt; set = new HashSet&lt;&gt;();</div><div class="line">    int count = 0;</div><div class="line">    for (Character c: s.toCharArray()) &#123;</div><div class="line">        if (set.contains(c)) &#123;</div><div class="line">            count += 2;</div><div class="line">            set.remove(c);</div><div class="line">        &#125; else set.add(c);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    if (!set.isEmpty()) count++;</div><div class="line">    return count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Interview Questions]]></title>
      <url>http://yoursite.com/2017/02/11/Java-Interview-Questions/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>Always update...</p>
<h3 id="jvm-is-plantform-dependent">JVM is plantform dependent?</h3>
<blockquote>
<p>Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?</p>
</blockquote>
<hr>
<p><strong>JVM translates bytecode into machine language</strong>
Every Java program is first compiled into an intermediate language called Java bytecode. The JVM is used primarily for 2 things: the first is to translate the bytecode into the machine language for a particular computer, and the second thing is to actually execute the corresponding machine-language instructions as well. The JVM and bytecode combined give Java its status as a &quot;portable&quot; language – this is because Java bytecode can be transferred from one machine to another.</p>
<p><strong>Machine language is OS dependent</strong>
Since the JVM must translate the bytecode into machine language, and since the machine language depends on the operating system being used, it is clear that the JVM is platform (operating system) dependent – in other words, the JVM is not platform independent.</p>
<p><strong>The JVM is not platform independent</strong>
The key here is that the JVM depends on the operating system – so if you are running Mac OS X you will have a different JVM than if you are running Windows or some other operating system.</p>
<h3 id="overloading-amp-overriding">Overloading &amp; Overriding</h3>
<blockquote>
<p>In Java, what’s the difference between method overloading and method overriding?</p>
</blockquote>
<hr>
<p><strong>Overloading:</strong>
Method overloading in Java occurs when two or more methods in the same class have <strong>the exact same name but different parameters</strong> (remember that method parameters accept values passed into the method). However, method overloading is a compile-time phenomenon.
<strong>Can be
overloading:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.) The number of parameters is different for the methods.</div><div class="line">2.) The parameter types are different (like</div><div class="line">changing a parameter that was a float to an int).</div></pre></td></tr></table></figure></p>
<p><strong>Not overloading</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. Just changing the return type of the method. (Compiler Error)</div><div class="line">2. Changing just the name of the method parameters, but</div><div class="line">not changing the parameter types.</div></pre></td></tr></table></figure></p>
<p><strong>Overriding:</strong>
[根本也记不住，其实我的方法是小朋友骑在爸爸肩膀上，他们主体是一样的，不会变的，即方法参数返回值不变，但内容变了。<em>(:зゝ∠)</em>]
Overriding means that a method inherited from a parent class will be changed. But, when overriding a method everything remains <strong>exactly the same except the method definition – basically what the method does is changed slightly to fit in with the needs of the child class</strong>. But, the method name, the number and types of parameters, and the return type will all remain the same.
Method overriding is a run-time phenomenon that is the driving force behind polymorphism.</p>
<h3 id="private-constructor">Private Constructor</h3>
<blockquote>
<p>What’s the point of having a private constructor?</p>
</blockquote>
<hr>
<p>Defining a constructor with the private modifier says that only the native class (as in the class in which the private constructor is defined) is allowed to create an instance of the class, and no other caller is permitted to do so.</p>
<p>There are two possible reasons why one would want to use a private constructor – the first is that <strong>you don’t want any objects of your class to be created at all,</strong> and the second is that <strong>you only want objects to be created internally – as in only created in your class.</strong></p>
<p>A <strong>singleton</strong> is a design pattern that allows only one instance of your class to be created, and this can be accomplished by using a private constructor.</p>
<h3 id="an-object-and-a-class">An object and a class</h3>
<blockquote>
<p>In Java, what’s the difference between an object and a class?</p>
</blockquote>
<p>Shortly: An object is an instance of a class.
Objects have a lifespan but classes do not.</p>
<h3 id="an-object-and-a-class">An object and a class</h3>
<blockquote>
<p>In Java, what’s the difference between an object and a class?</p>
</blockquote>
<hr>
<p><strong>References:</strong>
http://www.programmerinterview.com/</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 271. Encode and Decode Strings]]></title>
      <url>http://yoursite.com/2017/02/10/271-Encode-and-Decode-Strings/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.</p>
<p>Machine 1 (sender) has the function:</p>
<p><figure class="highlight plain"><figcaption><span>encode(vector<string> strs) &#123;</string></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  // ... your code</div><div class="line">  return encoded_string;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Machine 2 (receiver) has the function:
<figure class="highlight plain"><figcaption><span>decode(string s) &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  //... your code</div><div class="line">  return strs;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>So Machine 1 does:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string encoded_string = encode(strs);</div></pre></td></tr></table></figure></p>
<p>and Machine 2 does:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vector&lt;string&gt; strs2 = decode(encoded_string);</div></pre></td></tr></table></figure></p>
<p>strs2 in Machine 2 should be the same as strs in Machine 1.</p>
<p>Implement the encode and decode methods.</p>
<p>Note:</p>
<ul>
<li>The string may contain any possible characters out of 256 valid ascii characters. Your algorithm should be generalized enough to work on any possible characters.</li>
<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>
<li>Do not rely on any library method such as eval or serialize methods. You should implement your own encode/decode algorithm.</li>
</ul>
<h3 id="explanation">Explanation:</h3>
<p>乍一看，也不知道说的是什么。其实题意是给一个list的字符串，先要拼成一整个字符串，是encode。然后把这整个字符拆回一个list的字符。
所以考点是如何合理地分隔，然后还能识别出来。
这哪儿是算法，其实考的是Serilization这个计算机系统中的基本概念。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">串行化(Serialization)是计算机科学中的一个概念，它是指将对象存储到介质（如文件、内存缓冲区等）中或是以二进制方式通过网络传输。之后可以通过反串行化从这些连续的字节（byte）数据重新构建一个与原始对象状态相同的对象，因此在特定情况下也可以说是得到一个副本，但并不是所有情况都这样。</div></pre></td></tr></table></figure></p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Codec &#123;</div><div class="line"></div><div class="line">    // Encodes a list of strings to a single string.</div><div class="line">    public String encode(List&lt;String&gt; strs) &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        for(String s : strs) &#123;</div><div class="line">            sb.append(s.length()).append(&apos;/&apos;).append(s);</div><div class="line">        &#125;</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Decodes a single string to a list of strings.</div><div class="line">    public List&lt;String&gt; decode(String s) &#123;</div><div class="line">        List&lt;String&gt; ret = new ArrayList&lt;String&gt;();</div><div class="line">        int i = 0;</div><div class="line">        while(i &lt; s.length()) &#123;</div><div class="line">            int slash = s.indexOf(&apos;/&apos;, i);</div><div class="line">            int size = Integer.valueOf(s.substring(i, slash));</div><div class="line">            ret.add(s.substring(slash + 1, slash + size + 1));</div><div class="line">            i = slash + size + 1;</div><div class="line">        &#125;</div><div class="line">        return ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 346. Moving Average from Data Stream]]></title>
      <url>http://yoursite.com/2017/02/10/346-Moving-Average-from-Data-Stream/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</p>
<p>For example,
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MovingAverage m = new MovingAverage(3);</div><div class="line">m.next(1) = 1</div><div class="line">m.next(10) = (1 + 10) / 2</div><div class="line">m.next(3) = (1 + 10 + 3) / 3</div><div class="line">m.next(5) = (10 + 3 + 5) / 3</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation:</h3>
<p>非常简单的题目，可以用queue或者arraylist或者array保存next的值。用一个sum存着总和，每次都计算一下平均值。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class MovingAverage &#123;</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();</div><div class="line">    int size;</div><div class="line">    int count = 0;</div><div class="line">    int total = 0;</div><div class="line">    public MovingAverage(int size) &#123;</div><div class="line">        this.size = size;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public double next(int val) &#123;</div><div class="line">        if (count &lt; size) &#123;</div><div class="line">            count ++;</div><div class="line">            q.offer(val);</div><div class="line">            total += val;</div><div class="line">            return total*1.0 / count;</div><div class="line">        &#125; else &#123;</div><div class="line">            int remove = q.poll();</div><div class="line">            q.offer(val);</div><div class="line">            total -= remove;</div><div class="line">            total += val;</div><div class="line">            return total*1.0/ size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 300. Longest Increasing Subsequence]]></title>
      <url>http://yoursite.com/2017/02/10/Leetcode-300-Longest-Increasing-Subsequence/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.</p>
<p>Your algorithm should run in O(n2) complexity.</p>
<p><strong>Follow up:</strong>
Could you improve it to O(n log n) time complexity?</p>
<h3 id="solution-1-dynamic-programming-on2">Solution 1: Dynamic Programming O(n^2)</h3>
<h4 id="explanation">Explanation:</h4>
<p>第一层循环： array中的每一个数<br>
第二层循环： 之前的每个数中，选择比这个数小并且有最长链的那个数</p>
<h4 id="code">Code</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public int lengthOfLIS(int[] nums) &#123;</div><div class="line">    if (nums == null || nums.length == 0) return 0;</div><div class="line">    int[] best = new int[nums.length];</div><div class="line">    int max = 1;</div><div class="line">    for ( int i=0; i&lt;nums.length; i++) &#123;</div><div class="line">        best[i] = 1;</div><div class="line">        for ( int j=0; j&lt;i; j++) &#123;</div><div class="line">            if (nums[j] &lt; nums[i]) &#123;</div><div class="line">                best[i] = Math.max(best[i], best[j] + 1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        max = Math.max(best[i], max);</div><div class="line">    &#125;</div><div class="line">    return max;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="solution-2-binary-search-onlogn">Solution 2: Binary Search O(nlogn)</h3>
<h4 id="explanation">Explanation:</h4>
<p>把之前找到的最长的链存起来。遇到下一个数字，如果比list最后一个数大，就放在list的最后，如果不是，就选择比它大，但是大最少的那个数换掉。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public int lengthOfLIS(int[] nums) &#123;</div><div class="line">    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    for (int n: nums) &#123;</div><div class="line">        if (list.size() == 0 || n &gt; list.get(list.size()-1)) &#123;</div><div class="line">            list.add(n);</div><div class="line">        &#125; else &#123;</div><div class="line">            int start = 0;</div><div class="line">            int end = list.size();</div><div class="line">            while (start &lt; end) &#123;</div><div class="line">                int mid = (start+end)/2;</div><div class="line">                if (list.get(mid) &lt; n) &#123;</div><div class="line">                    start = mid +1 ;</div><div class="line">                &#125; else &#123;</div><div class="line">                    end = mid;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            list.set(end,n);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return list.size();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 281. Zigzag Iterator]]></title>
      <url>http://yoursite.com/2017/02/09/Leetcode-281/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>Question:</strong></p>
<p>Given two 1d vectors, implement an iterator to return their elements alternately.</p>
<p>For example, given two 1d vectors:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v1 = [1, 2]</div><div class="line">v2 = [3, 4, 5, 6]</div></pre></td></tr></table></figure></p>
<p>By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].</p>
<p><strong>Follow up:</strong>
What if you are given k 1d vectors? How well can your code be extended to such cases?</p>
<p>Clarification for the follow up question - Update (2015-09-18):
The &quot;Zigzag&quot; order is not clearly defined and is ambiguous for k &gt; 2 cases. If &quot;Zigzag&quot; does not look right to you, replace &quot;Zigzag&quot; with &quot;Cyclic&quot;. For example, given the following input:</p>
<p>[1,2,3]
[4,5,6,7]
[8,9]
It should return [1,4,8,2,5,9,3,6,7].</p>
<p><strong>Explanation:</strong>
如果只有两个vector，挺容易的。就用两个指针，然后每次都判断下就行。</p>
<p><strong>Code</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class ZigzagIterator &#123;</div><div class="line">    List&lt;Integer&gt; V1 = new ArrayList&lt;&gt;();</div><div class="line">    List&lt;Integer&gt; V2 = new ArrayList&lt;&gt;();</div><div class="line">    int index1 = 0;</div><div class="line">    int index2 = 0;</div><div class="line"></div><div class="line">    public ZigzagIterator(List&lt;Integer&gt; v1, List&lt;Integer&gt; v2) &#123;</div><div class="line">        V1 = v1;</div><div class="line">        V2 = v2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int next() &#123;</div><div class="line">        if (index1 &lt;= index2) &#123;</div><div class="line">            if (index1 &lt; V1.size()) &#123;</div><div class="line">                return V1.get(index1++);</div><div class="line">            &#125; else &#123;</div><div class="line">                return V2.get(index2++);</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            if (index2 &lt; V2.size()) &#123;</div><div class="line">                return V2.get(index2++);</div><div class="line">            &#125; else &#123;</div><div class="line">                return V1.get(index1++);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        if (index1 &lt; V1.size() || index2 &lt; V2.size()) return true;</div><div class="line">        return false;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>FollowUp:</strong>
如果是K个vector，每次判断指针就非常不合理了。这里有一种巧妙的办法，用Queue，或者list，道理相通。
基本思路：把每个list变成iterator，然后放进Queue中，每次poll一个出来，然后得到iterator到的值，如果iterator里面还有值，也就是vector还没有空的话，再排到队伍的最后。不断循环。
巧妙。</p>
<p><strong>Code：</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class ZigzagIterator &#123;</div><div class="line">    LinkedList&lt;Iterator&gt; list;</div><div class="line">    public ZigzagIterator(List&lt;Integer&gt; v1, List&lt;Integer&gt; v2) &#123;</div><div class="line">        list = new LinkedList&lt;Iterator&gt;();</div><div class="line">        if(!v1.isEmpty()) list.add(v1.iterator());</div><div class="line">        if(!v2.isEmpty()) list.add(v2.iterator());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int next() &#123;</div><div class="line">        Iterator poll = list.remove();</div><div class="line">        int result = (Integer)poll.next();</div><div class="line">        if(poll.hasNext()) list.add(poll);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        return !list.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Distributed System-Indirect Communication and Naming]]></title>
      <url>http://yoursite.com/2017/02/06/ds69/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>CMU-95702分布式系统
第6、9章总结笔记</p>
<ul>
<li>
<p><strong>Indirect Messaging:</strong>
Indirect communication is defined as communication between entities in a distributed system through an intermediary with no direct coupling between the sender and the receiver(s).</p>
<ul>
<li>Decoupled in space:
<ul>
<li>Sender does not need to know the identify of the receiver(s) and visa-versa</li>
<li>Good for handling legacy systems
– Decoupled in time:</li>
<li>A component need not even be running</li>
<li>The messaging system can store messages until they are successfully delivered</li>
<li>Reliable delivery is insured</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Two messaging modes:</strong></p>
<ul>
<li>Point-to-point:
<ul>
<li>Inventory to Factory</li>
<li>Inventory to Sales</li>
<li>Factory to Accounting</li>
</ul>
</li>
<li>publish / subscribe :
<ul>
<li>parts to parts inventory and parts order</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>some example scenarios:</strong></p>
<ul>
<li>asynchronous communication: like chat ant twitter type app,  report info to on or more interested systems</li>
<li>event-driven problem</li>
<li>decoupled/ multiple consumers</li>
<li>multiply interested parties</li>
</ul>
</li>
<li>
<p><strong>indirect messaging protocols:</strong></p>
<ul>
<li>two open standars: XMPP &amp; amqp</li>
</ul>
</li>
<li>
<p><strong>Java's JMS API:</strong></p>
<ul>
<li>An API for performing indirect messaging.</li>
<li>It is an abstraction API like JNDI and JDBC.</li>
<li>Interacts with some Message Oriented Middleware
(MOM)</li>
<li>JMS is a client-facing interface, meant to abstract
way the particulars of any MOM.</li>
<li>In theory, you should have portability of systems
written with JMS such that they can work with any
MOM.</li>
<li>API is javax.jms</li>
</ul>
</li>
<li>
<p><strong>JMS Queues and topics</strong></p>
</li>
<li>
<p><strong>JMS message types：</strong></p>
<ul>
<li>Stream
<ul>
<li>Sequential stream of Java primitive data types.</li>
</ul>
</li>
<li>Map
<ul>
<li>Set of name-value pairs</li>
</ul>
</li>
<li>Names are String objects</li>
<li>Values are Java primitives (including String)</li>
<li>Text
<ul>
<li>Message is a String object</li>
</ul>
</li>
<li>Plain-text message</li>
<li>XML messages</li>
<li>Object
<ul>
<li>Serialized Java object</li>
</ul>
</li>
<li>Simple if in Java-only environment</li>
<li>Bytes
<ul>
<li>Stream of un-interpreted bytes.</li>
<li>To encode a message body to match an existing message format</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Message driven beans：</strong>
components that are executedasynchronously by messages coming
available in a Queue or Topic.</p>
</li>
</ul>
<p>Line Question on class:</p>
<ul>
<li>abstract indirect messaging API: JMS</li>
<li>point-to-point messaging: Queue</li>
<li>mom used in lab: Glassfish</li>
<li>public subscribe message: Topics</li>
<li>Indirect Messaging Destination: Queue and Topics</li>
<li>Administratively managed resources (External to your program):
Connectionfactory, Queue, Topics</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Distributed System-Mobile and ubiquitous computing]]></title>
      <url>http://yoursite.com/2017/02/06/Distributed-System/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>CMU-95702分布式系统
第19章总结笔记</p>
<ul>
<li><strong>Design issues in distributed mobile applications:</strong>
<ul>
<li><strong>Association:</strong>
• Devices
– Appear	and	disappear	from	the	space.
– Do	so	unpredictably
– May	be	totally	new	to	the	space.
– Or	may	be	returning	to	the	space.
• They	need	to	be:
– Perhaps	added	to	the	network
– Brought	into	Association	with	resources	and	applications
• Examples	of	Association
– Come	on	campus	and	be	able	to	be	associated	with	the	printers that	are	close	to	you.
– Be	alerted	if	someone	you	know	is	walking	near	you.
– Be	provided	with	selling	prices	in	your	local	area	for	your	goods
(not	prices	in	far-away	areas).</li>
<li><strong>Application-level Association:</strong>
often by discorvery, broadcasts</li>
</ul>
</li>
</ul>
<ul>
<li>
<p><strong>How a new device become part of the local network?</strong></p>
<ul>
<li>ARP</li>
<li>DHCP</li>
</ul>
</li>
<li>
<p><strong>Sensing and Context Awareness:</strong></p>
<ul>
<li>sensing: camera, time, acceleration, location, speed, temperature</li>
<li>context awareness: in terms of sensed data, or associated data</li>
</ul>
</li>
<li>
<p><strong>Location Sensing:</strong></p>
<ul>
<li>GPS</li>
<li>Database of	collected	Wifi access points
– stores the	access	point's	MAC	address	and	the	GPS
location	at	which	it	was	observed</li>
<li>Cellular	– compute	using	signal	strength	to
multiple	cellular	tower	locations</li>
<li>RFID	tags	– tags	are	associated	with	a	location</li>
</ul>
</li>
<li>
<p><strong>Adaptation:</strong></p>
<ul>
<li>Presentation	to	fit	the	screen</li>
<li>Use	of	JavaScript	to	fit	the	devices	capabilities</li>
<li>Media	quality	to	fit	the	screen	and	device	capabilities</li>
<li>Language	to	fit	the	user</li>
<li>Information	to	fit	the	physical	context.
• Give	only	movie	times	in	the	future,	and	in	nearby	theaters</li>
</ul>
</li>
<li>
<p><strong>Device awareness / browser detection:</strong>
Reply	differently	depending	on	what	device	makes	request.
3 HTTP	headers	provide	clues	of	what	the	device	is:</p>
</li>
</ul>
<ol>
<li>
<p>User-Agent
• Identifies	the	mobile	browser	and	almost always	the	device manufacturer	and	model.
• BlackBerry8330/4.3.0	Profile/MIDP-2.0	Configuration/CLDC-1.1
VendorID/105
• Collection	of	mobile	agent	strings:
– http://www.zytrax.com/tech/web/mobile_ids.html</p>
</li>
<li>
<p>X-Wap-Profile
• Link	to	an	XML	profile	of	the	phone’s	capabilities
•E.g.http://www.blackberry.net/go/mobile/profiles/uaprof/8310/4.2.2.rdf</p>
</li>
<li>
<p>Accept
• Supported	MIME(多用途的网际邮件扩充协议)types
• E.g.	text/html,	application/xhtml+xml,	etc.</p>
<p>These 3 headers can provide enough info , but:
- header can be missing
- have inaccurate values
- have invalid urls</p>
</li>
</ol>
<ul>
<li><strong>Feature detection(more flexible and reliable solution):</strong>
bottom line: using feature detection, not browser detection
<ul>
<li>Two strategies for feature detection:
<ul>
<li>Graceful	degradation
<ul>
<li>Design	for	modern	browsers</li>
<li>Where	features	are	not	available,	provide	a	simpler
alternative
<ul>
<li>If	not	possible,	alert	the	user</li>
</ul>
</li>
<li>Don't	allow	it	to	invisibly	fail</li>
</ul>
</li>
<li>Progressive	enhancement</li>
</ul>
<ul>
<li>Design	with	a	baseline	of	usable	functionality</li>
<li>Enrich	the	user	experience	step-by-step	by	testing	for
features	before	using	them.</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><strong>Responsive web design:</strong>
<ul>
<li>A	strategy	of	web	design	for	multiple	screen	sizes</li>
<li>Uses:
<ul>
<li>Fluid	grids	expressing	sizes	in	terms	of	percents,	not
pixels</li>
<li>Modify	size	of	media	using	relative	units
<ul>
<li>Keep	them	within	their	bounding	elements</li>
<li>Images</li>
<li>Media</li>
<li>Font	size</li>
</ul>
</li>
<li>Crossing	size	thresholds	switch	to	completely	different
designs
<ul>
<li>Accomplished	using	media	queries</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>
<p><strong>Mobile first:</strong></p>
</li>
<li>
<p>A	philosophy	of	web	design</p>
</li>
<li>
<p>Design	for	mobile	first,	and	desktop	second</p>
</li>
<li>
<p>Counter	to	what	has	been	done	historically,	of	mobile	2nd</p>
</li>
<li>
<p>Benefits	of	Mobile	First:
- Focus	on	the	platform	on	which	you	will	reach	the	most	users
- Forces	designers	to	focus	on	the	most	important	content	and
functionality
- Allows	for	using	technologies	on	mobile:
* touch	events
* geolocation 地理定位
* accelerometer 加速计</p>
</li>
<li>
<p><strong>Mobile deployment strategies:</strong></p>
<ul>
<li>Native
<ul>
<li>E.g.	Android,	iOS</li>
<li>Requires	redeveloping	for	each	architecture</li>
</ul>
<ul>
<li>2	code	bases</li>
</ul>
</li>
<li>Native	with	Development	Framework
<ul>
<li>Use	a	framework	that	compiles	to	multiple	native
applications</li>
<li>E.g.	Corona	(http://www.coronalabs.com)</li>
</ul>
</li>
<li>Mobile	Web
<ul>
<li>Develop	in	HTML	/	CSS	/JavaScript</li>
<li>Accessed	in	a	browser</li>
<li>Can	install	local	icon	to	launch	to	site
<ul>
<li>Use	local	storage	to	store	information	when	off	line</li>
<li>Use	manifest	to	cache	application	to	use	when	off	line</li>
<li>Sync	when	Internet	is	again	available.</li>
</ul>
</li>
</ul>
<ul>
<li>Hybrid
<ul>
<li>Develop	in	HTML	/	CSS	/	JavaScript</li>
<li>Wrap	in	a	browser	wrapper	to	create	native	apps</li>
<li>Wrapper	provides	access	to	phone	hardware	not
accessible	from	the	browser</li>
<li>Apache	Cordova	(https://cordova.apache.org)	is	an	open
source	native	wrapper</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Distributed System-ACID]]></title>
      <url>http://yoursite.com/2017/02/06/17/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>CMU-95702分布式系统
ACID概念总结</p>
<ul>
<li><strong>ACID Transactions：</strong>
<ul>
<li><strong>Atomic:</strong>  All or nothing. No intermediate states are visible. No possibility that
only part of the transaction ran. If a transaction fails or aborts prior to
committing, the TP system will undo the effects of any updates (will
recover). We either commit or abort the entire process. Checkpointing and
Logging and recoverable objects can be used to ensure a transaction is
atomic with respect to failures.</li>
<li><strong>Consistent:</strong>  system invariants preserved, e.g., if there were n dollars in a
bank before a transfer transaction then there will be n dollars in the bank
after the transfer. This is largely in the hands of the application programmer.</li>
<li><strong>Isolated:</strong>  Two transactions do not interfere with each other. They appear as
serial executions. This is the case even though transactions may run
concurrently. Locking is often used to prevent one transaction from
interfering with another.</li>
<li><strong>Durable:</strong> The commit causes a permanent change to stable storage. This
property may be obtained with log-based recovery algorithms. If there has
been a commit but updates have not yet been a commit but updates have not yet been completed due to a crash,
the logs will hold the necessary information on recovery.</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[哪儿]]></title>
      <url>http://yoursite.com/2017/01/24/%E5%93%AA%E5%84%BF/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><embed src="http://www.xiami.com/widget/12753884_1769553081/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"></p>
<p>今天上Advanced Cloud Computing,三个教授就一个问题争论起来。</p>
<p>那真的是很触动我的一刻，加起来都快150岁的三个顶尖学术大牛，在投影仪前面，对待知识还是和孩子一样专注和热情，可爱极了。</p>
<p>忽然想到，Greg的主页上写着，“我才不是个不度假的教授，我2012年去冲浪了呢！”。</p>
<p>其实，每次选课都很头疼，时间太少，想学的课太多，只恨自己不能多读几年。我也知道上学期很不开心的时候，发过誓这学期不要选很难的课了。可是我的研究生只有一次，在CMU念书的机会也只有一次（当然我不介意以后再来哈哈哈），无法不说服自己再争取一下。</p>
<p>只是，最近有一个问题在渐渐放大。</p>
<p>我到底要去哪里。</p>
<p>其实，很多人也不知道到底要去哪里。但其实每个人，都能看到那么一些些微弱的光，好像是那个地方。只是有些人会选择努力跑着去，有些人怀疑自己是否真的看见了光，有些人，装作看不见。</p>
<p>之前和萱哥聊天，萱哥倒是很爽快，说不管去哪儿不想呆北京吸霾了，除非这次考上了北影。两年了啊，北影的梦还在。</p>
<p>你看你看，坚定的人都很坦然。</p>
<p>就像机器学习拿了满分的Mengyao，总和我说毕业找不到工作，打算去星巴克门口蹲着摆个碗。</p>
<p>所以有的时候，不知道自己要去哪儿其实也不可怕。</p>
<p>毕竟未来未知不可怕，已知才最可怕。</p>
<p>我算是想明白了，关于人生，我一直思考得太累了。这明明是一道无解题，就算我在某个时刻心满意足想明白了，也一定是幻觉。</p>
<p>没有答案的。所以不要思考了。</p>
<p>还不如痛痛快快活一次就好。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的排序问题]]></title>
      <url>http://yoursite.com/2017/01/08/Java%E4%B8%AD%E7%9A%84Sort/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>总结几种排序方法。
冒泡排序，选择排序，插入排序，Merge Sort（continue..）...</p>
<p><strong>Simple sorting</strong></p>
<h2 id="bubble-sort">Bubble Sort</h2>
<p>慢，但是简单。
<strong>Time complexity:    O(N^2)</strong></p>
<p><strong>步骤:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 每次只比较两个值。</div><div class="line">2. 如果左边的值大，就交换两个值。</div><div class="line">3. 移动大的值到右边。</div></pre></td></tr></table></figure></p>
<p><strong>举例:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">原数组: [4,7, 2, 5, 3]</div><div class="line">Round 1:</div><div class="line">  -&gt; [4,7,2,5,3]</div><div class="line">  -&gt; [4,2,7,5,3]</div><div class="line">  -&gt; [4,2,5,7,3]</div><div class="line">  -&gt; [4,2,5,3,7]</div><div class="line">Round 2:</div><div class="line">  -&gt; [2,4,5,3,7]</div><div class="line">  -&gt; [2,4,5,3,7]</div><div class="line">  -&gt; [2,4,3,5,7]</div><div class="line">Round 3:</div><div class="line">  -&gt; [2,4,3,5,7]</div><div class="line">  -&gt; [2,3,4,5,7]</div><div class="line">Round 4:</div><div class="line">  -&gt; [2,3,4,5,7]</div></pre></td></tr></table></figure></p>
<p><strong>Code:</strong></p>
<p>int[ ] data = {4, 7, 2, 5, 3}</p>
<p>Swap Method
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// a helper method that swaps two values in an int array</div><div class="line">private static void swap(int[] data, int one, int two) &#123;</div><div class="line">    int temp = data[one];</div><div class="line">    data[one] = data[two];</div><div class="line">    data[two] = temp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Bubble Sort:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public static void bubbleSort(int[] data) &#123;</div><div class="line">       // move backward from the last index</div><div class="line">       for (int out = data.length - 1; out &gt;= 1; out--) &#123;</div><div class="line">           // move forward from the beginning</div><div class="line">           // bubble up the largest value to the right</div><div class="line">           for (int in = 0; in &lt; out; in++) &#123;</div><div class="line">               if (data[in] &gt; data[in + 1]) &#123;</div><div class="line">                   swap(data, in, in + 1);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="selection-sort">Selection Sort</h2>
<p>比冒泡排序快但是依旧不够快。
<strong>Time complexity:    O(N^2)</strong>
比冒泡排序少了很多swap的过程，所以稍微快一些。</p>
<p><strong>步骤:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. 选出最小的值。</div><div class="line">2. 移动到最左边。</div></pre></td></tr></table></figure></p>
<p><strong>举例:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">原数组: [4,7, 2, 5, 3]</div><div class="line">Round1:</div><div class="line">  最小的是2：</div><div class="line">  [2,7,4,5,3]</div><div class="line">Round2:</div><div class="line">  最小的是3</div><div class="line">  [2,3,4,5,7]</div><div class="line">Round3:</div><div class="line">  最小的是4</div><div class="line">  [2,3,4,5,7]</div><div class="line">Round4:</div><div class="line">  最小的是5：</div><div class="line">  [2,3,4,5,7]</div></pre></td></tr></table></figure></p>
<p><strong>Code:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">for (int out = 0; out&lt;data.length; out++) &#123;</div><div class="line">  min = out;</div><div class="line">  for (int in = out+1; in &lt; data.length; in ++) &#123;</div><div class="line">    if (data[in] &lt; min) &#123;</div><div class="line">      min = in;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  if (out != min) &#123;</div><div class="line">    swap(data, out, min);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="insertion-sort">Insertion Sort:</h2>
<p>最直观的排序法。
<strong>Time complexity: O(N^2)</strong></p>
<p><strong>步骤:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">想象数组中有一个分割线。</div><div class="line">1. 左手边的是排好序的。</div><div class="line">2. 线的右边的第一个元素需要被插入到左边的相应位置中。</div></pre></td></tr></table></figure></p>
<p><strong>举例:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">原数组: [4,7, 2, 5, 3]</div><div class="line">-&gt; [4,|7,2,5,3]</div><div class="line">-&gt; [4,7,|2,5,3]</div><div class="line">-&gt; [2,4,7,|5,3]</div><div class="line">-&gt; [2,4,5,7,|3]</div><div class="line">-&gt; [2,3,4,5,7]</div></pre></td></tr></table></figure></p>
<p><strong>Code:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public static void insertionSort(int[] data) &#123;</div><div class="line">   // start from the 1st index till the last index</div><div class="line">  for (int out = 1; out&lt;data.length; out++) &#123;</div><div class="line">    int in = out;</div><div class="line">    int temp = data[out];</div><div class="line">    /*</div><div class="line">    * loop to check the sorted section going backward</div><div class="line">    * but not necessarily all the way to the 0th</div><div class="line">    * On average, look halfway through the sorted section</div><div class="line">    */</div><div class="line">    while (in&gt;0 &amp;&amp; data[in-1]&gt;=temp) &#123;</div><div class="line">      data[in] = data[in-1];</div><div class="line">      in --;</div><div class="line">    &#125;</div><div class="line">    if (out != in) &#123;</div><div class="line">      data[in] = temp;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 189.Rotate Array]]></title>
      <url>http://yoursite.com/2017/01/05/Leetcode-189-Rotate-Array/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>Rotate an array of n elements to the right by k steps.</p>
<p>For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].</p>
<p><strong>Note:</strong>
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</p>
<p><strong>Hint:</strong>
Could you do it in-place with O(1) extra space?</p>
<p><strong>Related problem:</strong>
Reverse Words in a String II</p>
<p><code>There are three solutions for this problem:</code></p>
<h4 id="solution-1">Solution 1:</h4>
<p>We can use temporary array to store k elements.</p>
<p>Time complexity: O(N)<br>
Space complexity: O(k), use extra space</p>
<p><strong>Code:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public void rotate(int[] nums, int k) &#123;</div><div class="line">    int n= nums.length;</div><div class="line">    k = k%n;</div><div class="line">    // store the k elements at the end of the array</div><div class="line">    int[] temp = new int[k];</div><div class="line">    System.arraycopy(nums, n-k, temp, 0, k);</div><div class="line">    // rotate the left elements to the end of the array</div><div class="line">    for(int i = n-k-1; i&gt;= 0;i--) &#123;</div><div class="line">        nums[i+k] = nums[i];</div><div class="line">    &#125;</div><div class="line">    // put temp elements to the top of the arrray</div><div class="line">    for(int i = 0; i&lt; k; i++) &#123;</div><div class="line">        nums[i] = temp[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The solution beat 98% in java submissions.</p>
<h4 id="solution2">Solution2:</h4>
<p>Reversal, for example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">first: [5,6,7] -&gt; [7,6,5]</div><div class="line">then: [1,2,3,4] -&gt; [4,3,2,1]</div><div class="line">the whole array: [1,2,3,4,5,6,7] -&gt; [4,3,2,1,7,6,5]</div><div class="line">reverse the whole array: [4,3,2,1,7,6,5] -&gt; [5,6,7,1,2,3,4]</div></pre></td></tr></table></figure></p>
<p>Time complexity:O(N)<br>
Space complexity:O(1)</p>
<p><strong>Code:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public void rotate(int[] nums, int k) &#123;</div><div class="line">    int n = nums.length;</div><div class="line">    k = k % n;</div><div class="line">    reverse(nums, n-k, n-1);</div><div class="line">    reverse(nums, 0, n-k-1);</div><div class="line">    reverse(nums, 0, n-1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void reverse(int[] nums, int start, int end) &#123;</div><div class="line">    while(start &lt; end) &#123;</div><div class="line">        int temp = nums[start];</div><div class="line">        nums[start] = nums[end];</div><div class="line">        nums[end] = temp;</div><div class="line">        start ++;</div><div class="line">        end --;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The solution beats 13.19% of java submissions.</p>
<h4 id="solution3">Solution3:</h4>
<p>Time complexity: O(N)<br>
Space complexity: O(1)</p>
<p>To rotate k steps once for an element. Set all elements to gcd groups.</p>
<p>E.g.
nums = [1 2 3 4 5 6], k=2</p>
<p>We use gcd (greatest common divisor) between n and k.<br>
gcd = 2</p>
<p>// count is the number we need swap each path<br>
count = nums.length / gcd - 1 = 2</p>
<p>1st iteration: starts from nums[i=0], keep rotate nums[i+k] until meet the start position</p>
<pre><code>   nums = [\_5 2 \_1 4 \_3 6]
</code></pre>
<p>2nd iteration: starts from nums[i=1]</p>
<pre><code>   nums = [5 \_6 1 \_2 3 \_4]
</code></pre>
<p><strong>Code:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public void rotate(int[] nums, int k) &#123;</div><div class="line">    int n = nums.length;</div><div class="line"></div><div class="line">    if (n &lt;= 1) &#123;</div><div class="line">        return ;</div><div class="line">    &#125;</div><div class="line">     k = k % n;</div><div class="line">    int g = gcd(k, n);</div><div class="line"></div><div class="line">    int position, count;</div><div class="line">    for(int i= 0; i&lt; g; i++) &#123;</div><div class="line">        position = i;</div><div class="line">        // count is the number we need swap each path</div><div class="line">        count = n/g - 1;</div><div class="line">        System.out.println(g);</div><div class="line">        System.out.println(count);</div><div class="line">        for (int j= 0; j&lt; count; j++) &#123;</div><div class="line">            position = (position + k) % nums.length;</div><div class="line">            int temp = nums[i];</div><div class="line">            nums[i] = nums[position];</div><div class="line">            nums[position] = temp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int gcd(int a, int b) &#123;</div><div class="line">    if (a == 0 || b == 0 )</div><div class="line">        return a + b;</div><div class="line">    else</div><div class="line">        return gcd(b, a % b);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>References:
http://yucoding.blogspot.com/2015/03/leetcode-question-rotate-array.html<br>
http://www.programcreek.com/2015/03/rotate-array-in-java/<br>
P.s. recommend the website:
http://www.programcreek.com</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode-[Combination]-Intersection of Arrays/Linked Lists]]></title>
      <url>http://yoursite.com/2017/01/03/Leetcode-Intersection-of-Two-Arrays/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>这篇是综合几道关于<code>Intersection of Arrays/Linked List</code> 的Leetcode题，分析一下问题及其变体，并给出几种解法。</p>
<h4 id="leetcode-349-intersection-of-two-arrays">LeetCode 349. Intersection of Two Arrays</h4>
<h5 id="question">Question:</h5>
<p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].</p>
<p>Note:</p>
<ul>
<li>Each element in the result must be unique.</li>
<li>The result can be in any order.</li>
</ul>
<h5 id="explanation">Explanation:</h5>
<p>题意是找到两个Array之间交叉的值，无重复。</p>
<ul>
<li>Solution 1:
<ul>
<li>Time Complexity: O( N^2 )</li>
<li>Iterate two arrays, add intersection elements to a HashSet. Using set here to avoid repetition.</li>
</ul>
</li>
</ul>
<ul>
<li>Solution 2: (<em>My Choice</em>)
<ul>
<li>Time Complexity: O(N)</li>
<li>Using two hashsets. The first hashset is to store all unduplicated elements in array1. Then add intersection between hashset1 and array2 to hashset2. It use more space but less time than solution 1.</li>
</ul>
</li>
</ul>
<ul>
<li>Solution 3:
<ul>
<li>Time Complexity: O(NlogN)</li>
<li>Using two pointers. Sort two arrays first.</li>
</ul>
</li>
</ul>
<h5 id="code">Code:</h5>
<ul>
<li>
<p>Solution1
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public int[] intersection(int[] nums1, int[] nums2) &#123;</div><div class="line">    Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</div><div class="line">    for (int i = 0; i &lt; nums1.length; i++) &#123;</div><div class="line">        for (int j = 0; j&lt;nums2.length; j++) &#123;</div><div class="line">            if (nums1[i] == nums2[j]) &#123;</div><div class="line">                set.add(nums1[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    int[] ints = new int[set.size()];</div><div class="line">    int i = 0;</div><div class="line">    for (Integer num : set)&#123;</div><div class="line">        ints[i++] = num;</div><div class="line">    &#125;</div><div class="line">    return ints;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Solution2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public int[] intersection(int[] nums1, int[] nums2) &#123;</div><div class="line">    Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</div><div class="line">    Set&lt;Integer&gt; intersection = new HashSet&lt;&gt;();</div><div class="line"></div><div class="line">    for (int i = 0; i &lt; nums1.length; i++) &#123;</div><div class="line">        set.add(nums1[i]);</div><div class="line">    &#125;</div><div class="line">    for (int j = 0; j &lt; nums2.length; j++) &#123;</div><div class="line">        if (set.contains(nums2[j])) &#123;</div><div class="line">            intersection.add(nums2[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    int[] ints = new int[intersection.size()];</div><div class="line">    int i = 0;</div><div class="line">    for (Integer num : intersection)&#123;</div><div class="line">        ints[i++] = num;</div><div class="line">    &#125;</div><div class="line">    return ints;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Solution3:
(Cite top solutions in Leetcode)
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int[] intersection(int[] nums1, int[] nums2) &#123;</div><div class="line">        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</div><div class="line">        Arrays.sort(nums1);</div><div class="line">        Arrays.sort(nums2);</div><div class="line">        int i = 0;</div><div class="line">        int j = 0;</div><div class="line">        while (i &lt; nums1.length &amp;&amp; j &lt; nums2.length) &#123;</div><div class="line">            if (nums1[i] &lt; nums2[j]) &#123;</div><div class="line">                i++;</div><div class="line">            &#125; else if (nums1[i] &gt; nums2[j]) &#123;</div><div class="line">                j++;</div><div class="line">            &#125; else &#123;</div><div class="line">                set.add(nums1[i]);</div><div class="line">                i++;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        int[] result = new int[set.size()];</div><div class="line">        int k = 0;</div><div class="line">        for (Integer num : set) &#123;</div><div class="line">            result[k++] = num;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
</ul>
<h4 id="leetcode-350-intersection-of-two-arrays-ii">LeetCode 350. Intersection of Two Arrays II</h4>
<h5 id="question">Question:</h5>
<p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:</p>
<p>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p>
<p>Note:</p>
<ul>
<li>Each element in the result should appear as many times as it shows in both arrays.</li>
<li>The result can be in any order.</li>
</ul>
<p>Follow up:</p>
<ul>
<li>What if the given array is already sorted? How would you optimize your algorithm?</li>
<li>What if nums1's size is small compared to nums2's size? Which algorithm is better?</li>
<li>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>
</ul>
<h5 id="explanation">Explanation:</h5>
<p>Here we need to solve the 3 follow up questions emphatically.</p>
<ul>
<li>
<p>Solution1: Sort &amp; Pointers</p>
<ul>
<li>Time Complexity: O(nlogn)</li>
<li>Space Complexity: O(m + n)</li>
<li>Sort two arrays first. Then use two pointers as the question 349.</li>
</ul>
</li>
<li>
<p>Solution2: HashMap</p>
<ul>
<li>Time Complexity: O(N)</li>
<li>Space Complexity: O(N)</li>
<li>Use one hashmap to store array1 elements and counters. Find intersection by iterate elements in array2.</li>
</ul>
</li>
<li>
<p>Importent Follow Up:</p>
<p><code>What if the given array is already sorted? How would you optimize your algorithm?</code></p>
<p>If it is sorted, we just need to use two pointers.</p>
<p><code>What if nums1's size is small compared to nums2's size? Which algorithm is better?</code></p>
<p>The hashmap solution is better.</p>
<p><code>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</code> (cite from top solution in Leetocode)</p>
<p>If only nums2 cannot fit in memory, put all elements of nums1 into a HashMap, read chunks of array that fit into the memory, and record the intersections.</p>
<p>If both nums1 and nums2 are so huge that neither fit into the memory, sort them individually (external sort), then read 2 elements from each array at a time in memory, record intersections.</p>
</li>
</ul>
<h5 id="code">Code:</h5>
<ul>
<li>
<p>Solution1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public int[] intersect(int[] nums1, int[] nums2) &#123;</div><div class="line">    Arrays.sort(nums1);</div><div class="line">    Arrays.sort(nums2);</div><div class="line">    int i = 0;</div><div class="line">    int j = 0;</div><div class="line">    // 在这里选择了与349不一样的解法是，先定义好array，之后再截取返回。而不是先用ArrayList. 速度更快了。</div><div class="line">    int[] result = new int[nums1.length &lt; nums2.length ? nums1.length : nums2.length];</div><div class="line"></div><div class="line">    int count = 0;</div><div class="line">    while (i &lt; nums1.length &amp;&amp; j&lt; nums2.length) &#123;</div><div class="line">        if (nums1[i] &lt; nums2[j]) &#123;</div><div class="line">            i++;</div><div class="line">        &#125; else if (nums1[i] == nums2[j]) &#123;</div><div class="line">            result[count++] = nums1[i];</div><div class="line">            i++;</div><div class="line">            j++;</div><div class="line">        &#125; else &#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return Arrays.copyOf(result, count);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Solution2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public int[] intersect(int[] nums1, int[] nums2) &#123;</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    int[] result = new int[nums1.length &lt; nums2.length ? nums1.length : nums2.length];</div><div class="line">    int count = 0;</div><div class="line">    for (Integer n : nums1) &#123;</div><div class="line">        if(map.containsKey(n)) &#123;</div><div class="line">            map.put(n, map.get(n)+1);</div><div class="line">        &#125; else &#123;</div><div class="line">            map.put(n, 1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for (Integer m : nums2) &#123;</div><div class="line">        if(map.containsKey(m) &amp;&amp; map.get(m) &gt; 0) &#123;</div><div class="line">            result[count++] = m;</div><div class="line">            map.put(m, map.get(m)-1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return Arrays.copyOf(result, count);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
</ul>
<h4 id="leetcode-160-intersection-of-two-linked-lists">LeetCode 160. Intersection of Two Linked Lists</h4>
<h5 id="question">Question:</h5>
<p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>
<p>For example, the following two linked lists:</p>
<pre><code>  A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗
  B:     b1 → b2 → b3
</code></pre>
<p>begin to intersect at node c1.</p>
<p>Notes:</p>
<ul>
<li>If the two linked lists have no intersection at all, return null.</li>
<li>The linked lists must retain their original structure after the function returns.</li>
<li>You may assume there are no cycles anywhere in the entire linked structure.</li>
<li>Your code should preferably run in O(n) time and use only O(1) memory.</li>
</ul>
<h5 id="explanation">Explanation:</h5>
<p>In order to use only O(1) memory and O(n) time, we can start from the same node (the head of shorter array) and get the intersection.</p>
<h5 id="code">Code:</h5>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;</div><div class="line">    if(headA == null || headB == null) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    int lengthA = length(headA);</div><div class="line">    int lengthB = length(headB);</div><div class="line">    while (lengthA &gt; lengthB) &#123;</div><div class="line">        headA = headA.next;</div><div class="line">        lengthA --;</div><div class="line">    &#125;</div><div class="line">    while(lengthB &gt; lengthA) &#123;</div><div class="line">        headB = headB.next;</div><div class="line">        lengthB --;</div><div class="line">    &#125;</div><div class="line">    ListNode intersection = null;</div><div class="line">    while(headA != headB ) &#123;</div><div class="line">        headA = headA.next;</div><div class="line">        headB = headB.next;</div><div class="line">    &#125;</div><div class="line">    intersection = headA;</div><div class="line">    return intersection;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public int length(ListNode head) &#123;</div><div class="line">    int result= 0;</div><div class="line">    while(head != null) &#123;</div><div class="line">        result ++;</div><div class="line">        head = head.next;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 396.Rotate Function]]></title>
      <url>http://yoursite.com/2016/12/30/leetcode-396/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>Question:</strong></p>
<p>Given an array of integers A and let n to be its length.</p>
<p>Assume Bk to be an array obtained by rotating the array A k positions clock-wise, we define a &quot;rotation function&quot; F on A as follow:</p>
<p>F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1].</p>
<p>Calculate the maximum value of F(0), F(1), ..., F(n-1).</p>
<p>Note:
n is guaranteed to be less than 105.</p>
<p>Example:
A = [4, 3, 2, 6]</p>
<pre><code>F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26

So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.
</code></pre>
<p><strong>Explanation:</strong>
OK,数学题Again。如果按照原题意解，会出现TLE的问题。</p>
<p>借用Top solution的思路分析下：</p>
<pre><code>F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]
F(k-1) = 0 * Bk-1[0] + 1 * Bk-1[1] + ... + (n-1) * Bk-1[n-1]
       = 0 * Bk[1] + 1 * Bk[2] + ... + (n-2) * Bk[n-1] + (n-1) * Bk[0]


 F(k) - F(k-1) = Bk[1] + Bk[2] + ... + Bk[n-1] + (1-n)Bk[0]
               = (Bk[0] + ... + Bk[n-1]) - nBk[0]
               = sum - nBk[0]
So:
F(k) = F(k-1) + sum - nBk[0]

What is Bk[0]?

k = 0; B[0] = A[0];
k = 1; B[0] = A[len-1];
k = 2; B[0] = A[len-2];
...
</code></pre>
<p><strong>Code</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def maxRotateFunction(self, A):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type A: List[int]</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        sumA = sum(A)</div><div class="line">        countA = 0</div><div class="line">        for index, value in enumerate(A):</div><div class="line">            countA += index * value</div><div class="line">        result = countA</div><div class="line">        for i in range(len(A)-1,0,-1):</div><div class="line">            countA = countA + sumA - len(A) * A[i]</div><div class="line">            result = max(countA, result)</div><div class="line">        return result</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 202. Happy Number]]></title>
      <url>http://yoursite.com/2016/12/30/leetcode-202/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>Question:</strong></p>
<p>Write an algorithm to determine if a number is &quot;happy&quot;.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p>Example: 19 is a happy number</p>
<p>12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1</p>
<p><strong>Explanation:</strong></p>
<p>又是一道数学题。如果就按照题意写算法的话非常麻烦，所以要从数学的角度先简化题目。
根据Top Solution的提示，如果要收敛到1，意味着如果出现了两次同样的值，则表示之后还会出现，会一直循环。如果这个值不是1的话，那这个数就不是happy number。
可是为什么不是happy number的数不可能不重复地进行下去呢？不是happy number的数一定会循环重复么？</p>
<p>我们可以假设，不是happy number的数会无限下去，但是所有的结果只可能在（2，N]中，这里N是一个有限实数。如果无限产生结果，那总有一个时间点会出现重复，也就是loop。</p>
<p>所以一旦出现了loop，我们就停止，去检测结果是不是1。</p>
<p><strong>Code:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def isHappy(self, n):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type n: int</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        numbers = set()</div><div class="line">        while n not in numbers:</div><div class="line">            numbers.add(n)</div><div class="line">            n = sum(int(i)**2 for i in str(n))</div><div class="line">        return n== 1</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 437. Path Sum III]]></title>
      <url>http://yoursite.com/2016/12/30/LeetCode-437-Path-Sum-III/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>Quesition</strong></p>
<p>You are given a binary tree in which each node contains an integer value.</p>
<p>Find the number of paths that sum to a given value.</p>
<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>
<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p>
<p>Example:</p>
<pre><code>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -&gt; 3
2.  5 -&gt; 2 -&gt; 1
3. -3 -&gt; 11
</code></pre>
<p><strong>Explanation:</strong></p>
<p>这道题给了二叉树和一个sum，找出所有子路径和为sum的路径。
直接用递归方法做，把每个点都当做父节点遍历，找到存在的路径，相加即可。
相关题目：</p>
<ul>
<li>Leetcode 64. Minimum Path Sum</li>
<li>Leetcode 112. Path Sum</li>
<li>Leetcode 113. Path Sum II</li>
</ul>
<p>之后再对这类题目进行总结。</p>
<p><strong>Code</strong>:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def pathSum(self, root, sum):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type root: TreeNode</div><div class="line">        :type sum: int</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line"></div><div class="line">        if not root:</div><div class="line">            return 0</div><div class="line">        return self.pathHelper(root, sum) + self.pathSum(root.left, sum) + self.pathSum(root.right, sum)</div><div class="line"></div><div class="line">    def pathHelper(self, root, sum):</div><div class="line">        result = 0</div><div class="line">        if not root:</div><div class="line">            return 0</div><div class="line">        if (sum == root.val):</div><div class="line">            result += 1</div><div class="line">        result += self.pathHelper(root.left, sum - root.val)</div><div class="line">        result += self.pathHelper(root.right, sum - root.val)</div><div class="line">        return result</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 401. Binary Watch]]></title>
      <url>http://yoursite.com/2016/12/29/LeetCode-401/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><a href="https://leetcode.com/problems/binary-watch/" target="_blank" rel="external"><strong>Question:</strong></a></p>
<p>A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).</p>
<p>Each LED represents a zero or one, with the least significant bit on the right.
For example, the above binary watch reads &quot;3:25&quot;.</p>
<p>Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p>
<p>Example:</p>
<pre><code>Input: n = 1
Return: [&quot;1:00&quot;, &quot;2:00&quot;, &quot;4:00&quot;, &quot;8:00&quot;, &quot;0:01&quot;, &quot;0:02&quot;, &quot;0:04&quot;, &quot;0:08&quot;, &quot;0:16&quot;, &quot;0:32&quot;]
</code></pre>
<p>Note:</p>
<ul>
<li>The order of output does not matter.</li>
<li>The hour must not contain a leading zero, for example &quot;01:00&quot; is not valid, it should be &quot;1:00&quot;.</li>
<li>The minute must be consist of two digits and may contain a leading zero, for example &quot;10:2&quot; is not valid, it should be &quot;10:02&quot;.</li>
</ul>
<p><strong>Explanation</strong></p>
<p>利用位运算将状态拆分为小时和分钟。
枚举小时h和分钟m，然后判断二进制1的个数是否等于num</p>
<p><strong>Code</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def readBinaryWatch(self, num):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type num: int</div><div class="line">        :rtype: List[str]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        result = []</div><div class="line">        for h in range(12):</div><div class="line">            for m in range(60):</div><div class="line">                if (bin(h) + bin(m)).count(&apos;1&apos;) == num:</div><div class="line">                    result.append(&apos;%d:%02d&apos; % (h, m))</div><div class="line">        return result</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[天冷该吃火锅]]></title>
      <url>http://yoursite.com/2016/11/22/e5-a4-a9-e5-86-b7-e8-af-a5-e5-90-83-e7-81-ab-e9-94-85/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><embed src="http://www.xiami.com/widget/12753884_1773763930/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"></p>
<p>晚上，翻到一篇写北京卤煮的文章。15年夏天在北京，一个姑娘带我去了一个南城的胡同里吃卤煮。买单的不是我，领餐的也不是我。</p>
<p>在吃完之前我都没太搞清楚到底卤煮里面的那些具体是什么。我在当时常聊的微信群里说我在吃卤煮的时候，我哥来了一句，Star，你居然敢吃卤煮啊？当然敢。</p>
<p>我有什么是不敢的。科科。</p>
<p>但是，被科普完卤煮的构成以后，正站在五道口农科院的那片稻田前的我，差点连同刚刚吃的吴裕泰抹茶冰淇淋一起吐出来。我感受到了作为一个南方人的极限。
现在想想，透过现象抛开心理因素，我承认那是好吃的。别忘了，要配北冰洋。</p>
<p>在外面，最脆弱的时候就是想吃而不可得。之前想吃肠粉的时候，乐文带我去了匹村唯一一家的早茶店，可惜不好吃。以前在澳洲，广东人到处都有，在小天使和囧囧两个潮汕人的带动下，我深深爱上了早茶。虾饺皇要有汁儿才好吃，蜜汁排骨要熟透，凤爪要粉烂且入味。吃得下呢，可以来一个榴莲酥，叉烧包。主食当然是干炒牛河或者鲜虾云吞面啦。可是这里连一家像样的早茶店都没有，和小天使一起感到忧伤。</p>
<p>最近天冷，雪忽然下起来，风就在我屋子的外面呼呼地刮，有朋友来家里吃火锅，窗外雪花斜着飘，屋里却热气腾腾的。梦瑶埋头寻找她的年糕。乐乐直呼太幸福了。爽爽吃得忘了她刚刚怎么也修不好的bug。这个时刻，满足变得很真实。满足的，是一盒牛肉，一盘海带结，一块豆腐皮，一袋鱼丸就能解决的欲望。</p>
<p>其实，在某种意义上，对食物的欲望反映着一个人的精神状态。特别羡慕还能对食物怀抱100%期待的人。那一定是热爱生活的人。像我，只有想做菜的时候，才会觉得自己是对生活抱有憧憬的。</p>
<p>状态非常差的时候，和草草讨论过，当经历着无法自愈的痛苦，食物这种无门槛、不需要高难度竞争就唾手可得的东西，是最低程度的治疗方式。但随着对痛苦的认知加深，对于自我调节的要求会越来越高，越来越变得难以满足。所以，“吃一顿大餐就好了”这种解压方式对我们并不适用。high点太高到，需要去蹦极，坐过山车，听live，喝酒才能好一些。因为在心里，知道我们的问题是食物所无法解决的，换言之，也许未来是会好的，会有短暂的快乐的，但我们，我们自身不会好了。就像Monica和Rachel说的，“That's food, not love.”。不过还好，最严重的时候，崩溃得不成人形，什么也干不了，也不至于没有对食物一点欲望都没有。</p>
<p>大三暑假，九四和我核对抑郁症症状，快到觉得我可以开始吃药的时候，“完全不想吃东西”这一条就打回了原形。看来没有抑郁症，还能笑着活下去。可能，食物是最后的底线了吧。</p>
<p>又想起当时带我去吃卤煮的姑娘，我其实已经忘了她的名字，只记得她的微信头像是《这个杀手不太冷》里娜塔莉波特曼拿枪的样子。我当时就在想啊，大多数人，20多岁的时候就死了，之后的日子不过是机械地重复之前的日子。但她还没有，她对胡同有热情，对美食有热情，对陌生人也有热情。真好。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的比较]]></title>
      <url>http://yoursite.com/2016/11/13/java-e4-b8-ad-e7-9a-84-e6-af-94-e8-be-83/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="equals-和compareto">equals, == 和compareTo</h3>
<ul>
<li>== 操作符并不涉及对象内容的比较。</li>
<li>equals 比较的是reference，也就是引用内容</li>
<li>compareTo():
在基本数据中，compareTo()是比较两个Character 对象；
在 Boolean中，是用boolean的实例于其它实例进行比较；
在String 中，则是按照字典顺序进行比较，返回的值是一个int 型。</li>
</ul>
<p>&lt;pre class=&quot;editor-colors lang-text&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span class=&quot;meta paragraph text&quot;&gt;&lt;span&gt;String a = &quot;abc&quot;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta paragraph text&quot;&gt;&lt;span&gt; String b = &quot;abc&quot;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;</p>
<pre><code>a == b: **true**
</code></pre>
<p>a.equals(b): <strong>true</strong></p>
<p>a.compareTo(b): ** 0**</p>
<p>&lt;pre class=&quot;editor-colors lang-text&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span class=&quot;meta paragraph text&quot;&gt;&lt;span&gt;String a = new String(&quot;abc&quot;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta paragraph text&quot;&gt;&lt;span&gt; String b = new String(&quot;abc&quot;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;</p>
<pre><code> a == b: **false**
</code></pre>
<p>这是因为，对于对象的比较是对对象引用的比较。a和b的内存地址不同，对象引用不同</p>
<p>a.equals(b): <strong>true</strong></p>
<p>a.compareTo(b): ** 0**</p>
<ul>
<li>在继承了Comparabale接口的类中，compareTo（）的应该与euqals（）一致，比如 x.equals(y) == true, 则
x.compareTo(y) == 0</li>
</ul>
<h3 id="关于equals和hashcode">关于equals和hashcode</h3>
<p>实际上，equals虽然说是表面比较是否一致，但是实际的原理是于hashcode（）方法有关的。
比如上例中的String的比较，是因为String重写了hashcode（）和equals（）
方法。</p>
<ul>
<li>
<p>如果x.equals(y)返回“true”，那么x和y的hashCode()必须相等。</p>
</li>
<li>
<p>如果x.equals(y)返回“false”，那么x和y的hashCode()有可能相等，也有可能不等。</p>
</li>
<li>
<p>任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning 复习（四）：概念学习]]></title>
      <url>http://yoursite.com/2016/10/19/machine-learning-e5-a4-8d-e4-b9-a0-ef-bc-88-e5-9b-9b-ef-bc-89-ef-bc-9a-e6-a6-82-e5-bf-b5-e5-ad-a6-e4-b9-a0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="概念学习concept-learning">概念学习（Concept Learning）</h3>
<p>概念学习是指从某个布尔函数的输入输出训练中推断出该布尔函数。</p>
<h5 id="例子">例子</h5>
<p>为了更好地理解概念学习，我们从机器学习经典教材《Machine learning》（Tom Mitchell著）中的经典例子来解释：
<img src="http://i.imgur.com/0SnpShX.png" alt=""></p>
<p>我们可以看到，属性EnjoySport表示最终是否运动，而这个任务的目标是根据sky，humidity等的属性来预测出EnjoySport的值。</p>
<ul>
<li>
<p>属性的取值可以为：</p>
<pre><code>*   ？：表示可以接受任意值
</code></pre>
<ul>
<li>明确指定属性值（如warm）</li>
<li>不允许任何值：<img src="http://i.imgur.com/Sy3EXiV.png" alt=""></li>
</ul>
</li>
</ul>
<p>所以对于EnjoySport这个任务：</p>
<ul>
<li>
<p>已知：</p>
<ul>
<li>
<p>实例集 X：可能的日子，每个日子都有如下属性描述：</p>
<pre><code>    *   Sky
</code></pre>
<ul>
<li>Temp</li>
<li>Humid</li>
<li>Wind</li>
<li>Water</li>
<li>Forecast</li>
</ul>
</li>
<li>
<p>假设集： H。每个假设集都有6个属性的任意取值。</p>
</li>
<li>
<p>目标概念c：EnjoySport： <img src="http://i.imgur.com/uGkb5OB.png" alt=""></p>
</li>
<li>
<p>训练实例 D： +/-的关于目标概念的例子：
<img src="http://i.imgur.com/nOw2ffI.png" alt=""></p>
</li>
<li>
<p>归纳学习假设： 如果一个假设能够在训练集样本中很好地逼近目标函数，就能在未见实例中很好地逼近目标函数。
<img src="http://i.imgur.com/vDaItGC.png" alt=""></p>
</li>
<li>
<p>Find-S 算法：</p>
</li>
<li>
<p>初始化H到最特别的那个假设</p>
</li>
<li>
<p>对于每一个训练实例X中的约束ai：</p>
<pre><code>    *   如果ai已经符合假设，什么也不做。
</code></pre>
<ul>
<li>
<p>否则，用一个更加general的约束来代替H中的ai</p>
</li>
<li>
<p>输出最终的假设 H
<img src="http://i.imgur.com/hMNrVw1.png" alt=""></p>
</li>
</ul>
</li>
<li>
<p>Find-S 算法仍然存在一些没有解决的问题：</p>
<pre><code>*   难以判断是否对概念进行了学习
</code></pre>
<ul>
<li>
<p>是否能处理不一致的训练数据：在实际中，训练数据常常出现错误。这种不一致可能会严重破坏Find-S算法，因为Find-S算法忽略了所有的反例。我们期待的算法至少要能检测出训练数据的不一致性，并能容忍这样的错误。</p>
</li>
<li>
<p>为什么要用特殊假设？如果有多个，此算法只能找到最特殊的那个。为什么我们不用最一般的假设呢，或者两者之间的假设。</p>
</li>
<li>
<p>如果有多个极大特殊假设？在其他一些假设空间（后面会讨论到）中，可能有多个极大特殊假设。</p>
</li>
<li>
<p>变形空间（Version Spaces):
所有和数据集以及假设表示对应的假设的集合。我们可以看到，在Find-S中，最终输出的假设可能只是H中与训练样例一致的多个假设之一。</p>
</li>
</ul>
</li>
<li>
<p>列表后消除算法（List-Then-Eliminate）：</p>
<pre><code>*   先把变形空间设置为所有假设的列表
</code></pre>
<ul>
<li>
<p>对于每一个样例，我们排除假设中和样例不符合的情况。</p>
</li>
<li>
<p>输出变形空间中的所有假设。</p>
</li>
<li>
<p>一般边界（General boundary）： 表示在H中与D相一致的极大一般成员的集合。</p>
</li>
</ul>
</li>
<li>
<p>特殊边界（Specific Boundary）：表示在H中与D相一致的极大特殊成员的集合。</p>
</li>
<li>
<p>所有的变形空间都在这两个边界之间：
<img src="http://i.imgur.com/n0uBYdt.png" alt=""></p>
</li>
</ul>
</li>
</ul>
<h3 id="回到enjoy-sport的例子">回到enjoy sport的例子</h3>
<p><img src="http://i.imgur.com/0SnpShX.png" alt="">
我们来梳理一下：</p>
<ul>
<li>输入空间： X={sky(cloudy/sunny/rainy),Temp=(warm/cold),Humid=(Normal/high),Wind=(Strong/weak),water=(warm/cool),forecast=(same/change)}
所以一共是 = 3_2_2_2_2*2 =96</li>
<li>概念空间（Concept Space）：
对于每一个输入，都有正例反例两种可能的概念。
所以概念空间为2^96</li>
<li>假设空间：把每种情况包含all这个选项，相乘=4_3_3_3_3*3+1=973.这里加的1表示的是全否的情况。</li>
</ul>
<h3 id="归纳偏置inductive-bias">归纳偏置(Inductive Bias)</h3>
<p>机器学习试图去建造一个可以学习的算法，用来预测某个目标的结果。要达到此目的，要给于学习算法一些训练样本，样本说明输入与输出之间的预期关系。然后假设学习器在预测中逼近正确的结果，其中包括在训练中未出现的样本。既然未知状况可以是任意的结果，若没有其它额外的假设，这任务就无法解决。这种关于目标函数的必要假设就称为归纳偏置（Mitchell, 1980; desJardins and Gordon, 1995）。</p>
<p>参考：
《机器学习》（Tom Mitchell）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning 复习（零）：机器学习基本介绍]]></title>
      <url>http://yoursite.com/2016/10/18/machine-learning-e5-a4-8d-e4-b9-a0-ef-bc-880-ef-bc-89-ef-bc-9a-e6-9c-ba-e5-99-a8-e5-ad-a6-e4-b9-a0-e5-9f-ba-e6-9c-ac-e4-bb-8b-e7-bb-8d/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>机器学习是基于数据的人工智能（1980s-现在），机器学习能够通过学习例子来完成任务。</p>
<h3 id="机器学习框架">机器学习框架</h3>
<ul>
<li>
<p>通常是成对出现（Input-Correct_Output）</p>
</li>
<li>
<p>机器学习的常见情况：</p>
<pre><code>*   **分类(Classification)**： 医疗诊断： 从一个输出指向一些分类；*   **回归（Regression）**：预测明天的天气：从一个输出到一个数字
</code></pre>
<ul>
<li><strong>逻辑回归（Logistic Regression）</strong>: 存活几率：从一个输出到一个可能性</li>
</ul>
</li>
</ul>
<h3 id="如何解决一个机器学习的问题">如何解决一个机器学习的问题</h3>
<ul>
<li>定义你的任务，考虑你的目标，比如是要决定是否允许贷款</li>
<li>考虑实际情况，比如你有多少数据，要花多少时间和努力</li>
<li>考虑输出的形式，是数字还是分类，是可能性还是一个计划</li>
<li>选择衡量表现的标准，比如损失函数或错误率</li>
<li>选择输入的形式</li>
<li>选择一系列的解决方法（假设空间）</li>
<li>选择或者设计一种学习算法</li>
</ul>
<p><img src="http://i.imgur.com/13KMImC.png" alt=""></p>
<h3 id="机器学习和统计的关系">机器学习和统计的关系</h3>
<p>从20世纪90年代中，人们开始慢慢了解统计和机器学习的关系。</p>
<ul>
<li>
<p>统计：</p>
<pre><code>*   数学的分支
</code></pre>
<ul>
<li>更多考虑是否正确</li>
<li>不太考虑计算的复杂性</li>
</ul>
</li>
<li>
<p>机器学习：</p>
<pre><code>*   信息技术或者人工智能的分支
</code></pre>
<ul>
<li>更看重是否能在实际中运用</li>
<li>不太考虑统计原理</li>
<li>如今，两者已经有效结合了，机器学习也常常称为“统计机器学习”。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning 复习（二）：信息论]]></title>
      <url>http://yoursite.com/2016/10/18/machine-learning-e5-a4-8d-e4-b9-a0-ef-bc-88-e4-ba-8c-ef-bc-89-ef-bc-9a-e4-bf-a1-e6-81-af-e8-ae-ba/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="informaiton">Informaiton</h3>
<ul>
<li>信息 ！= 知识</li>
<li>信息用来减少不确定性</li>
<li>当我们得知E事件发生，意味着我们得到了</li>
</ul>
<p><img src="http://i.imgur.com/d6puw09.png" alt=""></p>
<p>bits的信息。</p>
<pre><code>*   其中log的底数并不重要，我们假设为2.
*   这也可以认为这个表示了事件E的“惊喜”数量。
*   例如抛一枚硬币得到的信息是：![](http://i.imgur.com/xCAfm06.png)
*   抛一枚骰子得到的信息是：
</code></pre>
<p><img src="http://i.imgur.com/3qhzEa5.png" alt=""></p>
<ul>
<li>信息熵（Entropy）用来度量随机变量的不确定性<img src="http://i.imgur.com/vhNudZf.png" alt=""></li>
</ul>
<p><img src="http://i.imgur.com/hMmPF6t.png" alt=""></p>
<p>&lt;pre class=&quot;editor-colors lang-text&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta bullet-point star text&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span class=&quot;punctuation definition item text&quot;&gt;&lt;span&gt;<em>&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 代表的是观察S事件来源所能得到的平均信息量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta bullet-point star text&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span class=&quot;punctuation definition item text&quot;&gt;&lt;span&gt;</em>&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 代表的是观察一个特征所得到的平均“惊喜”量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta bullet-point star text&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span class=&quot;punctuation definition item text&quot;&gt;&lt;span&gt;<em>&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 在观察一个特征之前的不确定性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta bullet-point star text&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span class=&quot;punctuation definition item text&quot;&gt;&lt;span&gt;</em>&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 根据Shannon定律，当你用code来传递信息时，最低的limit是code的efficiency不能低于Entropy。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;</p>
<ul>
<li>
<p>信息熵的特性：</p>
<ul>
<li>不为负。</li>
<li>概率越大，自信息量越小</li>
<li>设K是系统内的信息总数，则
<img src="http://i.imgur.com/Dq8RQVR.png" alt="">当p=1/k,即事件概率相等时，系统S的熵最大。</li>
</ul>
</li>
<li>
<p>联合熵：</p>
<ul>
<li>
<p>通过举例来说明：
<img src="http://i.imgur.com/cJLL1eO.png" alt=""></p>
<pre><code>*   如图，H（T）= H（0.3，0.5，0.2）=1.48548
</code></pre>
</li>
</ul>
</li>
</ul>
<p>H(M)=H(0.6,0.4)=0.970951
H(T)+H(M)=2.456431
*   而联合熵则表示为：
<img src="http://i.imgur.com/fXwGoZd.png" alt=""></p>
<pre><code>    可以看出：
</code></pre>
<p><img src="http://i.imgur.com/bRTkMLK.png" alt="">
当X，Y在统计学上互相独立时，等号成立。</p>
<ul>
<li>
<p>条件熵（Conditional Entropy）;
P(T=t|M=m):
<img src="http://i.imgur.com/FGzAOEu.png" alt="">
<img src="http://i.imgur.com/yIkhyGa.png" alt=""></p>
<ul>
<li>
<p>平均条件熵：
<img src="http://i.imgur.com/CJsv6Xz.png" alt=""></p>
<pre><code>*   那么M（cold/mild/hot）能告诉我们多少关于T的信息呢？
</code></pre>
</li>
</ul>
</li>
</ul>
<p><img src="http://i.imgur.com/7Hgqpdo.png" alt=""></p>
<pre><code>    同理，我们也可以观察T能告诉我们多少和M有关的信息：
</code></pre>
<p><img src="http://i.imgur.com/xbxyZyg.png" alt=""></p>
<ul>
<li>
<p>平均互信息：
<img src="http://i.imgur.com/XqcI5yk.png" alt=""></p>
<ul>
<li>
<p>性质：</p>
<pre><code>    *   对称性：也就是说对于X和Y，平均互信息都是I（X；Y）
</code></pre>
<ul>
<li>不为负： 但是H(X) − H(X/y) 可能为负</li>
<li>如果X，Y是独立的，就是0</li>
<li>可相加的</li>
<li><img src="http://i.imgur.com/2L2g7mM.png" alt=""></li>
</ul>
</li>
</ul>
</li>
<li>
<p>对于三个信息源：
<img src="http://i.imgur.com/DMMhYMM.png" alt=""></p>
</li>
<li>
<p>马尔科夫链（Markov Source）:
马尔可夫链描述了一种状态序列，其每个状态值取决于前面有限个状态。马尔可夫链是具有马尔可夫性质的随机变量的一个数列。这些变量的范围，即它们所有可能取值的集合，被称为“状态空间”，而  的值则是在时间n的状态。如果<img src="http://i.imgur.com/kHK3e83.png" alt="">对于过去状态的条件概率分布仅是  的一个函数，则 <img src="http://i.imgur.com/xBCVgwp.png" alt=""></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning 复习 (一)：概率统计和线性回归]]></title>
      <url>http://yoursite.com/2016/10/17/machine-learning-e5-a4-8d-e4-b9-a0-e4-b8-80-ef-bc-9a-e6-a6-82-e7-8e-87-e7-bb-9f-e8-ae-a1-e5-92-8c-e7-ba-bf-e6-80-a7-e5-9b-9e-e5-bd-92/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>Machine Learning 总结</p>
<h3 id="probability-and-statistics">Probability and Statistics</h3>
<ul>
<li>
<p>常规变量（Regular variables）应该是数字或者是其他。相反，随机变量（Random Variables）是一系列值得分部。 比如，扔一枚硬币是随机变量X的如下分布，‘Head’可能性为0.5，‘Tail’可能性为0.5.</p>
</li>
<li>
<p>一般我们用大写字母表示随机变量，用小写字母表示随机变量取的值。
<img src="http://i.imgur.com/pDKvACY.png" alt=""></p>
</li>
<li>
<p>链式法则：
<img src="http://i.imgur.com/4mhM7ZX.png" alt=""></p>
</li>
<li>
<p>独立事件：
<img src="http://i.imgur.com/OW5IlLd.png" alt=""></p>
</li>
<li>
<p>数学期望E：
<img src="http://i.imgur.com/cnOMht3.png" alt=""></p>
<ul>
<li>
<p>性质：</p>
<pre><code>*   线性表达：
</code></pre>
</li>
</ul>
</li>
</ul>
<p><img src="http://i.imgur.com/umYck9X.png" alt="">
*   在不假定任何X和Y的关系条件下：
<img src="http://i.imgur.com/oIUCHhI.png" alt=""></p>
<ul>
<li>方差：</li>
</ul>
<p>Var[X] = E[(X − E[X])2]
<img src="http://i.imgur.com/nMY4vIP.png" alt=""></p>
<ul>
<li>
<p>标准差：
<img src="http://i.imgur.com/eDUZuou.png" alt=""></p>
</li>
<li>
<p>X,Y的协方差：
<img src="http://i.imgur.com/H8fkuCv.png" alt=""></p>
</li>
<li>
<p>方差，标准差，协方差的一些性质：
<img src="http://i.imgur.com/K1fjJc8.png" alt=""></p>
</li>
<li>
<p>总方差定律（The law of total variance）:
<img src="http://i.imgur.com/kEzg3MB.png" alt=""></p>
</li>
<li>
<p>线性相关（通常被简称为 相关）：</p>
<ul>
<li>
<p>属于[-1，1]
<img src="http://i.imgur.com/5DyzoXH.png" alt=""></p>
</li>
<li>
<p>相关性在变量的移动和范围变化中常常是保持不变的
<img src="http://i.imgur.com/CNoMJ92.png" alt=""></p>
<ul>
<li>如果X，Y互相独立，那么线性相关性为0，但是反之不可以。即X，Y可能线性不相关，但是依旧不是独立的。
所以结论只能是：
独立 -&gt; 线性不相关，反之不可。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="correlation-vs-mutual-information">Correlation vs. Mutual Information</h3>
<ul>
<li>
<p>Mutual Information 的定义（可参见另一篇博客【现在没有哈哈】：Machine Learning信息论复习）：</p>
</li>
<li>
<p>线性相关性需要x，y的值都是数字，所以两者之间存在距离概念---度量空间（metric space）。</p>
<ul>
<li>
<p>度量空间，可以用来衡量线性相关的程度和紧密度（tightness）。</p>
<ul>
<li>对于binary的随机变量，认为变量拥有两个数值，0和1。范围也是[-1，1]。大多数情况下，我们更加在意相关的强度，而非反向性（polarity）。所以我们会观察<img src="http://i.imgur.com/snCouQg.png" alt=""> 的情况，其范围为[0,1]</li>
</ul>
</li>
</ul>
</li>
<li>
<p>相反，Mutual Information 不需要度量空间。
<img src="http://i.imgur.com/Nzz5md8.png" alt=""></p>
</li>
<li>
<p>Mutual Information I（X;Y）很大但是相关性为0的例子:</p>
<ul>
<li>
<p>一个完美的多边形，顶点的线性相关性永远为0，但是当定点个数趋向无穷，I（X；Y）也会趋向无穷。</p>
<pre><code>    *   最小的例子：等边三角形
</code></pre>
<ul>
<li>来思考一个分布均匀的正方形，当你旋转它的时候，相关性不变，但是I会随着旋转而变化。当旋转到和轴平行时，I减小了。
<img src="http://i.imgur.com/0VfYmLq.png" alt=""></li>
</ul>
</li>
</ul>
</li>
<li>
<p>Mutual Information 为0但是相关性不为0的例子：</p>
<ul>
<li>没有。因为I（X；Y）=0 意味着X，Y是独立的，所以相关性一定为0。</li>
</ul>
</li>
</ul>
<h3 id="linear-learning-in-one-dimensionsimple-linear-regression">Linear Learning in One Dimension(Simple Linear Regression)</h3>
<ul>
<li>我们在这里考虑的是一种Mapping X-&gt;Y.X作为输入会给出，我们更倾向于了解P（y|x）而不是P（x，y）。简单来说，我们想知道在给定x的情况下y的期望值。即，E[Y|X=x]，更简单来说，我们假设X和E[Y]符合一种线性关系：
<img src="http://i.imgur.com/FtpiBMl.png" alt="">
或者说是：
<img src="http://i.imgur.com/79iWQIz.png" alt=""></li>
<li>β是斜率，α是截距，ε是零均值分布。（好了好了这个中学就学过了。）</li>
<li>对于给定的斜率和截距，我们可以得到一条线，然后计算一下误差。
<img src="http://i.imgur.com/cHM6aMP.png" alt="">
实际上，这种误差并不代表错误，只是预测值和真实值之间的差距.</li>
<li>一种找到这些参数的方法是最小化残差平方， 这里假设误差是Guassion（也就是正态分布）的。
<img src="http://i.imgur.com/ElJtZHe.png" alt="">
有一种相近解法：
<img src="http://i.imgur.com/MlB77DE.png" alt=""></li>
</ul>
<h3 id="linear-learning-in-multiple-dimensions">Linear Learning in Multiple Dimensions</h3>
<ul>
<li>如果X不止一个比如：
<img src="http://i.imgur.com/vHnaG1o.png" alt=""></li>
<li>我们同样可以假设线性关系：
<img src="http://i.imgur.com/ppDgVx1.png" alt=""></li>
<li>为了简化符号，我们可以假设β0=α，同时x0=1。就得到了如下模型：
<img src="http://i.imgur.com/LOlkLBu.png" alt=""></li>
<li>我们可以把数据集用矩阵表示
<img src="http://i.imgur.com/gx7nN0Q.png" alt=""></li>
<li>留存可以计算为：
<img src="http://i.imgur.com/07n1cTT.png" alt=""></li>
<li>和上面的一样，我们同样需要计算出最小化残差平方：
<img src="http://i.imgur.com/8r1EA7v.png" alt="">
或者一种近似解法：
<img src="http://i.imgur.com/ojQx65w.png" alt=""></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 172.Factorial Trailing Zeroes]]></title>
      <url>http://yoursite.com/2016/10/15/leetcode-172-easyfactorial-trailing-zeroes/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>Question:</p>
</blockquote>
<blockquote>
<p>Given an integer n, return the number of trailing zeroes in n!.</p>
</blockquote>
<p>题意是求n的阶乘后面0的个数。</p>
<h3 id="basic-solution">Basic Solution</h3>
<p>直接硬求n!的结果,再计算末尾0的个数，如果n过大，结果会溢出。</p>
<p>** Better Solution **</p>
<p><code>Complexity</code> : O(lgn)</p>
<p>后缀为0的都是2和5相乘得到的，只需要计算2和5的个数。</p>
<p>但是例如：</p>
<p>n = 5! = 1 * 2 * 2 * 2 * 3 * 5 有3个2，1个5
n = 7! = 1 * 2 * 3 * 2 * 2 * 5 * 2 * 3 * 7 有4个2，1个5</p>
<p>可以看出，2会远远比5多，我们只需要计算有5的个数就可以了。但是要注意：</p>
<p>n = 25! 不止2个5，而是3个5，因为25 = 5 * 5</p>
<p>所以  result = n/5 + n/25 + n/125....</p>
<p>Python Solution:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">   def trailingZeroes(self, n):</div><div class="line">       num, x = 0, 5</div><div class="line">       while n &amp;gt;= x:</div><div class="line">              num += n/x</div><div class="line">              x *= 5</div><div class="line">      return num</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[听李宗盛]]></title>
      <url>http://yoursite.com/2016/09/23/e5-90-ac-e6-9d-8e-e5-ae-97-e7-9b-9b/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><embed src="http://www.xiami.com/widget/12753884_1772001102/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"></p>
<p>夜里从灯火通明的学校回到家，虾米随机放了一首歌。 居然是李宗盛版的《阴天》。</p>
<p>我一下想到了我哥，一个长期只听李宗盛和民谣的男人。大多数的时候，我会忘记他只比我大一岁，他讲起道理，总是让我不得不服。</p>
<p>印象里，一起奋斗的日子里，他总是窝在沙发里，Mac就公放李宗盛。我一个本来没听过李宗盛的人，最后连《山丘》的歌词都倒背如流了。</p>
<p>每句话，都像过完了一生。</p>
<p>之后，有睡不着的时候，会把这首歌拿出来听。</p>
<p>金玟岐翻唱过，太粉饰，或者说太年轻，很不喜。</p>
<p>虽然我是绝对不相信所谓“太年轻了，不能如何如何如何”这样的说辞的，那更像是一种故作老成倚老卖老的姿态。</p>
<p>但是这首歌，但是李宗盛，就像是沉淀了很久的好酒。你很怕一打开，无法抵御扑面而来的岁月感，年轻是真的会醉的。</p>
<p>听李宗盛和梁静茹的合唱，声线都是被拉长了的，背后的东西太多。说也说不完的感觉。梁静茹翻唱过李宗盛的《问》，《梦醒时分》，《明明白白我的心》，有她自己的味道，真实。</p>
<p>有段时间单循听李宗盛的《漂洋过海来看你》的时候，常坐在地毯上，常觉得柔软而被眷顾，觉得心安。</p>
<p>其实，听歌这种事情，不带感情地听，不认真。带感情地听，又太累。</p>
<p>只能适量。摇滚，流行，古典，都要适量，才能冷静地保持自己的平衡。</p>
<p>听李宗盛，更要适量。不然一不小心，听多了或许就看淡人生了。</p>
<p>要真看淡人生，很难保持对生活有热情的那种英雄主义了。</p>
<p>所以，如今，在这个需要被激励的年龄里，我想，等到有一天觉得累了，觉得走不下去了，需要更随意的态度的时候，我再来听听李宗盛吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python remove误区]]></title>
      <url>http://yoursite.com/2016/09/19/python-remove-e8-af-af-e5-8c-ba/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>在list里面边查找边remove，会出错。 因为这个原因Debug了一个早上真是哭瞎。</p>
<p>原来是：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for h in total_h:</div><div class="line">    if attr_value_list not in h:</div><div class="line">       total_h.remove(h)</div></pre></td></tr></table></figure></p>
<p>但结果始终错误，跑不出分。</p>
<p>调用remove后，index改变了。</p>
<p>所以改成了如下，先把要remove的存在新的list里面，再遍历list去掉。</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for h in total_h:</div><div class="line">    new_h = []</div><div class="line">    if attr_value_list not in h:</div><div class="line">       for x in h:</div><div class="line">           new_h.append(x)</div><div class="line">       remove_list.append(new_h)</div><div class="line">for r in remove_list:</div><div class="line">    total_h.remove(r)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[明天一切好说]]></title>
      <url>http://yoursite.com/2016/08/27/e6-98-8e-e5-a4-a9-e4-b8-80-e5-88-87-e5-a5-bd-e8-af-b4/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p> </p>
<p>      落地灯温和地亮着，收拾好卧室，摆好衣架，厨房餐具摆好，才终于有时间坐在自己拼的沙发上和室友讲几句话。</p>
<p>      来了一周多一些，几乎都在疲于应付一个安身立命的地方。想来，被海关关过小黑屋，被房屋manager吼过，被不靠谱的管理人员放鸽子，被计划中的室友坑得措手不及。</p>
<p>      刚到匹兹堡，第三次跑到自己四月份就租下来的公寓却还是拿不到钥匙的时候，一个人，在公交站台，差点就哭出来。</p>
<p>       后来也没有哭，心里觉得不值得，自己提前定了合约，打过电话，没有任何过错，为什么是我要哭。有问题就解决问题好了，不给我我就一直打电话，一直来，耗下去。这么想着，眼泪还是打了个转。眼前是教堂，对面是银行，来往的车辆里还有特斯拉。真不敢相信，这里是美国啊。</p>
<p>       终于拿到了钥匙，激动得去中餐馆吃了一碗牛肉面，和一起的姑娘说起晚上想去接yuki，她说你自己都没照顾好，还管别人。哇地一下，心里感觉被刺到了。</p>
<p>        记得大四的时候，舍友都不在，宿舍黑了，我才发现四年我从来没去充过一次电。后来去澳洲，室友是个事无巨细都会照顾周全的强迫症姑娘，我几乎也没有操过什么心。“生活从来都是不容易的，如果你觉得容易，只是有人替你承担了而已。”</p>
<p>        以前觉得自己从来也都是独当一面的。</p>
<p>        所以，尝试客气地给房屋管理连发邮件，有事儿没事儿去楼下办公室看manager在不在，去银行解决账户被冻结的问题，从li姐姐家里拖床回家，找人开小货车运送家具。</p>
<p>        既然要结果，就要好好处理问题。</p>
<p>        今天，manager迅速帮我换了坏掉的门锁，我刚说冰箱坏了下午就给我换了新的，还开始和我开玩笑，我虽然听不懂他说的是什么笑话，但能感觉他的态度好了很多。交了学费，也找到了新室友，终于有了一个成型的窝。</p>
<p>        和梦瑶说，俩人住也挺好，要不是房租太贵，真想就这么待着，有个采光好的大客厅我就是基本不在家也会觉得开心的。</p>
<p>         她说，你想啊。</p>
<p>         翻白眼。</p>
<p>         这姑娘来了以后，也没少走路，可是有她一起，我反倒比之前好过了很多。好像，一切都是可以解决的。</p>
<p>         这一周来，奔波来去之外的期待竟是坐下好好做题，好好读书，没人打扰。原来安静也可以这么奢侈。</p>
<p>          想来，之后的日子，负担重，压力大，恐怕在所难免。可是啊，既然选择来到了这里，也许就不计较这些了。</p>
<pre><code>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 明天一切好说。晚安。
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016-08-02]]></title>
      <url>http://yoursite.com/2016/08/02/2016-08-02/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>今天坐在窗台的位置，看着蓝天白云发了会儿呆。</p>
<p>还有三天就要离开上海了。在每一个写过文字的地方都会说，上海啊，我真喜欢这座城。</p>
<p>也许去过很多地方，也许将要去很多地方，也许看过很多风景，也许将要看很多风景，但我不会忘记在我还年轻的时候，上海所给予我的一切。</p>
<p>这里是让我心安的地方。对一个人来说，这样的地方不会很多的。</p>
<p>想起在澳洲的时候总会看星空，第一次住进大房子的时候，坐在阳台上看了好久，也不说话，也不想有人在旁边。就想这么看着，后来太冷了进了屋，坐在地毯上，脑子里还是星空。</p>
<p>寒假的时候被拉去Road Trip，住进一个旁边什么也没有的小木屋，躺在床上就能看到天空。可是我一上床就睡着了，醒来的时候凌晨四点，错过了三点二十的双子座流星雨。</p>
<p>可那一刻，一点也不觉得可惜。</p>
<p>那个时候，心里也是想着这四个字，来日方长。星空一直在啊。不用怕。</p>
<p>高中的时候，顾草草第一次在本子上写给我这句话，来日方长。细瘦的字体特别好看。但就是这种字体，她和我冷战、闹矛盾，一个学期没有讲话的时候，也是用这种字体给我写了小纸条来和好。</p>
<p>那时候真是年轻，现在谁还有精力纠缠这么久。</p>
<p>可是来日方长，到后来其实就是我和我最好的朋友一年才见一面，一面才几个小时，一杯咖啡或者一顿饭。在机场这样匆忙的地方。</p>
<p>所以听上去来日方长真是麻木自己的说辞。</p>
<p>就像那天楠楠和我讨论的那样，这个世界上，很多人把痛苦当磨炼，把平凡当幸福，在某种意义上给自己找到借口，找到心安理得继续活下去的借口。我想，其实是无法分辨痛苦和真正的愉悦，习惯了顺应了痛苦，反而忘记了如何规避痛苦。但规避痛苦，很难，大多数时候，人的惯性会用经验代替感知，无论是自己的还是别人的。</p>
<p>可我还是认为，自己的感受非常重要，非常重要。哪怕找不到路。哪怕回不到原点。也要忠于自我。</p>
<p>晚安。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[温度]]></title>
      <url>http://yoursite.com/2016/07/30/e6-b8-a9-e5-ba-a6/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p> </p>
<p>在出门需要勇气的日子里，看了两部港片。</p>
<p>很久没看港片了，一直很喜欢，虽然对王家卫无感，但很多港片自带弹幕效果，语速快，节奏快，情节紧凑，随便挑一部不至于像大陆很多言之无物的片子一样让人有浪费时间的感叹。</p>
<p>聊聊《六楼后座》，林嘉欣卢巧音在里面实在太美太甜，背心牛仔裤的21世纪初的流行打扮干净利落。六个人最爱玩的“Truth or Dare”，其实也就是真心话大冒险吧。你选择诚实，或者大胆。年轻的状态非常明显，想哭的时候不忍着，想闹的时候就闹，不爽也不憋着，挣扎就是挣扎。</p>
<p>最后一段话，说青春就是方糖。我是不喜“青春“”这个词语的，被俗人用烂了。</p>
<p>但那段话里面有几句话，很有意思：</p>
<blockquote>
<p>这种甜蜜是要亲身用舌尖的热量</p>
<p>才能融化，才能品尝</p>
<p>你总不能隔岸观火</p>
<p>人生总会有这么的一个阶段</p>
<p>一个做什么也快乐的阶段</p>
<p>一个说什么也真诚的阶段</p>
<p>他们可笑也可爱</p>
<p>笑他们</p>
<p>皆因我们曾经荒唐过</p>
<p>爱他们</p>
<p>因为我们也曾经甜蜜过</p>
</blockquote>
<p> </p>
<p>不能隔岸观火。总要自己去融化。我会想起Lewen之前和我说，她说，总觉得这么久了，自己像是自己生命的旁观者。</p>
<p>有的时候我仿佛又这样的体会，没有足够投入地活，靠着惯性而不是动力。</p>
<p>这三个月，在上海，快乐的时候很纯粹，也发现这一年过去，让我真的不在意别人的看法了。但这样的活法，反而让我觉得自己和身边的人都更加自在。</p>
<p>交了很多朋友，每一个都值得。只是，有些话没说，不知道会不会遗憾。</p>
<p> </p>
<pre><code>&amp;nbsp;
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Emacs: 从无法入门到放弃]]></title>
      <url>http://yoursite.com/2016/07/27/e4-bd-bf-e7-94-a8emacs-e4-bb-8e-e6-97-a0-e6-b3-95-e5-85-a5-e9-97-a8-e5-88-b0-e6-94-be-e5-bc-83/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p> </p>
<p>被安利使用Emacs来进行文件编辑和管理，打开baidu首页显示的文章是<code>《如何一年成为Emacs大神》</code></p>
<p>一年。</p>
<p>一年。</p>
<p>一年。</p>
<p>（生无可恋）</p>
<p>果然是&quot;神的编辑器&quot;。</p>
<p>不过鉴于一切都要从入门到放弃，我决定尝试一下。</p>
<p>基本操作：</p>
<p>1.打开文件夹： <code>C+x d</code></p>
<p>2.文件目录上一级/下一级： <code>C+x &amp;gt;</code> <code>C+x &amp;lt;</code></p>
<p>3.新建文件（若存在则打开）： <code>C+x C+f</code></p>
<p>4.剪切内容： <code>C+space</code> 开始Mark <code>M+w</code> 复制</p>
<p>5.保存文件： <code>C+x C+s</code></p>
<p>这几步是最基本的了，之后慢慢熟练，慢慢更新。</p>
<pre><code>&amp;nbsp;
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How to use Markdown as a starter]]></title>
      <url>http://yoursite.com/2016/07/26/how-to-use-markdown-as-a-starter/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot;&gt;
&lt;style type=&quot;text/css&quot;&gt;
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote {
margin: 0;
padding: 0;
}
body {
font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif;
font-size: 13px;
line-height: 18px;
color: #737373;
background-color: white;
margin: 10px 13px 10px 13px;
}
table {
	margin: 10px 0 15px 0;
	border-collapse: collapse;
}
td,th {
	border: 1px solid #ddd;
	padding: 3px 10px;
}
th {
	padding: 5px 10px;
}</p>
<p>a {
color: #0069d6;
}
a:hover {
color: #0050a3;
text-decoration: none;
}
a img {
border: none;
}
p {
margin-bottom: 9px;
}
h1,
h2,
h3,
h4,
h5,
h6 {
color: #404040;
line-height: 36px;
}
h1 {
margin-bottom: 18px;
font-size: 30px;
}
h2 {
font-size: 24px;
}
h3 {
font-size: 18px;
}
h4 {
font-size: 16px;
}
h5 {
font-size: 14px;
}
h6 {
font-size: 13px;
}
hr {
margin: 0 0 19px;
border: 0;
border-bottom: 1px solid #ccc;
}
blockquote {
padding: 13px 13px 21px 15px;
margin-bottom: 18px;
font-family:georgia,serif;
font-style: italic;
}
blockquote:before {
content:&quot;\201C&quot;;
font-size:40px;
margin-left:-10px;
font-family:georgia,serif;
color:#eee;
}
blockquote p {
font-size: 14px;
font-weight: 300;
line-height: 18px;
margin-bottom: 0;
font-style: italic;
}
code, pre {
font-family: Monaco, Andale Mono, Courier New, monospace;
}
code {
background-color: #fee9cc;
color: rgba(0, 0, 0, 0.75);
padding: 1px 3px;
font-size: 12px;
-webkit-border-radius: 3px;
-moz-border-radius: 3px;
border-radius: 3px;
}
pre {
display: block;
padding: 14px;
margin: 0 0 18px;
line-height: 16px;
font-size: 11px;
border: 1px solid #d9d9d9;
white-space: pre-wrap;
word-wrap: break-word;
}
pre code {
background-color: #fff;
color:#737373;
font-size: 11px;
padding: 0;
}
sup {
font-size: 0.83em;
vertical-align: super;
line-height: 0;
}</p>
<ul>
<li>
<p>{
-webkit-print-color-adjust: exact;
}
@media screen and (min-width: 914px) {
body {
width: 854px;
margin:10px auto;
}
}
@media print {
body,code,pre code,h1,h2,h3,h4,h5,h6 {
	color: black;
}
table, pre {
	page-break-inside: avoid;
}
}&lt;/style&gt;
&lt;title&gt;
&lt;/title&gt;</p>
<p> </p>
<p>Recently, I am desired to write wordpress for do some summarization. But the format and writing style keep confusing me.</p>
</li>
</ul>
<h1 id=""></h1>
<pre><code>Let&amp;#39;s try Markdown this time!

There are two ways to apply Markdown in wordpress:
</code></pre>
<h4 id=""></h4>
<pre><code>1\. Install plugins:

The recommended plugin is [Markdown for WordPress and bbPress](https://wordpress.org/plugins/markdown-for-wordpress-and-bbpress/) But it doesn&amp;#39;t work on my wordpress. Sad.
</code></pre>
<h4 id=""></h4>
<pre><code>2\. Using Markdown Tools&amp;nbsp;

You can write the article in advace using softwares before paste it to the blog.

I prefer this way since using Wordpress to write is a huge disaster.
</code></pre>
<h6 id=""></h6>
<pre><code>Step 1: Know about the grammar of Markdown :

[CMD Markdown](https://www.zybuluo.com/mdeditor) is really a good tutorial. Or any other tutorials, whatever.
</code></pre>
<h6 id=""></h6>
<pre><code>Step 2: Download a good Markdown Tool :

It&amp;#39;s very convenience for us to write and review at the same time.&amp;nbsp;

So, you can download [Mou](http://25.io/mou/) if&amp;nbsp;you use Mac.
</code></pre>
<h6 id=""></h6>
<pre><code>Step 3: Keep practising to be perfect :

As you can see, this article is written in Markdown.

**_Cheers!_**

&amp;nbsp;

&amp;nbsp;

&amp;nbsp;
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016-07-21]]></title>
      <url>http://yoursite.com/2016/07/21/2016-07-21/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>一、</p>
<pre><code>我活得越来越坦然的一个信号就是，我能勇敢地和别人安利自己的公众号了。

关于这个公众号，里面的文章带着情绪的成分很多。而我的习惯是，在现实生活中面对面讲话好好相处，这样才是真实的，而不是虚无地毫无基础地通过表情和文字来传达彼此的心理。网络更应该是，让亲密关系更方便，不该是让陌生的人变成熟人，这是不可能。即使有可能，也是脆弱的，不堪一击的。

同时，在很长一段时间里，我也很不愿让别人完全看透我的内心，这让我恐惧和不知所措。但是，现在，成熟地看我依旧不想让别人完全看透，但是我觉得我也不必要隐藏自己本来的一面。我确实想法很多，小心思很多，我相信这不会让人因此而放弃爱我或者疏远我，远离我。

文字还是要写的，而且要写好，要好好写，要认真踏实地，言之有物地写。甚至写出不一样的感觉来。

二、

昨天见了小刘海，一个高高的姑娘，做花艺，话唠，拉拉，可爱。我不是贴标签哦，当我无法完整地写出一个人的时候，我更倾向于记录一些特征。大学的时候，我就像海绵吸水一样，迫不及待地见识各种各样的人，让各种世界观冲击我，迫不及待拓展自己对世界认知的边界。

后来，我慢慢锻炼到能够自己熟练选择想要交的朋友，想要靠近的人，想要谈话的对象。某种意义上来说，时间成本在一方面的减少意味着投入到另一个领域，大概曾经的我确实空虚吧。

小刘海给我了一只花，我养在了水杯里，可惜今天回来的时候已经有点枯萎了。可以做成干花。

三、

为了避免这个博客变成流水账博客。我就停笔，不写了。

今天的BGM是王菲《矜持》。Nighty
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开篇：打碎浅薄和矫情]]></title>
      <url>http://yoursite.com/2016/07/21/e5-bc-80-e7-af-87-ef-bc-9a-e6-89-93-e7-a2-8e-e6-b5-85-e8-96-84-e5-92-8c-e7-9f-ab-e6-83-85/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>所谓开篇，是这个博客的开篇。</p>
<p>我写字的历史很长，换了很多平台。先行总结，字数不算惊人，但也不算少了。</p>
<p>大致如下：</p>
<hr>
<p>2006- 2013年： <a href="http://user.qzone.qq.com/576070839/main" target="_blank" rel="external">QQ空间</a>，107篇日志，其中100篇左右是原创，平均每篇字数达到1000字。</p>
<p>2013- 至今：简书，58篇文章（含公开和不公开），共计43898字。</p>
<p>公众号：看不见的城市（微信搜索公众号：alohomoracity）也在不断更新原创长文+短文中。</p>
<hr>
<p>可惜，认真看来，这些地方记录的更多是细小的生活，个人情感倾向很重，不得不说，在记录的过程中，我对事物会变得更情绪化，在不断强化自己的感受的同时，有梳理平静的好处，但也确实在某种程度上会造成我情感导向的性格。</p>
<p>这一点，从简书后段的记录中尤其明显。在Adelaide的时候，世界很小，又刚从一个情深义重的Team中脱离出来，总没法把自负、矫情客观看待，加上Projects多，与身边的人相处关系简单又复杂，易怒易崩溃，也易喜易满足。</p>
<p>但由衷地，感谢经历过的日子，每次情绪的来临或离开，都让我对这个世界多了解一分。</p>
<p>冷静与冷漠本就不是我的作风，不过是波澜不惊了而已。</p>
<p>可慢慢地，在与数据、代码打交道的时光里，在和程序员越走越近，越聊越多的时光里，在无法从IT这个一颗赛特的行业里脱离出来的时光里，想要把自己塑造成一个逻辑能力卓越，思维敏捷，判断力一流的姑娘。不，我是说人。</p>
<p>从一开始，我的思维里带着性别的观念，给了自己退路和借口，后来发现这才是最大的问题。男生和女生在生理上构造的不同，确实会导致先天优势和思维方式的差异，但其实严格说来，在没到拼天赋的程度，这点差异并不能作为我任何失败或者不思进取的借口。一点点也不应该。</p>
<p>另一方面，一个如我般骄傲的人，自诩就是要兼顾逻辑和感情的。一样也不可以放，一样也不可以输。</p>
<p>感谢Leon给我弄了这个Wordpress，买了域名，之后有机会想自己尝试一下Hexo。之前我一直没有珍惜，没有用起来。</p>
<p>那么，在这个夜深人静的晚上，在我害怕人生停滞不前的晚上，我还保留着盲目的信心，期待着我能在这里更好地记录，看看是不是真的能“打破浅薄和矫情”，如我想的那样，成为想要成为的人。</p>
]]></content>
    </entry>
    
  
  
</search>

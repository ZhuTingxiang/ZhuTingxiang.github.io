<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Leetcode 359. Logger Rate Limiter]]></title>
      <url>http://yoursite.com/2017/02/15/Leetcode-359-Logger-Rate-Limiter/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is not printed in the last 10 seconds.</p>
<p>Given a message and a timestamp (in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.</p>
<p>It is possible that several messages arrive roughly at the same time.</p>
<p>Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Logger logger = new Logger();</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 1</div><div class="line">logger.shouldPrintMessage(1, &quot;foo&quot;); returns true;</div><div class="line"></div><div class="line">// logging string &quot;bar&quot; at timestamp 2</div><div class="line">logger.shouldPrintMessage(2,&quot;bar&quot;); returns true;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 3</div><div class="line">logger.shouldPrintMessage(3,&quot;foo&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;bar&quot; at timestamp 8</div><div class="line">logger.shouldPrintMessage(8,&quot;bar&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 10</div><div class="line">logger.shouldPrintMessage(10,&quot;foo&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 11</div><div class="line">logger.shouldPrintMessage(11,&quot;foo&quot;); returns true;</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h3>
<p>&#x6309;&#x7167;&#x666E;&#x901A;&#x7684;hashmap&#x5B58;&#x4E0B;&#x6240;&#x6709;&#x503C;&#xFF0C;&#x7136;&#x540E;&#x66F4;&#x65B0;timestamp&#x662F;&#x4E00;&#x79CD;&#x529E;&#x6CD5;&#x3002;&#x4F46;&#x662F;&#x5B9E;&#x9645;&#x4E2D;&#x4F1A;&#x6D6A;&#x8D39;&#x5F88;&#x591A;&#x7A7A;&#x95F4;&#xFF0C;&#x6240;&#x4EE5;&#x6BD4;&#x8F83;&#x597D;&#x7684;&#x65B9;&#x5F0F;&#x5176;&#x5B9E;&#x662F;&#x7528;queue&#x5B58;&#x4E0B;&#x6700;&#x8FD1;timestamp&#x5728;10&#x4EE5;&#x5185;&#x7684;&#x503C;&#xFF0C;&#x4FDD;&#x6301;&#x4E00;&#x4E2A;size&#x6700;&#x591A;&#x4E3A;10&#x7684;&#x7A97;&#x53E3;&#x5C31;&#x884C;&#x3002;&#x4F46;&#x662F;&#x8DD1;&#x51FA;&#x6765;&#x65F6;&#x95F4;&#x633A;&#x4E45;&#x7684;&#xFF0C;&#x7528;&#x7684;&#x7A7A;&#x95F4;&#x5C11;&#x3002;</p>
<h3 id="code">Code: <a href="#code" class="header-anchor">#</a></h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">class Log{</div><div class="line">    int timestamp;</div><div class="line">    String message;</div><div class="line">    public Log(int Timestamp, String Message) {</div><div class="line">        timestamp = Timestamp;</div><div class="line">        message = Message;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line">public class Logger {</div><div class="line"></div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    PriorityQueue&lt;Log&gt; queue;</div><div class="line">    Set&lt;String&gt; set;</div><div class="line">    public Logger() {</div><div class="line">        queue = new PriorityQueue&lt;&gt;(10, new Comparator&lt;Log&gt;(){</div><div class="line">            public int compare(Log l1, Log l2){</div><div class="line">                return l1.timestamp - l2.timestamp;</div><div class="line">            }</div><div class="line">        });</div><div class="line">        set = new HashSet&lt;&gt;();</div><div class="line">    }</div><div class="line"></div><div class="line">    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.</div><div class="line">        If this method returns false, the message will not be printed.</div><div class="line">        The timestamp is in seconds granularity. */</div><div class="line">    public boolean shouldPrintMessage(int timestamp, String message) {</div><div class="line">        while (queue.size() &gt; 0) {</div><div class="line">            Log log = queue.peek();</div><div class="line">            if (timestamp - log.timestamp &gt;= 10) {</div><div class="line">                Log pollLog = queue.poll();</div><div class="line">                set.remove(pollLog.message);</div><div class="line">            } else {</div><div class="line">                break;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        boolean result = !set.contains(message);</div><div class="line">        if ( !set.contains(message)) {</div><div class="line">            queue.add(new Log(timestamp, message));</div><div class="line">            set.add(message);</div><div class="line">        }</div><div class="line">        return result;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">/**</div><div class="line"> * Your Logger object will be instantiated and called as such:</div><div class="line"> * Logger obj = new Logger();</div><div class="line"> * boolean param_1 = obj.shouldPrintMessage(timestamp,message);</div><div class="line"> */</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 459. Repeated Substring Pattern]]></title>
      <url>http://yoursite.com/2017/02/12/Leetcode-459-Repeated-Substring-Pattern/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x4E00;&#x9053;&#x5F88;&#x7B80;&#x5355;&#x7684;&#x9898;&#x3002;&#x4F46;&#x662F;&#x4E00;&#x76F4;&#x5728;&#x8C03;corner case&#xFF0C;&#x597D;&#x4E0D;&#x5BB9;&#x6613;&#x5199;&#x5B8C;&#x4E86;&#x518D;&#x611F;&#x53D7;&#x4E0B;&#x901F;&#x5EA6;&#x548C;&#x522B;&#x4EBA;&#x5199;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5DEE;&#x8DDD;&#x592A;&#x5927;&#x4E86;&#x3002;&#x5FC3;&#x75BC;&#x4E09;&#x79D2;&#x949F;&#x3002;</p>
<h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.</p>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: &quot;abab&quot;</div><div class="line"></div><div class="line">Output: True</div><div class="line"></div><div class="line">Explanation: It&apos;s the substring &quot;ab&quot; twice.</div></pre></td></tr></table></figure></p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: &quot;aba&quot;</div><div class="line"></div><div class="line">Output: False</div></pre></td></tr></table></figure></p>
<p>Example 3:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: &quot;abcabcabcabc&quot;</div><div class="line"></div><div class="line">Output: True</div><div class="line"></div><div class="line">Explanation: It&apos;s the substring &quot;abc&quot; four times. (And the substring &quot;abcabc&quot; twice.)</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x539F;&#x7406;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5C31;&#x662F;&#x6BCF;&#x6B21;&#x5F97;&#x5230;&#x4E00;&#x4E2A;substring&#xFF0C;&#x5F80;&#x540E;&#x68C0;&#x67E5;&#x76F8;&#x540C;&#x957F;&#x5EA6;&#x7684;&#x4E0B;&#x4E00;&#x6BB5;string&#x3002;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x904D;&#x5386;&#x7684;index&#x53EA;&#x8981;&#x5230;length/2&#x5C31;&#x884C;&#x4E86;&#xFF0C;&#x6BD5;&#x7ADF;&#x81F3;&#x5C11;&#x4E5F;&#x8981;&#x91CD;&#x590D;&#x4E24;&#x904D;&#x7684;&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution {</div><div class="line">    public boolean repeatedSubstringPattern(String str) {</div><div class="line">        if(str == null || str.length() &lt;= 1) return false;</div><div class="line">        int len = str.length();</div><div class="line">        for ( int i=0; i&lt;=len/2; i++) {</div><div class="line">            boolean flag = true;</div><div class="line">            if (len%(i+1) != 0 || len == i+1) continue;</div><div class="line">            String subString = str.substring(0,(i+1));</div><div class="line">            int start = i+1;</div><div class="line">            int end = start * 2;</div><div class="line">            while (end&lt;=len) {</div><div class="line">                if (!subString.equals(str.substring(start,end))){</div><div class="line">                    flag = false; break;</div><div class="line">                }</div><div class="line">                start = start + i+1;</div><div class="line">                end = end + i+1;</div><div class="line">            }</div><div class="line">            // System.out.println(flag);</div><div class="line">            if (flag) return true;</div><div class="line"></div><div class="line">        }</div><div class="line">        return false;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 475. Heaters]]></title>
      <url>http://yoursite.com/2017/02/12/Leetcode-475-Heaters/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.</p>
<p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p>
<p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p>
<p>Note:</p>
<ol>
<li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>
<li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>
<li>As long as a house is in the heaters&apos; warm radius range, it can be warmed.</li>
<li>All the heaters follow your radius standard and the warm radius will the same.</li>
</ol>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,3],[2]</div><div class="line">Output: 1</div><div class="line">Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.</div></pre></td></tr></table></figure></p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,3,4],[1,4]</div><div class="line">Output: 1</div><div class="line">Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.</div></pre></td></tr></table></figure></p>
<h4 id="solution-1-binary-search-slow">Solution 1: Binary Search (slow) <a href="#solution-1-binary-search-slow" class="header-anchor">#</a></h4>
<h5 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h5>
<p>heaters&#x6392;&#x5E8F;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;house&#x7528;binary Search&#x627E;&#x5230;&#x6700;&#x9760;&#x8FD1;&#x7684;&#x90A3;&#x4E2A;&#x503C;&#x3002;</p>
<h5 id="code">Code: <a href="#code" class="header-anchor">#</a></h5>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public int findRadius(int[] houses, int[] heaters) {</div><div class="line">    Arrays.sort(heaters);</div><div class="line">    int radius = 0;</div><div class="line">    for ( int h : houses) {</div><div class="line">        radius = Math.max(radius, binarySearch(h, heaters));</div><div class="line">    }</div><div class="line">    return radius;</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line">public int binarySearch(int val, int[] heaters) {</div><div class="line">    int start = 0;</div><div class="line">    int end = heaters.length - 1;</div><div class="line">    int diff =Integer.MAX_VALUE;</div><div class="line">    while (start &lt; end) {</div><div class="line">        int mid = (start + (end-start)/2);</div><div class="line">        if (val &lt; heaters[mid]) {</div><div class="line">            end = mid;</div><div class="line">        } else {</div><div class="line">            start = mid+1;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    if (start &gt; 0) {</div><div class="line">        diff = Math.min(Math.abs(val - heaters[start]), Math.abs(val - heaters[start-1]));</div><div class="line">    }</div><div class="line">    if (start &lt; heaters.length - 1) {</div><div class="line">        diff = Math.min(diff, Math.abs(val - heaters[start+1]));</div><div class="line">    }</div><div class="line">    diff = Math.min(diff, Math.abs(val - heaters[start]));</div><div class="line">    return diff;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h4 id="solution-2-two-pointers-quicker">Solution 2: Two pointers(quicker) <a href="#solution-2-two-pointers-quicker" class="header-anchor">#</a></h4>
<h5 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h5>
<p>heaters, houses&#x6392;&#x5E8F;&#xFF0C;&#x7528;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#x5206;&#x522B;&#x904D;&#x5386;&#x4E00;&#x904D;&#xFF0C;&#x4E3B;&#x4F53;&#x90E8;&#x5206;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x662F;O&#xFF08;m+n&#xFF09;</p>
<h5 id="code">Code: <a href="#code" class="header-anchor">#</a></h5>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int findRadius(int[] houses, int[] heaters) {</div><div class="line">    // O(mlogm)</div><div class="line">    Arrays.sort(houses);</div><div class="line">    // O(nlogn)</div><div class="line">    Arrays.sort(heaters);</div><div class="line">    int i = 0, res = 0;</div><div class="line">    // O(m+n)</div><div class="line">    for (int house : houses) {</div><div class="line">        while (i &lt; heaters.length - 1 &amp;&amp; heaters[i] + heaters[i + 1] &lt;= house * 2) {</div><div class="line">            i++;</div><div class="line">        }</div><div class="line">        res = Math.max(res, Math.abs(heaters[i] - house));</div><div class="line">    }</div><div class="line">    return res;</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 356. Line Reflection]]></title>
      <url>http://yoursite.com/2017/02/12/Leetcode-356-Line-Reflection/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points.</p>
<p><strong>Example 1:</strong>
Given points = [[1,1],[-1,1]], return true.</p>
<p><strong>Example 2:</strong>
Given points = [[1,1],[-1,-1]], return false.</p>
<p><strong>Follow up:</strong>
Could you do better than O(n2)?</p>
<p><strong>Hint:</strong></p>
<blockquote>
<p>Find the smallest and largest x-value for all points.
If there is a line then it should be at y = (minX + maxX) / 2.
For each point, make sure that it has a reflected point in the opposite side.</p>
</blockquote>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x521A;&#x5F00;&#x59CB;&#x7684;&#x601D;&#x8DEF;&#x662F;&#xFF0C; &#x7528;&#x4E00;&#x4E2A;map&#x5B58;{y&#x503C;:[&#x6240;&#x6709;&#x76F8;&#x5E94;x&#x503C;]}&#x3002;
&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;y&#x503C;&#xFF0C;&#x5C06;&#x5176;&#x5BF9;&#x5E94;&#x7684;x&#x503C;&#x7684;list&#x6392;&#x5E8F;&#x3002;&#x7528;two pointers&#x68C0;&#x67E5;&#x662F;&#x4E0D;&#x662F;&#x5BF9;&#x79F0;&#x3002;
&#x8FD9;&#x6837;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x8D85;&#x8FC7;O(n^2)&#x4E86;&#xFF0C;sort&#x5C31;&#x5DF2;&#x7ECF;O(nlogn)&#x4E86;&#x3002;
&#x4E8E;&#x662F;&#xFF0C;&#x6309;&#x7167;&#x4E86;hint&#x5199;&#xFF0C;&#x5148;&#x904D;&#x5386;&#x4E00;&#x904D;&#xFF0C;&#x5F97;&#x5230;x&#x6700;&#x5927;&#x503C;&#x548C;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x4ECE;&#x800C;&#x5F97;&#x5230;x&#x4E2D;&#x95F4;&#x503C;&#x3002;&#x518D;&#x904D;&#x5386;&#x4E00;&#x904D;&#xFF0C;&#x5B58;&#x4E0B;&#x6BCF;&#x4E2A;&#x70B9;&#x7684;&#x5BF9;&#x79F0;&#x70B9;&#x3002;&#x6700;&#x540E;&#x904D;&#x5386;&#x4E00;&#x904D;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x54EA;&#x4E2A;&#x5750;&#x6807;&#x4E0D;&#x5728;set&#x91CC;&#x9762;&#xFF0C;&#x8BF4;&#x660E;&#x6CA1;&#x6709;&#x5BF9;&#x79F0;&#x70B9;&#x3002;&#xFF08;&#x548C;two sum&#x4E00;&#x6837;&#x7684;&#x601D;&#x8DEF;&#xFF09;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public boolean isReflected(int[][] points) {</div><div class="line">    if(points == null || points.length == 0) return true;</div><div class="line">    int minX = Integer.MAX_VALUE;</div><div class="line">    int maxX = Integer.MIN_VALUE;</div><div class="line">    double midX = 0.0;</div><div class="line">    for( int i=0; i&lt;points.length; i++) {</div><div class="line">        int[] point = points[i];</div><div class="line">        int x = point[0]; int y = point[1];</div><div class="line">        minX = Math.min(minX, x);</div><div class="line">        maxX = Math.max(maxX, x);</div><div class="line">    }</div><div class="line">    midX = (minX + maxX) / 2.0;</div><div class="line">    HashSet&lt;Integer&gt; set = new HashSet&lt;&gt;();</div><div class="line">    for( int i=0; i&lt;points.length; i++) {</div><div class="line">        int[] point = points[i];</div><div class="line">        int x = point[0]; int y = point[1];</div><div class="line">        int[] reflect = new int[2];</div><div class="line">        reflect[0] = (int)(2*midX- x);</div><div class="line">        reflect[1] = y;</div><div class="line">        set.add(Arrays.hashCode(reflect));</div><div class="line">    }</div><div class="line">    for( int i=0; i&lt;points.length; i++) {</div><div class="line">        int[] point = points[i];</div><div class="line">        if (!set.contains(Arrays.hashCode(point))) return false;</div><div class="line">    }</div><div class="line">    return true;</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 409. Longest Palindrome]]></title>
      <url>http://yoursite.com/2017/02/12/Leetcode-409-Longest-Palindrome/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>
<p>This is case sensitive, for example &quot;Aa&quot; is not considered a palindrome here.</p>
<p>Note:
Assume the length of given string will not exceed 1,010.</p>
<p>Example:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;abccccdd&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">7</div><div class="line"></div><div class="line">Explanation:</div><div class="line">One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x8D85;&#x7B80;&#x5355;&#x7684;&#x9898;&#x3002;
Solution 1:
&#x53EF;&#x4EE5;&#x7528;&#x6570;&#x7EC4;&#x5B58;&#x50A8;&#x6BCF;&#x4E2A;&#x5B57;&#x6BCD;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x9700;&#x8981;&#x8003;&#x8651;&#x5927;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;&#xFF0C;&#x5206;&#x5F00;&#x6839;&#x636E;ascii&#x8BA1;&#x7B97;index&#x3002;
Solution 2:
&#x7528;Hashmap&#x5B58;&#x50A8;&#x6BCF;&#x4E2A;&#x5B57;&#x7B26;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x52A0;&#x548C;&#x6240;&#x6709;even&#x6B21;&#x6570;&#xFF0C;&#x518D;&#x52A0;&#x548C;odd/2*2&#xFF0C;&#x5982;&#x679C;&#x51FA;&#x73B0;&#x8FC7;odd&#xFF0C;&#x6700;&#x540E;&#x52A0;&#x4E0A;1&#xFF0C;&#x5426;&#x5219;&#x4E0D;&#x52A0;&#x3002;
Solution 3:<br>
&#x7528;HashSet&#xFF0C;&#x5982;&#x679C;&#x51FA;&#x73B0;&#x8FC7;&#xFF0C;&#x5C31;&#x52A0;2&#xFF0C;&#x53BB;&#x6389;&#x3002;&#x518D;&#x51FA;&#x73B0;&#xFF0C;&#x518D;&#x52A0;&#x5165;&#x3002;&#x6700;&#x540E;&#x5982;&#x679C;set&#x662F;&#x7A7A;&#x7684;&#xFF0C;&#x8BF4;&#x660E;&#x6CA1;&#x6709;odd&#xFF0C;&#x5426;&#x5219;&#x52A0;&#x4E0A;1&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public int longestPalindrome(String s) {</div><div class="line">    HashSet&lt;Character&gt; set = new HashSet&lt;&gt;();</div><div class="line">    int count = 0;</div><div class="line">    for (Character c: s.toCharArray()) {</div><div class="line">        if (set.contains(c)) {</div><div class="line">            count += 2;</div><div class="line">            set.remove(c);</div><div class="line">        } else set.add(c);</div><div class="line"></div><div class="line">    }</div><div class="line">    if (!set.isEmpty()) count++;</div><div class="line">    return count;</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Interview Questions]]></title>
      <url>http://yoursite.com/2017/02/11/Java-Interview-Questions/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>Always update...</p>
<h3 id="jvm-is-plantform-dependent">JVM is plantform dependent? <a href="#jvm-is-plantform-dependent" class="header-anchor">#</a></h3>
<blockquote>
<p>Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?</p>
</blockquote>
<hr>
<p><strong>JVM translates bytecode into machine language</strong>
Every Java program is first compiled into an intermediate language called Java bytecode. The JVM is used primarily for 2 things: the first is to translate the bytecode into the machine language for a particular computer, and the second thing is to actually execute the corresponding machine-language instructions as well. The JVM and bytecode combined give Java its status as a &quot;portable&quot; language &#x2013; this is because Java bytecode can be transferred from one machine to another.</p>
<p><strong>Machine language is OS dependent</strong>
Since the JVM must translate the bytecode into machine language, and since the machine language depends on the operating system being used, it is clear that the JVM is platform (operating system) dependent &#x2013; in other words, the JVM is not platform independent.</p>
<p><strong>The JVM is not platform independent</strong>
The key here is that the JVM depends on the operating system &#x2013; so if you are running Mac OS X you will have a different JVM than if you are running Windows or some other operating system.</p>
<h3 id="overloading-overriding">Overloading &amp; Overriding <a href="#overloading-overriding" class="header-anchor">#</a></h3>
<blockquote>
<p>In Java, what&#x2019;s the difference between method overloading and method overriding?</p>
</blockquote>
<hr>
<p><strong>Overloading:</strong>
Method overloading in Java occurs when two or more methods in the same class have <strong>the exact same name but different parameters</strong> (remember that method parameters accept values passed into the method). However, method overloading is a compile-time phenomenon.
<strong>Can be
overloading:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.) The number of parameters is different for the methods.</div><div class="line">2.) The parameter types are different (like</div><div class="line">changing a parameter that was a float to an int).</div></pre></td></tr></table></figure></p>
<p><strong>Not overloading</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. Just changing the return type of the method. (Compiler Error)</div><div class="line">2. Changing just the name of the method parameters, but</div><div class="line">not changing the parameter types.</div></pre></td></tr></table></figure></p>
<p><strong>Overriding:</strong>
[&#x6839;&#x672C;&#x4E5F;&#x8BB0;&#x4E0D;&#x4F4F;&#xFF0C;&#x5176;&#x5B9E;&#x6211;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x5C0F;&#x670B;&#x53CB;&#x9A91;&#x5728;&#x7238;&#x7238;&#x80A9;&#x8180;&#x4E0A;&#xFF0C;&#x4ED6;&#x4EEC;&#x4E3B;&#x4F53;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x4E0D;&#x4F1A;&#x53D8;&#x7684;&#xFF0C;&#x5373;&#x65B9;&#x6CD5;&#x53C2;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#x4E0D;&#x53D8;&#xFF0C;&#x4F46;&#x5185;&#x5BB9;&#x53D8;&#x4E86;&#x3002;<em>(:&#x437;&#x309D;&#x2220;)</em>]
Overriding means that a method inherited from a parent class will be changed. But, when overriding a method everything remains <strong>exactly the same except the method definition &#x2013; basically what the method does is changed slightly to fit in with the needs of the child class</strong>. But, the method name, the number and types of parameters, and the return type will all remain the same.
Method overriding is a run-time phenomenon that is the driving force behind polymorphism.</p>
<h3 id="private-constructor">Private Constructor <a href="#private-constructor" class="header-anchor">#</a></h3>
<blockquote>
<p>What&#x2019;s the point of having a private constructor?</p>
</blockquote>
<hr>
<p>Defining a constructor with the private modifier says that only the native class (as in the class in which the private constructor is defined) is allowed to create an instance of the class, and no other caller is permitted to do so.</p>
<p>There are two possible reasons why one would want to use a private constructor &#x2013; the first is that <strong>you don&#x2019;t want any objects of your class to be created at all,</strong> and the second is that <strong>you only want objects to be created internally &#x2013; as in only created in your class.</strong></p>
<p>A <strong>singleton</strong> is a design pattern that allows only one instance of your class to be created, and this can be accomplished by using a private constructor.</p>
<h3 id="an-object-and-a-class">An object and a class <a href="#an-object-and-a-class" class="header-anchor">#</a></h3>
<blockquote>
<p>In Java, what&#x2019;s the difference between an object and a class?</p>
</blockquote>
<p>Shortly: An object is an instance of a class.
Objects have a lifespan but classes do not.</p>
<hr>
<p><strong>References:</strong>
http://www.programmerinterview.com/</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 271. Encode and Decode Strings]]></title>
      <url>http://yoursite.com/2017/02/10/271-Encode-and-Decode-Strings/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question: <a href="#question" class="header-anchor">#</a></h3>
<p>Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.</p>
<p>Machine 1 (sender) has the function:</p>
<p><figure class="highlight plain"><figcaption><span>encode(vector<string> strs) {</string></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  // ... your code</div><div class="line">  return encoded_string;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>Machine 2 (receiver) has the function:
<figure class="highlight plain"><figcaption><span>decode(string s) {</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  //... your code</div><div class="line">  return strs;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>So Machine 1 does:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string encoded_string = encode(strs);</div></pre></td></tr></table></figure></p>
<p>and Machine 2 does:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vector&lt;string&gt; strs2 = decode(encoded_string);</div></pre></td></tr></table></figure></p>
<p>strs2 in Machine 2 should be the same as strs in Machine 1.</p>
<p>Implement the encode and decode methods.</p>
<p>Note:</p>
<ul>
<li>The string may contain any possible characters out of 256 valid ascii characters. Your algorithm should be generalized enough to work on any possible characters.</li>
<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>
<li>Do not rely on any library method such as eval or serialize methods. You should implement your own encode/decode algorithm.</li>
</ul>
<h3 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h3>
<p>&#x4E4D;&#x4E00;&#x770B;&#xFF0C;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#x8BF4;&#x7684;&#x662F;&#x4EC0;&#x4E48;&#x3002;&#x5176;&#x5B9E;&#x9898;&#x610F;&#x662F;&#x7ED9;&#x4E00;&#x4E2A;list&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5148;&#x8981;&#x62FC;&#x6210;&#x4E00;&#x6574;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x662F;encode&#x3002;&#x7136;&#x540E;&#x628A;&#x8FD9;&#x6574;&#x4E2A;&#x5B57;&#x7B26;&#x62C6;&#x56DE;&#x4E00;&#x4E2A;list&#x7684;&#x5B57;&#x7B26;&#x3002;
&#x6240;&#x4EE5;&#x8003;&#x70B9;&#x662F;&#x5982;&#x4F55;&#x5408;&#x7406;&#x5730;&#x5206;&#x9694;&#xFF0C;&#x7136;&#x540E;&#x8FD8;&#x80FD;&#x8BC6;&#x522B;&#x51FA;&#x6765;&#x3002;
&#x8FD9;&#x54EA;&#x513F;&#x662F;&#x7B97;&#x6CD5;&#xFF0C;&#x5176;&#x5B9E;&#x8003;&#x7684;&#x662F;Serilization&#x8FD9;&#x4E2A;&#x8BA1;&#x7B97;&#x673A;&#x7CFB;&#x7EDF;&#x4E2D;&#x7684;&#x57FA;&#x672C;&#x6982;&#x5FF5;&#x3002;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#x4E32;&#x884C;&#x5316;(Serialization)&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x6982;&#x5FF5;&#xFF0C;&#x5B83;&#x662F;&#x6307;&#x5C06;&#x5BF9;&#x8C61;&#x5B58;&#x50A8;&#x5230;&#x4ECB;&#x8D28;&#xFF08;&#x5982;&#x6587;&#x4EF6;&#x3001;&#x5185;&#x5B58;&#x7F13;&#x51B2;&#x533A;&#x7B49;&#xFF09;&#x4E2D;&#x6216;&#x662F;&#x4EE5;&#x4E8C;&#x8FDB;&#x5236;&#x65B9;&#x5F0F;&#x901A;&#x8FC7;&#x7F51;&#x7EDC;&#x4F20;&#x8F93;&#x3002;&#x4E4B;&#x540E;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x53CD;&#x4E32;&#x884C;&#x5316;&#x4ECE;&#x8FD9;&#x4E9B;&#x8FDE;&#x7EED;&#x7684;&#x5B57;&#x8282;&#xFF08;byte&#xFF09;&#x6570;&#x636E;&#x91CD;&#x65B0;&#x6784;&#x5EFA;&#x4E00;&#x4E2A;&#x4E0E;&#x539F;&#x59CB;&#x5BF9;&#x8C61;&#x72B6;&#x6001;&#x76F8;&#x540C;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x7279;&#x5B9A;&#x60C5;&#x51B5;&#x4E0B;&#x4E5F;&#x53EF;&#x4EE5;&#x8BF4;&#x662F;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x526F;&#x672C;&#xFF0C;&#x4F46;&#x5E76;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x60C5;&#x51B5;&#x90FD;&#x8FD9;&#x6837;&#x3002;</div></pre></td></tr></table></figure></p>
<h3 id="code">Code: <a href="#code" class="header-anchor">#</a></h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Codec {</div><div class="line"></div><div class="line">    // Encodes a list of strings to a single string.</div><div class="line">    public String encode(List&lt;String&gt; strs) {</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        for(String s : strs) {</div><div class="line">            sb.append(s.length()).append(&apos;/&apos;).append(s);</div><div class="line">        }</div><div class="line">        return sb.toString();</div><div class="line">    }</div><div class="line"></div><div class="line">    // Decodes a single string to a list of strings.</div><div class="line">    public List&lt;String&gt; decode(String s) {</div><div class="line">        List&lt;String&gt; ret = new ArrayList&lt;String&gt;();</div><div class="line">        int i = 0;</div><div class="line">        while(i &lt; s.length()) {</div><div class="line">            int slash = s.indexOf(&apos;/&apos;, i);</div><div class="line">            int size = Integer.valueOf(s.substring(i, slash));</div><div class="line">            ret.add(s.substring(slash + 1, slash + size + 1));</div><div class="line">            i = slash + size + 1;</div><div class="line">        }</div><div class="line">        return ret;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 346. Moving Average from Data Stream]]></title>
      <url>http://yoursite.com/2017/02/10/346-Moving-Average-from-Data-Stream/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question <a href="#question" class="header-anchor">#</a></h3>
<p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</p>
<p>For example,
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MovingAverage m = new MovingAverage(3);</div><div class="line">m.next(1) = 1</div><div class="line">m.next(10) = (1 + 10) / 2</div><div class="line">m.next(3) = (1 + 10 + 3) / 3</div><div class="line">m.next(5) = (10 + 3 + 5) / 3</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h3>
<p>&#x975E;&#x5E38;&#x7B80;&#x5355;&#x7684;&#x9898;&#x76EE;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;queue&#x6216;&#x8005;arraylist&#x6216;&#x8005;array&#x4FDD;&#x5B58;next&#x7684;&#x503C;&#x3002;&#x7528;&#x4E00;&#x4E2A;sum&#x5B58;&#x7740;&#x603B;&#x548C;&#xFF0C;&#x6BCF;&#x6B21;&#x90FD;&#x8BA1;&#x7B97;&#x4E00;&#x4E0B;&#x5E73;&#x5747;&#x503C;&#x3002;</p>
<h3 id="code">Code: <a href="#code" class="header-anchor">#</a></h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class MovingAverage {</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();</div><div class="line">    int size;</div><div class="line">    int count = 0;</div><div class="line">    int total = 0;</div><div class="line">    public MovingAverage(int size) {</div><div class="line">        this.size = size;</div><div class="line"></div><div class="line">    }</div><div class="line"></div><div class="line">    public double next(int val) {</div><div class="line">        if (count &lt; size) {</div><div class="line">            count ++;</div><div class="line">            q.offer(val);</div><div class="line">            total += val;</div><div class="line">            return total*1.0 / count;</div><div class="line">        } else {</div><div class="line">            int remove = q.poll();</div><div class="line">            q.offer(val);</div><div class="line">            total -= remove;</div><div class="line">            total += val;</div><div class="line">            return total*1.0/ size;</div><div class="line">        }</div><div class="line"></div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 300. Longest Increasing Subsequence]]></title>
      <url>http://yoursite.com/2017/02/10/Leetcode-300-Longest-Increasing-Subsequence/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question <a href="#question" class="header-anchor">#</a></h3>
<p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.</p>
<p>Your algorithm should run in O(n2) complexity.</p>
<p><strong>Follow up:</strong>
Could you improve it to O(n log n) time complexity?</p>
<h3 id="solution-1-dynamic-programming-o-n-2">Solution 1: Dynamic Programming O(n^2) <a href="#solution-1-dynamic-programming-o-n-2" class="header-anchor">#</a></h3>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x7B2C;&#x4E00;&#x5C42;&#x5FAA;&#x73AF;&#xFF1A; array&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x6570;<br>
&#x7B2C;&#x4E8C;&#x5C42;&#x5FAA;&#x73AF;&#xFF1A; &#x4E4B;&#x524D;&#x7684;&#x6BCF;&#x4E2A;&#x6570;&#x4E2D;&#xFF0C;&#x9009;&#x62E9;&#x6BD4;&#x8FD9;&#x4E2A;&#x6570;&#x5C0F;&#x5E76;&#x4E14;&#x6709;&#x6700;&#x957F;&#x94FE;&#x7684;&#x90A3;&#x4E2A;&#x6570;</p>
<h4 id="code">Code <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public int lengthOfLIS(int[] nums) {</div><div class="line">    if (nums == null || nums.length == 0) return 0;</div><div class="line">    int[] best = new int[nums.length];</div><div class="line">    int max = 1;</div><div class="line">    for ( int i=0; i&lt;nums.length; i++) {</div><div class="line">        best[i] = 1;</div><div class="line">        for ( int j=0; j&lt;i; j++) {</div><div class="line">            if (nums[j] &lt; nums[i]) {</div><div class="line">                best[i] = Math.max(best[i], best[j] + 1);</div><div class="line">            }</div><div class="line">        }</div><div class="line">        max = Math.max(best[i], max);</div><div class="line">    }</div><div class="line">    return max;</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3 id="solution-2-binary-search-o-nlogn">Solution 2: Binary Search O(nlogn) <a href="#solution-2-binary-search-o-nlogn" class="header-anchor">#</a></h3>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x628A;&#x4E4B;&#x524D;&#x627E;&#x5230;&#x7684;&#x6700;&#x957F;&#x7684;&#x94FE;&#x5B58;&#x8D77;&#x6765;&#x3002;&#x9047;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x5982;&#x679C;&#x6BD4;list&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;&#x5927;&#xFF0C;&#x5C31;&#x653E;&#x5728;list&#x7684;&#x6700;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x662F;&#xFF0C;&#x5C31;&#x9009;&#x62E9;&#x6BD4;&#x5B83;&#x5927;&#xFF0C;&#x4F46;&#x662F;&#x5927;&#x6700;&#x5C11;&#x7684;&#x90A3;&#x4E2A;&#x6570;&#x6362;&#x6389;&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public int lengthOfLIS(int[] nums) {</div><div class="line">    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    for (int n: nums) {</div><div class="line">        if (list.size() == 0 || n &gt; list.get(list.size()-1)) {</div><div class="line">            list.add(n);</div><div class="line">        } else {</div><div class="line">            int start = 0;</div><div class="line">            int end = list.size();</div><div class="line">            while (start &lt; end) {</div><div class="line">                int mid = (start+end)/2;</div><div class="line">                if (list.get(mid) &lt; n) {</div><div class="line">                    start = mid +1 ;</div><div class="line">                } else {</div><div class="line">                    end = mid;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            list.set(end,n);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    return list.size();</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 281. Zigzag Iterator]]></title>
      <url>http://yoursite.com/2017/02/09/Leetcode-281/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>Question:</strong></p>
<p>Given two 1d vectors, implement an iterator to return their elements alternately.</p>
<p>For example, given two 1d vectors:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v1 = [1, 2]</div><div class="line">v2 = [3, 4, 5, 6]</div></pre></td></tr></table></figure></p>
<p>By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].</p>
<p><strong>Follow up:</strong>
What if you are given k 1d vectors? How well can your code be extended to such cases?</p>
<p>Clarification for the follow up question - Update (2015-09-18):
The &quot;Zigzag&quot; order is not clearly defined and is ambiguous for k &gt; 2 cases. If &quot;Zigzag&quot; does not look right to you, replace &quot;Zigzag&quot; with &quot;Cyclic&quot;. For example, given the following input:</p>
<p>[1,2,3]
[4,5,6,7]
[8,9]
It should return [1,4,8,2,5,9,3,6,7].</p>
<p><strong>Explanation:</strong>
&#x5982;&#x679C;&#x53EA;&#x6709;&#x4E24;&#x4E2A;vector&#xFF0C;&#x633A;&#x5BB9;&#x6613;&#x7684;&#x3002;&#x5C31;&#x7528;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x6B21;&#x90FD;&#x5224;&#x65AD;&#x4E0B;&#x5C31;&#x884C;&#x3002;</p>
<p><strong>Code</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class ZigzagIterator {</div><div class="line">    List&lt;Integer&gt; V1 = new ArrayList&lt;&gt;();</div><div class="line">    List&lt;Integer&gt; V2 = new ArrayList&lt;&gt;();</div><div class="line">    int index1 = 0;</div><div class="line">    int index2 = 0;</div><div class="line"></div><div class="line">    public ZigzagIterator(List&lt;Integer&gt; v1, List&lt;Integer&gt; v2) {</div><div class="line">        V1 = v1;</div><div class="line">        V2 = v2;</div><div class="line">    }</div><div class="line"></div><div class="line">    public int next() {</div><div class="line">        if (index1 &lt;= index2) {</div><div class="line">            if (index1 &lt; V1.size()) {</div><div class="line">                return V1.get(index1++);</div><div class="line">            } else {</div><div class="line">                return V2.get(index2++);</div><div class="line">            }</div><div class="line">        } else {</div><div class="line">            if (index2 &lt; V2.size()) {</div><div class="line">                return V2.get(index2++);</div><div class="line">            } else {</div><div class="line">                return V1.get(index1++);</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">    }</div><div class="line"></div><div class="line">    public boolean hasNext() {</div><div class="line">        if (index1 &lt; V1.size() || index2 &lt; V2.size()) return true;</div><div class="line">        return false;</div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p><strong>FollowUp:</strong>
&#x5982;&#x679C;&#x662F;K&#x4E2A;vector&#xFF0C;&#x6BCF;&#x6B21;&#x5224;&#x65AD;&#x6307;&#x9488;&#x5C31;&#x975E;&#x5E38;&#x4E0D;&#x5408;&#x7406;&#x4E86;&#x3002;&#x8FD9;&#x91CC;&#x6709;&#x4E00;&#x79CD;&#x5DE7;&#x5999;&#x7684;&#x529E;&#x6CD5;&#xFF0C;&#x7528;Queue&#xFF0C;&#x6216;&#x8005;list&#xFF0C;&#x9053;&#x7406;&#x76F8;&#x901A;&#x3002;
&#x57FA;&#x672C;&#x601D;&#x8DEF;&#xFF1A;&#x628A;&#x6BCF;&#x4E2A;list&#x53D8;&#x6210;iterator&#xFF0C;&#x7136;&#x540E;&#x653E;&#x8FDB;Queue&#x4E2D;&#xFF0C;&#x6BCF;&#x6B21;poll&#x4E00;&#x4E2A;&#x51FA;&#x6765;&#xFF0C;&#x7136;&#x540E;&#x5F97;&#x5230;iterator&#x5230;&#x7684;&#x503C;&#xFF0C;&#x5982;&#x679C;iterator&#x91CC;&#x9762;&#x8FD8;&#x6709;&#x503C;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;vector&#x8FD8;&#x6CA1;&#x6709;&#x7A7A;&#x7684;&#x8BDD;&#xFF0C;&#x518D;&#x6392;&#x5230;&#x961F;&#x4F0D;&#x7684;&#x6700;&#x540E;&#x3002;&#x4E0D;&#x65AD;&#x5FAA;&#x73AF;&#x3002;
&#x5DE7;&#x5999;&#x3002;</p>
<p><strong>Code&#xFF1A;</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class ZigzagIterator {</div><div class="line">    LinkedList&lt;Iterator&gt; list;</div><div class="line">    public ZigzagIterator(List&lt;Integer&gt; v1, List&lt;Integer&gt; v2) {</div><div class="line">        list = new LinkedList&lt;Iterator&gt;();</div><div class="line">        if(!v1.isEmpty()) list.add(v1.iterator());</div><div class="line">        if(!v2.isEmpty()) list.add(v2.iterator());</div><div class="line">    }</div><div class="line"></div><div class="line">    public int next() {</div><div class="line">        Iterator poll = list.remove();</div><div class="line">        int result = (Integer)poll.next();</div><div class="line">        if(poll.hasNext()) list.add(poll);</div><div class="line">        return result;</div><div class="line">    }</div><div class="line"></div><div class="line">    public boolean hasNext() {</div><div class="line">        return !list.isEmpty();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Distributed System-Indirect Communication and Naming]]></title>
      <url>http://yoursite.com/2017/02/06/ds69/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>CMU-95702&#x5206;&#x5E03;&#x5F0F;&#x7CFB;&#x7EDF;
&#x7B2C;6&#x3001;9&#x7AE0;&#x603B;&#x7ED3;&#x7B14;&#x8BB0;</p>
<ul>
<li>
<p><strong>Indirect Messaging:</strong>
Indirect communication is defined as communication between entities in a distributed system through an intermediary with no direct coupling between the sender and the receiver(s).</p>
<ul>
<li>Decoupled in space:
<ul>
<li>Sender does not need to know the identify of the receiver(s) and visa-versa</li>
<li>Good for handling legacy systems
&#x2013; Decoupled in time:</li>
<li>A component need not even be running</li>
<li>The messaging system can store messages until they are successfully delivered</li>
<li>Reliable delivery is insured</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Two messaging modes:</strong></p>
<ul>
<li>Point-to-point:
<ul>
<li>Inventory to Factory</li>
<li>Inventory to Sales</li>
<li>Factory to Accounting</li>
</ul>
</li>
<li>publish / subscribe :
<ul>
<li>parts to parts inventory and parts order</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>some example scenarios:</strong></p>
<ul>
<li>asynchronous communication: like chat ant twitter type app,  report info to on or more interested systems</li>
<li>event-driven problem</li>
<li>decoupled/ multiple consumers</li>
<li>multiply interested parties</li>
</ul>
</li>
<li>
<p><strong>indirect messaging protocols:</strong></p>
<ul>
<li>two open standars: XMPP &amp; amqp</li>
</ul>
</li>
<li>
<p><strong>Java&apos;s JMS API:</strong></p>
<ul>
<li>An API for performing indirect messaging.</li>
<li>It is an abstraction API like JNDI and JDBC.</li>
<li>Interacts with some Message Oriented Middleware
(MOM)</li>
<li>JMS is a client-facing interface, meant to abstract
way the particulars of any MOM.</li>
<li>In theory, you should have portability of systems
written with JMS such that they can work with any
MOM.</li>
<li>API is javax.jms</li>
</ul>
</li>
<li>
<p><strong>JMS Queues and topics</strong></p>
</li>
<li>
<p><strong>JMS message types&#xFF1A;</strong></p>
<ul>
<li>Stream
<ul>
<li>Sequential stream of Java primitive data types.</li>
</ul>
</li>
<li>Map
<ul>
<li>Set of name-value pairs</li>
</ul>
</li>
<li>Names are String objects</li>
<li>Values are Java primitives (including String)</li>
<li>Text
<ul>
<li>Message is a String object</li>
</ul>
</li>
<li>Plain-text message</li>
<li>XML messages</li>
<li>Object
<ul>
<li>Serialized Java object</li>
</ul>
</li>
<li>Simple if in Java-only environment</li>
<li>Bytes
<ul>
<li>Stream of un-interpreted bytes.</li>
<li>To encode a message body to match an existing message format</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Message driven beans&#xFF1A;</strong>
components that are executedasynchronously by messages coming
available in a Queue or Topic.</p>
</li>
</ul>
<p>Line Question on class:</p>
<ul>
<li>abstract indirect messaging API: JMS</li>
<li>point-to-point messaging: Queue</li>
<li>mom used in lab: Glassfish</li>
<li>public subscribe message: Topics</li>
<li>Indirect Messaging Destination: Queue and Topics</li>
<li>Administratively managed resources (External to your program):
Connectionfactory, Queue, Topics</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Distributed System-Mobile and ubiquitous computing]]></title>
      <url>http://yoursite.com/2017/02/06/Distributed-System/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>CMU-95702&#x5206;&#x5E03;&#x5F0F;&#x7CFB;&#x7EDF;
&#x7B2C;19&#x7AE0;&#x603B;&#x7ED3;&#x7B14;&#x8BB0;</p>
<ul>
<li><strong>Design issues in distributed mobile applications:</strong>
<ul>
<li><strong>Association:</strong>
&#x2022; Devices
&#x2013; Appear	and	disappear	from	the	space.
&#x2013; Do	so	unpredictably
&#x2013; May	be	totally	new	to	the	space.
&#x2013; Or	may	be	returning	to	the	space.
&#x2022; They	need	to	be:
&#x2013; Perhaps	added	to	the	network
&#x2013; Brought	into	Association	with	resources	and	applications
&#x2022; Examples	of	Association
&#x2013; Come	on	campus	and	be	able	to	be	associated	with	the	printers that	are	close	to	you.
&#x2013; Be	alerted	if	someone	you	know	is	walking	near	you.
&#x2013; Be	provided	with	selling	prices	in	your	local	area	for	your	goods
(not	prices	in	far-away	areas).</li>
<li><strong>Application-level Association:</strong>
often by discorvery, broadcasts</li>
</ul>
</li>
</ul>
<ul>
<li>
<p><strong>How a new device become part of the local network?</strong></p>
<ul>
<li>ARP</li>
<li>DHCP</li>
</ul>
</li>
<li>
<p><strong>Sensing and Context Awareness:</strong></p>
<ul>
<li>sensing: camera, time, acceleration, location, speed, temperature</li>
<li>context awareness: in terms of sensed data, or associated data</li>
</ul>
</li>
<li>
<p><strong>Location Sensing:</strong></p>
<ul>
<li>GPS</li>
<li>Database of	collected	Wifi access points
&#x2013; stores the	access	point&apos;s	MAC	address	and	the	GPS
location	at	which	it	was	observed</li>
<li>Cellular	&#x2013; compute	using	signal	strength	to
multiple	cellular	tower	locations</li>
<li>RFID	tags	&#x2013; tags	are	associated	with	a	location</li>
</ul>
</li>
<li>
<p><strong>Adaptation:</strong></p>
<ul>
<li>Presentation	to	fit	the	screen</li>
<li>Use	of	JavaScript	to	fit	the	devices	capabilities</li>
<li>Media	quality	to	fit	the	screen	and	device	capabilities</li>
<li>Language	to	fit	the	user</li>
<li>Information	to	fit	the	physical	context.
&#x2022; Give	only	movie	times	in	the	future,	and	in	nearby	theaters</li>
</ul>
</li>
<li>
<p><strong>Device awareness / browser detection:</strong>
Reply	differently	depending	on	what	device	makes	request.
3 HTTP	headers	provide	clues	of	what	the	device	is:</p>
</li>
</ul>
<ol>
<li>
<p>User-Agent
&#x2022; Identifies	the	mobile	browser	and	almost always	the	device manufacturer	and	model.
&#x2022; BlackBerry8330/4.3.0	Profile/MIDP-2.0	Configuration/CLDC-1.1
VendorID/105
&#x2022; Collection	of	mobile	agent	strings:
&#x2013; http://www.zytrax.com/tech/web/mobile_ids.html</p>
</li>
<li>
<p>X-Wap-Profile
&#x2022; Link	to	an	XML	profile	of	the	phone&#x2019;s	capabilities
&#x2022;E.g.http://www.blackberry.net/go/mobile/profiles/uaprof/8310/4.2.2.rdf</p>
</li>
<li>
<p>Accept
&#x2022; Supported	MIME(&#x591A;&#x7528;&#x9014;&#x7684;&#x7F51;&#x9645;&#x90AE;&#x4EF6;&#x6269;&#x5145;&#x534F;&#x8BAE;)types
&#x2022; E.g.	text/html,	application/xhtml+xml,	etc.</p>
<p>These 3 headers can provide enough info , but:
- header can be missing
- have inaccurate values
- have invalid urls</p>
</li>
</ol>
<ul>
<li><strong>Feature detection(more flexible and reliable solution):</strong>
bottom line: using feature detection, not browser detection
<ul>
<li>Two strategies for feature detection:
<ul>
<li>Graceful	degradation
<ul>
<li>Design	for	modern	browsers</li>
<li>Where	features	are	not	available,	provide	a	simpler
alternative
<ul>
<li>If	not	possible,	alert	the	user</li>
</ul>
</li>
<li>Don&apos;t	allow	it	to	invisibly	fail</li>
</ul>
</li>
<li>Progressive	enhancement</li>
</ul>
<ul>
<li>Design	with	a	baseline	of	usable	functionality</li>
<li>Enrich	the	user	experience	step-by-step	by	testing	for
features	before	using	them.</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><strong>Responsive web design:</strong>
<ul>
<li>A	strategy	of	web	design	for	multiple	screen	sizes</li>
<li>Uses:
<ul>
<li>Fluid	grids	expressing	sizes	in	terms	of	percents,	not
pixels</li>
<li>Modify	size	of	media	using	relative	units
<ul>
<li>Keep	them	within	their	bounding	elements</li>
<li>Images</li>
<li>Media</li>
<li>Font	size</li>
</ul>
</li>
<li>Crossing	size	thresholds	switch	to	completely	different
designs
<ul>
<li>Accomplished	using	media	queries</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>
<p><strong>Mobile first:</strong></p>
</li>
<li>
<p>A	philosophy	of	web	design</p>
</li>
<li>
<p>Design	for	mobile	first,	and	desktop	second</p>
</li>
<li>
<p>Counter	to	what	has	been	done	historically,	of	mobile	2nd</p>
</li>
<li>
<p>Benefits	of	Mobile	First:
- Focus	on	the	platform	on	which	you	will	reach	the	most	users
- Forces	designers	to	focus	on	the	most	important	content	and
functionality
- Allows	for	using	technologies	on	mobile:
* touch	events
* geolocation &#x5730;&#x7406;&#x5B9A;&#x4F4D;
* accelerometer &#x52A0;&#x901F;&#x8BA1;</p>
</li>
<li>
<p><strong>Mobile deployment strategies:</strong></p>
<ul>
<li>Native
<ul>
<li>E.g.	Android,	iOS</li>
<li>Requires	redeveloping	for	each	architecture</li>
</ul>
<ul>
<li>2	code	bases</li>
</ul>
</li>
<li>Native	with	Development	Framework
<ul>
<li>Use	a	framework	that	compiles	to	multiple	native
applications</li>
<li>E.g.	Corona	(http://www.coronalabs.com)</li>
</ul>
</li>
<li>Mobile	Web
<ul>
<li>Develop	in	HTML	/	CSS	/JavaScript</li>
<li>Accessed	in	a	browser</li>
<li>Can	install	local	icon	to	launch	to	site
<ul>
<li>Use	local	storage	to	store	information	when	off	line</li>
<li>Use	manifest	to	cache	application	to	use	when	off	line</li>
<li>Sync	when	Internet	is	again	available.</li>
</ul>
</li>
</ul>
<ul>
<li>Hybrid
<ul>
<li>Develop	in	HTML	/	CSS	/	JavaScript</li>
<li>Wrap	in	a	browser	wrapper	to	create	native	apps</li>
<li>Wrapper	provides	access	to	phone	hardware	not
accessible	from	the	browser</li>
<li>Apache	Cordova	(https://cordova.apache.org)	is	an	open
source	native	wrapper</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Distributed System-ACID]]></title>
      <url>http://yoursite.com/2017/02/06/17/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>CMU-95702&#x5206;&#x5E03;&#x5F0F;&#x7CFB;&#x7EDF;
ACID&#x6982;&#x5FF5;&#x603B;&#x7ED3;</p>
<ul>
<li><strong>ACID Transactions&#xFF1A;</strong>
<ul>
<li><strong>Atomic:</strong>  All or nothing. No intermediate states are visible. No possibility that
only part of the transaction ran. If a transaction fails or aborts prior to
committing, the TP system will undo the effects of any updates (will
recover). We either commit or abort the entire process. Checkpointing and
Logging and recoverable objects can be used to ensure a transaction is
atomic with respect to failures.</li>
<li><strong>Consistent:</strong>  system invariants preserved, e.g., if there were n dollars in a
bank before a transfer transaction then there will be n dollars in the bank
after the transfer. This is largely in the hands of the application programmer.</li>
<li><strong>Isolated:</strong>  Two transactions do not interfere with each other. They appear as
serial executions. This is the case even though transactions may run
concurrently. Locking is often used to prevent one transaction from
interfering with another.</li>
<li><strong>Durable:</strong> The commit causes a permanent change to stable storage. This
property may be obtained with log-based recovery algorithms. If there has
been a commit but updates have not yet been a commit but updates have not yet been completed due to a crash,
the logs will hold the necessary information on recovery.</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[哪儿]]></title>
      <url>http://yoursite.com/2017/01/24/%E5%93%AA%E5%84%BF/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><embed src="http://www.xiami.com/widget/12753884_1769553081/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"></p>
<p>&#x4ECA;&#x5929;&#x4E0A;Advanced Cloud Computing,&#x4E09;&#x4E2A;&#x6559;&#x6388;&#x5C31;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x4E89;&#x8BBA;&#x8D77;&#x6765;&#x3002;</p>
<p>&#x90A3;&#x771F;&#x7684;&#x662F;&#x5F88;&#x89E6;&#x52A8;&#x6211;&#x7684;&#x4E00;&#x523B;&#xFF0C;&#x52A0;&#x8D77;&#x6765;&#x90FD;&#x5FEB;150&#x5C81;&#x7684;&#x4E09;&#x4E2A;&#x9876;&#x5C16;&#x5B66;&#x672F;&#x5927;&#x725B;&#xFF0C;&#x5728;&#x6295;&#x5F71;&#x4EEA;&#x524D;&#x9762;&#xFF0C;&#x5BF9;&#x5F85;&#x77E5;&#x8BC6;&#x8FD8;&#x662F;&#x548C;&#x5B69;&#x5B50;&#x4E00;&#x6837;&#x4E13;&#x6CE8;&#x548C;&#x70ED;&#x60C5;&#xFF0C;&#x53EF;&#x7231;&#x6781;&#x4E86;&#x3002;</p>
<p>&#x5FFD;&#x7136;&#x60F3;&#x5230;&#xFF0C;Greg&#x7684;&#x4E3B;&#x9875;&#x4E0A;&#x5199;&#x7740;&#xFF0C;&#x201C;&#x6211;&#x624D;&#x4E0D;&#x662F;&#x4E2A;&#x4E0D;&#x5EA6;&#x5047;&#x7684;&#x6559;&#x6388;&#xFF0C;&#x6211;2012&#x5E74;&#x53BB;&#x51B2;&#x6D6A;&#x4E86;&#x5462;&#xFF01;&#x201D;&#x3002;</p>
<p>&#x5176;&#x5B9E;&#xFF0C;&#x6BCF;&#x6B21;&#x9009;&#x8BFE;&#x90FD;&#x5F88;&#x5934;&#x75BC;&#xFF0C;&#x65F6;&#x95F4;&#x592A;&#x5C11;&#xFF0C;&#x60F3;&#x5B66;&#x7684;&#x8BFE;&#x592A;&#x591A;&#xFF0C;&#x53EA;&#x6068;&#x81EA;&#x5DF1;&#x4E0D;&#x80FD;&#x591A;&#x8BFB;&#x51E0;&#x5E74;&#x3002;&#x6211;&#x4E5F;&#x77E5;&#x9053;&#x4E0A;&#x5B66;&#x671F;&#x5F88;&#x4E0D;&#x5F00;&#x5FC3;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53D1;&#x8FC7;&#x8A93;&#x8FD9;&#x5B66;&#x671F;&#x4E0D;&#x8981;&#x9009;&#x5F88;&#x96BE;&#x7684;&#x8BFE;&#x4E86;&#x3002;&#x53EF;&#x662F;&#x6211;&#x7684;&#x7814;&#x7A76;&#x751F;&#x53EA;&#x6709;&#x4E00;&#x6B21;&#xFF0C;&#x5728;CMU&#x5FF5;&#x4E66;&#x7684;&#x673A;&#x4F1A;&#x4E5F;&#x53EA;&#x6709;&#x4E00;&#x6B21;&#xFF08;&#x5F53;&#x7136;&#x6211;&#x4E0D;&#x4ECB;&#x610F;&#x4EE5;&#x540E;&#x518D;&#x6765;&#x54C8;&#x54C8;&#x54C8;&#xFF09;&#xFF0C;&#x65E0;&#x6CD5;&#x4E0D;&#x8BF4;&#x670D;&#x81EA;&#x5DF1;&#x518D;&#x4E89;&#x53D6;&#x4E00;&#x4E0B;&#x3002;</p>
<p>&#x53EA;&#x662F;&#xFF0C;&#x6700;&#x8FD1;&#x6709;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x5728;&#x6E10;&#x6E10;&#x653E;&#x5927;&#x3002;</p>
<p>&#x6211;&#x5230;&#x5E95;&#x8981;&#x53BB;&#x54EA;&#x91CC;&#x3002;</p>
<p>&#x5176;&#x5B9E;&#xFF0C;&#x5F88;&#x591A;&#x4EBA;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#x5230;&#x5E95;&#x8981;&#x53BB;&#x54EA;&#x91CC;&#x3002;&#x4F46;&#x5176;&#x5B9E;&#x6BCF;&#x4E2A;&#x4EBA;&#xFF0C;&#x90FD;&#x80FD;&#x770B;&#x5230;&#x90A3;&#x4E48;&#x4E00;&#x4E9B;&#x4E9B;&#x5FAE;&#x5F31;&#x7684;&#x5149;&#xFF0C;&#x597D;&#x50CF;&#x662F;&#x90A3;&#x4E2A;&#x5730;&#x65B9;&#x3002;&#x53EA;&#x662F;&#x6709;&#x4E9B;&#x4EBA;&#x4F1A;&#x9009;&#x62E9;&#x52AA;&#x529B;&#x8DD1;&#x7740;&#x53BB;&#xFF0C;&#x6709;&#x4E9B;&#x4EBA;&#x6000;&#x7591;&#x81EA;&#x5DF1;&#x662F;&#x5426;&#x771F;&#x7684;&#x770B;&#x89C1;&#x4E86;&#x5149;&#xFF0C;&#x6709;&#x4E9B;&#x4EBA;&#xFF0C;&#x88C5;&#x4F5C;&#x770B;&#x4E0D;&#x89C1;&#x3002;</p>
<p>&#x4E4B;&#x524D;&#x548C;&#x8431;&#x54E5;&#x804A;&#x5929;&#xFF0C;&#x8431;&#x54E5;&#x5012;&#x662F;&#x5F88;&#x723D;&#x5FEB;&#xFF0C;&#x8BF4;&#x4E0D;&#x7BA1;&#x53BB;&#x54EA;&#x513F;&#x4E0D;&#x60F3;&#x5446;&#x5317;&#x4EAC;&#x5438;&#x973E;&#x4E86;&#xFF0C;&#x9664;&#x975E;&#x8FD9;&#x6B21;&#x8003;&#x4E0A;&#x4E86;&#x5317;&#x5F71;&#x3002;&#x4E24;&#x5E74;&#x4E86;&#x554A;&#xFF0C;&#x5317;&#x5F71;&#x7684;&#x68A6;&#x8FD8;&#x5728;&#x3002;</p>
<p>&#x4F60;&#x770B;&#x4F60;&#x770B;&#xFF0C;&#x575A;&#x5B9A;&#x7684;&#x4EBA;&#x90FD;&#x5F88;&#x5766;&#x7136;&#x3002;</p>
<p>&#x5C31;&#x50CF;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x62FF;&#x4E86;&#x6EE1;&#x5206;&#x7684;Mengyao&#xFF0C;&#x603B;&#x548C;&#x6211;&#x8BF4;&#x6BD5;&#x4E1A;&#x627E;&#x4E0D;&#x5230;&#x5DE5;&#x4F5C;&#xFF0C;&#x6253;&#x7B97;&#x53BB;&#x661F;&#x5DF4;&#x514B;&#x95E8;&#x53E3;&#x8E72;&#x7740;&#x6446;&#x4E2A;&#x7897;&#x3002;</p>
<p>&#x6240;&#x4EE5;&#x6709;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x8981;&#x53BB;&#x54EA;&#x513F;&#x5176;&#x5B9E;&#x4E5F;&#x4E0D;&#x53EF;&#x6015;&#x3002;</p>
<p>&#x6BD5;&#x7ADF;&#x672A;&#x6765;&#x672A;&#x77E5;&#x4E0D;&#x53EF;&#x6015;&#xFF0C;&#x5DF2;&#x77E5;&#x624D;&#x6700;&#x53EF;&#x6015;&#x3002;</p>
<p>&#x6211;&#x7B97;&#x662F;&#x60F3;&#x660E;&#x767D;&#x4E86;&#xFF0C;&#x5173;&#x4E8E;&#x4EBA;&#x751F;&#xFF0C;&#x6211;&#x4E00;&#x76F4;&#x601D;&#x8003;&#x5F97;&#x592A;&#x7D2F;&#x4E86;&#x3002;&#x8FD9;&#x660E;&#x660E;&#x662F;&#x4E00;&#x9053;&#x65E0;&#x89E3;&#x9898;&#xFF0C;&#x5C31;&#x7B97;&#x6211;&#x5728;&#x67D0;&#x4E2A;&#x65F6;&#x523B;&#x5FC3;&#x6EE1;&#x610F;&#x8DB3;&#x60F3;&#x660E;&#x767D;&#x4E86;&#xFF0C;&#x4E5F;&#x4E00;&#x5B9A;&#x662F;&#x5E7B;&#x89C9;&#x3002;</p>
<p>&#x6CA1;&#x6709;&#x7B54;&#x6848;&#x7684;&#x3002;&#x6240;&#x4EE5;&#x4E0D;&#x8981;&#x601D;&#x8003;&#x4E86;&#x3002;</p>
<p>&#x8FD8;&#x4E0D;&#x5982;&#x75DB;&#x75DB;&#x5FEB;&#x5FEB;&#x6D3B;&#x4E00;&#x6B21;&#x5C31;&#x597D;&#x3002;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的排序问题]]></title>
      <url>http://yoursite.com/2017/01/08/Java%E4%B8%AD%E7%9A%84Sort/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x603B;&#x7ED3;&#x51E0;&#x79CD;&#x6392;&#x5E8F;&#x65B9;&#x6CD5;&#x3002;
&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#xFF0C;&#x9009;&#x62E9;&#x6392;&#x5E8F;&#xFF0C;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF0C;Merge Sort&#xFF08;continue..&#xFF09;...</p>
<p><strong>Simple sorting</strong></p>
<h2 id="bubble-sort">Bubble Sort <a href="#bubble-sort" class="header-anchor">#</a></h2>
<p>&#x6162;&#xFF0C;&#x4F46;&#x662F;&#x7B80;&#x5355;&#x3002;
<strong>Time complexity:    O(N^2)</strong></p>
<p><strong>&#x6B65;&#x9AA4;:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. &#x6BCF;&#x6B21;&#x53EA;&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;&#x503C;&#x3002;</div><div class="line">2. &#x5982;&#x679C;&#x5DE6;&#x8FB9;&#x7684;&#x503C;&#x5927;&#xFF0C;&#x5C31;&#x4EA4;&#x6362;&#x4E24;&#x4E2A;&#x503C;&#x3002;</div><div class="line">3. &#x79FB;&#x52A8;&#x5927;&#x7684;&#x503C;&#x5230;&#x53F3;&#x8FB9;&#x3002;</div></pre></td></tr></table></figure></p>
<p><strong>&#x4E3E;&#x4F8B;:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#x539F;&#x6570;&#x7EC4;: [4,7, 2, 5, 3]</div><div class="line">Round 1:</div><div class="line">  -&gt; [4,7,2,5,3]</div><div class="line">  -&gt; [4,2,7,5,3]</div><div class="line">  -&gt; [4,2,5,7,3]</div><div class="line">  -&gt; [4,2,5,3,7]</div><div class="line">Round 2:</div><div class="line">  -&gt; [2,4,5,3,7]</div><div class="line">  -&gt; [2,4,5,3,7]</div><div class="line">  -&gt; [2,4,3,5,7]</div><div class="line">Round 3:</div><div class="line">  -&gt; [2,4,3,5,7]</div><div class="line">  -&gt; [2,3,4,5,7]</div><div class="line">Round 4:</div><div class="line">  -&gt; [2,3,4,5,7]</div></pre></td></tr></table></figure></p>
<p><strong>Code:</strong></p>
<p>int[ ] data = {4, 7, 2, 5, 3}</p>
<p>Swap Method
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// a helper method that swaps two values in an int array</div><div class="line">private static void swap(int[] data, int one, int two) {</div><div class="line">    int temp = data[one];</div><div class="line">    data[one] = data[two];</div><div class="line">    data[two] = temp;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>Bubble Sort:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public static void bubbleSort(int[] data) {</div><div class="line">       // move backward from the last index</div><div class="line">       for (int out = data.length - 1; out &gt;= 1; out--) {</div><div class="line">           // move forward from the beginning</div><div class="line">           // bubble up the largest value to the right</div><div class="line">           for (int in = 0; in &lt; out; in++) {</div><div class="line">               if (data[in] &gt; data[in + 1]) {</div><div class="line">                   swap(data, in, in + 1);</div><div class="line">               }</div><div class="line">           }</div><div class="line">       }</div><div class="line">   }</div></pre></td></tr></table></figure></p>
<h2 id="selection-sort">Selection Sort <a href="#selection-sort" class="header-anchor">#</a></h2>
<p>&#x6BD4;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x5FEB;&#x4F46;&#x662F;&#x4F9D;&#x65E7;&#x4E0D;&#x591F;&#x5FEB;&#x3002;
<strong>Time complexity:    O(N^2)</strong>
&#x6BD4;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x5C11;&#x4E86;&#x5F88;&#x591A;swap&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x6240;&#x4EE5;&#x7A0D;&#x5FAE;&#x5FEB;&#x4E00;&#x4E9B;&#x3002;</p>
<p><strong>&#x6B65;&#x9AA4;:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. &#x9009;&#x51FA;&#x6700;&#x5C0F;&#x7684;&#x503C;&#x3002;</div><div class="line">2. &#x79FB;&#x52A8;&#x5230;&#x6700;&#x5DE6;&#x8FB9;&#x3002;</div></pre></td></tr></table></figure></p>
<p><strong>&#x4E3E;&#x4F8B;:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#x539F;&#x6570;&#x7EC4;: [4,7, 2, 5, 3]</div><div class="line">Round1:</div><div class="line">  &#x6700;&#x5C0F;&#x7684;&#x662F;2&#xFF1A;</div><div class="line">  [2,7,4,5,3]</div><div class="line">Round2:</div><div class="line">  &#x6700;&#x5C0F;&#x7684;&#x662F;3</div><div class="line">  [2,3,4,5,7]</div><div class="line">Round3:</div><div class="line">  &#x6700;&#x5C0F;&#x7684;&#x662F;4</div><div class="line">  [2,3,4,5,7]</div><div class="line">Round4:</div><div class="line">  &#x6700;&#x5C0F;&#x7684;&#x662F;5&#xFF1A;</div><div class="line">  [2,3,4,5,7]</div></pre></td></tr></table></figure></p>
<p><strong>Code:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">for (int out = 0; out&lt;data.length; out++) {</div><div class="line">  min = out;</div><div class="line">  for (int in = out+1; in &lt; data.length; in ++) {</div><div class="line">    if (data[in] &lt; min) {</div><div class="line">      min = in;</div><div class="line">    }</div><div class="line">  }</div><div class="line">  if (out != min) {</div><div class="line">    swap(data, out, min);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h2 id="insertion-sort">Insertion Sort: <a href="#insertion-sort" class="header-anchor">#</a></h2>
<p>&#x6700;&#x76F4;&#x89C2;&#x7684;&#x6392;&#x5E8F;&#x6CD5;&#x3002;
<strong>Time complexity: O(N^2)</strong></p>
<p><strong>&#x6B65;&#x9AA4;:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#x60F3;&#x8C61;&#x6570;&#x7EC4;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x5206;&#x5272;&#x7EBF;&#x3002;</div><div class="line">1. &#x5DE6;&#x624B;&#x8FB9;&#x7684;&#x662F;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x3002;</div><div class="line">2. &#x7EBF;&#x7684;&#x53F3;&#x8FB9;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x9700;&#x8981;&#x88AB;&#x63D2;&#x5165;&#x5230;&#x5DE6;&#x8FB9;&#x7684;&#x76F8;&#x5E94;&#x4F4D;&#x7F6E;&#x4E2D;&#x3002;</div></pre></td></tr></table></figure></p>
<p><strong>&#x4E3E;&#x4F8B;:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#x539F;&#x6570;&#x7EC4;: [4,7, 2, 5, 3]</div><div class="line">-&gt; [4,|7,2,5,3]</div><div class="line">-&gt; [4,7,|2,5,3]</div><div class="line">-&gt; [2,4,7,|5,3]</div><div class="line">-&gt; [2,4,5,7,|3]</div><div class="line">-&gt; [2,3,4,5,7]</div></pre></td></tr></table></figure></p>
<p><strong>Code:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public static void insertionSort(int[] data) {</div><div class="line">   // start from the 1st index till the last index</div><div class="line">  for (int out = 1; out&lt;data.length; out++) {</div><div class="line">    int in = out;</div><div class="line">    int temp = data[out];</div><div class="line">    /*</div><div class="line">    * loop to check the sorted section going backward</div><div class="line">    * but not necessarily all the way to the 0th</div><div class="line">    * On average, look halfway through the sorted section</div><div class="line">    */</div><div class="line">    while (in&gt;0 &amp;&amp; data[in-1]&gt;=temp) {</div><div class="line">      data[in] = data[in-1];</div><div class="line">      in --;</div><div class="line">    }</div><div class="line">    if (out != in) {</div><div class="line">      data[in] = temp;</div><div class="line">    }</div><div class="line">  }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 189.Rotate Array]]></title>
      <url>http://yoursite.com/2017/01/05/Leetcode-189-Rotate-Array/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Rotate an array of n elements to the right by k steps.</p>
<p>For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].</p>
<p><strong>Note:</strong>
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</p>
<p><strong>Hint:</strong>
Could you do it in-place with O(1) extra space?</p>
<p><strong>Related problem:</strong>
Reverse Words in a String II</p>
<p><code>There are three solutions for this problem:</code></p>
<h4 id="solution-1">Solution 1: <a href="#solution-1" class="header-anchor">#</a></h4>
<p>We can use temporary array to store k elements.</p>
<p>Time complexity: O(N)<br>
Space complexity: O(k), use extra space</p>
<p><strong>Code:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public void rotate(int[] nums, int k) {</div><div class="line">    int n= nums.length;</div><div class="line">    k = k%n;</div><div class="line">    // store the k elements at the end of the array</div><div class="line">    int[] temp = new int[k];</div><div class="line">    System.arraycopy(nums, n-k, temp, 0, k);</div><div class="line">    // rotate the left elements to the end of the array</div><div class="line">    for(int i = n-k-1; i&gt;= 0;i--) {</div><div class="line">        nums[i+k] = nums[i];</div><div class="line">    }</div><div class="line">    // put temp elements to the top of the arrray</div><div class="line">    for(int i = 0; i&lt; k; i++) {</div><div class="line">        nums[i] = temp[i];</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>The solution beat 98% in java submissions.</p>
<h4 id="solution2">Solution2: <a href="#solution2" class="header-anchor">#</a></h4>
<p>Reversal, for example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">first: [5,6,7] -&gt; [7,6,5]</div><div class="line">then: [1,2,3,4] -&gt; [4,3,2,1]</div><div class="line">the whole array: [1,2,3,4,5,6,7] -&gt; [4,3,2,1,7,6,5]</div><div class="line">reverse the whole array: [4,3,2,1,7,6,5] -&gt; [5,6,7,1,2,3,4]</div></pre></td></tr></table></figure></p>
<p>Time complexity:O(N)<br>
Space complexity:O(1)</p>
<p><strong>Code:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public void rotate(int[] nums, int k) {</div><div class="line">    int n = nums.length;</div><div class="line">    k = k % n;</div><div class="line">    reverse(nums, n-k, n-1);</div><div class="line">    reverse(nums, 0, n-k-1);</div><div class="line">    reverse(nums, 0, n-1);</div><div class="line">}</div><div class="line"></div><div class="line">public void reverse(int[] nums, int start, int end) {</div><div class="line">    while(start &lt; end) {</div><div class="line">        int temp = nums[start];</div><div class="line">        nums[start] = nums[end];</div><div class="line">        nums[end] = temp;</div><div class="line">        start ++;</div><div class="line">        end --;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>The solution beats 13.19% of java submissions.</p>
<h4 id="solution3">Solution3: <a href="#solution3" class="header-anchor">#</a></h4>
<p>Time complexity: O(N)<br>
Space complexity: O(1)</p>
<p>To rotate k steps once for an element. Set all elements to gcd groups.</p>
<p>E.g.
nums = [1 2 3 4 5 6], k=2</p>
<p>We use gcd (greatest common divisor) between n and k.<br>
gcd = 2</p>
<p>// count is the number we need swap each path<br>
count = nums.length / gcd - 1 = 2</p>
<p>1st iteration: starts from nums[i=0], keep rotate nums[i+k] until meet the start position</p>
<pre><code>   nums = [\_5 2 \_1 4 \_3 6]
</code></pre>
<p>2nd iteration: starts from nums[i=1]</p>
<pre><code>   nums = [5 \_6 1 \_2 3 \_4]
</code></pre>
<p><strong>Code:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public void rotate(int[] nums, int k) {</div><div class="line">    int n = nums.length;</div><div class="line"></div><div class="line">    if (n &lt;= 1) {</div><div class="line">        return ;</div><div class="line">    }</div><div class="line">     k = k % n;</div><div class="line">    int g = gcd(k, n);</div><div class="line"></div><div class="line">    int position, count;</div><div class="line">    for(int i= 0; i&lt; g; i++) {</div><div class="line">        position = i;</div><div class="line">        // count is the number we need swap each path</div><div class="line">        count = n/g - 1;</div><div class="line">        System.out.println(g);</div><div class="line">        System.out.println(count);</div><div class="line">        for (int j= 0; j&lt; count; j++) {</div><div class="line">            position = (position + k) % nums.length;</div><div class="line">            int temp = nums[i];</div><div class="line">            nums[i] = nums[position];</div><div class="line">            nums[position] = temp;</div><div class="line">        }</div><div class="line"></div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">int gcd(int a, int b) {</div><div class="line">    if (a == 0 || b == 0 )</div><div class="line">        return a + b;</div><div class="line">    else</div><div class="line">        return gcd(b, a % b);</div><div class="line">}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>References:
http://yucoding.blogspot.com/2015/03/leetcode-question-rotate-array.html<br>
http://www.programcreek.com/2015/03/rotate-array-in-java/<br>
P.s. recommend the website:
http://www.programcreek.com</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode-[Combination]-Intersection of Arrays/Linked Lists]]></title>
      <url>http://yoursite.com/2017/01/03/Leetcode-Intersection-of-Two-Arrays/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x8FD9;&#x7BC7;&#x662F;&#x7EFC;&#x5408;&#x51E0;&#x9053;&#x5173;&#x4E8E;<code>Intersection of Arrays/Linked List</code> &#x7684;Leetcode&#x9898;&#xFF0C;&#x5206;&#x6790;&#x4E00;&#x4E0B;&#x95EE;&#x9898;&#x53CA;&#x5176;&#x53D8;&#x4F53;&#xFF0C;&#x5E76;&#x7ED9;&#x51FA;&#x51E0;&#x79CD;&#x89E3;&#x6CD5;&#x3002;</p>
<h4 id="leetcode-349-intersection-of-two-arrays">LeetCode 349. Intersection of Two Arrays <a href="#leetcode-349-intersection-of-two-arrays" class="header-anchor">#</a></h4>
<h5 id="question">Question: <a href="#question" class="header-anchor">#</a></h5>
<p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].</p>
<p>Note:</p>
<ul>
<li>Each element in the result must be unique.</li>
<li>The result can be in any order.</li>
</ul>
<h5 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h5>
<p>&#x9898;&#x610F;&#x662F;&#x627E;&#x5230;&#x4E24;&#x4E2A;Array&#x4E4B;&#x95F4;&#x4EA4;&#x53C9;&#x7684;&#x503C;&#xFF0C;&#x65E0;&#x91CD;&#x590D;&#x3002;</p>
<ul>
<li>Solution 1:
<ul>
<li>Time Complexity: O( N^2 )</li>
<li>Iterate two arrays, add intersection elements to a HashSet. Using set here to avoid repetition.</li>
</ul>
</li>
</ul>
<ul>
<li>Solution 2: (<em>My Choice</em>)
<ul>
<li>Time Complexity: O(N)</li>
<li>Using two hashsets. The first hashset is to store all unduplicated elements in array1. Then add intersection between hashset1 and array2 to hashset2. It use more space but less time than solution 1.</li>
</ul>
</li>
</ul>
<ul>
<li>Solution 3:
<ul>
<li>Time Complexity: O(NlogN)</li>
<li>Using two pointers. Sort two arrays first.</li>
</ul>
</li>
</ul>
<h5 id="code">Code: <a href="#code" class="header-anchor">#</a></h5>
<ul>
<li>
<p>Solution1
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public int[] intersection(int[] nums1, int[] nums2) {</div><div class="line">    Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</div><div class="line">    for (int i = 0; i &lt; nums1.length; i++) {</div><div class="line">        for (int j = 0; j&lt;nums2.length; j++) {</div><div class="line">            if (nums1[i] == nums2[j]) {</div><div class="line">                set.add(nums1[i]);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    int[] ints = new int[set.size()];</div><div class="line">    int i = 0;</div><div class="line">    for (Integer num : set){</div><div class="line">        ints[i++] = num;</div><div class="line">    }</div><div class="line">    return ints;</div><div class="line">}</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Solution2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public int[] intersection(int[] nums1, int[] nums2) {</div><div class="line">    Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</div><div class="line">    Set&lt;Integer&gt; intersection = new HashSet&lt;&gt;();</div><div class="line"></div><div class="line">    for (int i = 0; i &lt; nums1.length; i++) {</div><div class="line">        set.add(nums1[i]);</div><div class="line">    }</div><div class="line">    for (int j = 0; j &lt; nums2.length; j++) {</div><div class="line">        if (set.contains(nums2[j])) {</div><div class="line">            intersection.add(nums2[j]);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    int[] ints = new int[intersection.size()];</div><div class="line">    int i = 0;</div><div class="line">    for (Integer num : intersection){</div><div class="line">        ints[i++] = num;</div><div class="line">    }</div><div class="line">    return ints;</div><div class="line">}</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Solution3:
(Cite top solutions in Leetcode)
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class Solution {</div><div class="line">    public int[] intersection(int[] nums1, int[] nums2) {</div><div class="line">        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</div><div class="line">        Arrays.sort(nums1);</div><div class="line">        Arrays.sort(nums2);</div><div class="line">        int i = 0;</div><div class="line">        int j = 0;</div><div class="line">        while (i &lt; nums1.length &amp;&amp; j &lt; nums2.length) {</div><div class="line">            if (nums1[i] &lt; nums2[j]) {</div><div class="line">                i++;</div><div class="line">            } else if (nums1[i] &gt; nums2[j]) {</div><div class="line">                j++;</div><div class="line">            } else {</div><div class="line">                set.add(nums1[i]);</div><div class="line">                i++;</div><div class="line">                j++;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        int[] result = new int[set.size()];</div><div class="line">        int k = 0;</div><div class="line">        for (Integer num : set) {</div><div class="line">            result[k++] = num;</div><div class="line">        }</div><div class="line">        return result;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
</li>
</ul>
<h4 id="leetcode-350-intersection-of-two-arrays-ii">LeetCode 350. Intersection of Two Arrays II <a href="#leetcode-350-intersection-of-two-arrays-ii" class="header-anchor">#</a></h4>
<h5 id="question">Question: <a href="#question" class="header-anchor">#</a></h5>
<p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:</p>
<p>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p>
<p>Note:</p>
<ul>
<li>Each element in the result should appear as many times as it shows in both arrays.</li>
<li>The result can be in any order.</li>
</ul>
<p>Follow up:</p>
<ul>
<li>What if the given array is already sorted? How would you optimize your algorithm?</li>
<li>What if nums1&apos;s size is small compared to nums2&apos;s size? Which algorithm is better?</li>
<li>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>
</ul>
<h5 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h5>
<p>Here we need to solve the 3 follow up questions emphatically.</p>
<ul>
<li>
<p>Solution1: Sort &amp; Pointers</p>
<ul>
<li>Time Complexity: O(nlogn)</li>
<li>Space Complexity: O(m + n)</li>
<li>Sort two arrays first. Then use two pointers as the question 349.</li>
</ul>
</li>
<li>
<p>Solution2: HashMap</p>
<ul>
<li>Time Complexity: O(N)</li>
<li>Space Complexity: O(N)</li>
<li>Use one hashmap to store array1 elements and counters. Find intersection by iterate elements in array2.</li>
</ul>
</li>
<li>
<p>Importent Follow Up:</p>
<p><code>What if the given array is already sorted? How would you optimize your algorithm?</code></p>
<p>If it is sorted, we just need to use two pointers.</p>
<p><code>What if nums1&apos;s size is small compared to nums2&apos;s size? Which algorithm is better?</code></p>
<p>The hashmap solution is better.</p>
<p><code>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</code> (cite from top solution in Leetocode)</p>
<p>If only nums2 cannot fit in memory, put all elements of nums1 into a HashMap, read chunks of array that fit into the memory, and record the intersections.</p>
<p>If both nums1 and nums2 are so huge that neither fit into the memory, sort them individually (external sort), then read 2 elements from each array at a time in memory, record intersections.</p>
</li>
</ul>
<h5 id="code">Code: <a href="#code" class="header-anchor">#</a></h5>
<ul>
<li>
<p>Solution1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public int[] intersect(int[] nums1, int[] nums2) {</div><div class="line">    Arrays.sort(nums1);</div><div class="line">    Arrays.sort(nums2);</div><div class="line">    int i = 0;</div><div class="line">    int j = 0;</div><div class="line">    // &#x5728;&#x8FD9;&#x91CC;&#x9009;&#x62E9;&#x4E86;&#x4E0E;349&#x4E0D;&#x4E00;&#x6837;&#x7684;&#x89E3;&#x6CD5;&#x662F;&#xFF0C;&#x5148;&#x5B9A;&#x4E49;&#x597D;array&#xFF0C;&#x4E4B;&#x540E;&#x518D;&#x622A;&#x53D6;&#x8FD4;&#x56DE;&#x3002;&#x800C;&#x4E0D;&#x662F;&#x5148;&#x7528;ArrayList. &#x901F;&#x5EA6;&#x66F4;&#x5FEB;&#x4E86;&#x3002;</div><div class="line">    int[] result = new int[nums1.length &lt; nums2.length ? nums1.length : nums2.length];</div><div class="line"></div><div class="line">    int count = 0;</div><div class="line">    while (i &lt; nums1.length &amp;&amp; j&lt; nums2.length) {</div><div class="line">        if (nums1[i] &lt; nums2[j]) {</div><div class="line">            i++;</div><div class="line">        } else if (nums1[i] == nums2[j]) {</div><div class="line">            result[count++] = nums1[i];</div><div class="line">            i++;</div><div class="line">            j++;</div><div class="line">        } else {</div><div class="line">            j++;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    return Arrays.copyOf(result, count);</div><div class="line">}</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Solution2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public int[] intersect(int[] nums1, int[] nums2) {</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    int[] result = new int[nums1.length &lt; nums2.length ? nums1.length : nums2.length];</div><div class="line">    int count = 0;</div><div class="line">    for (Integer n : nums1) {</div><div class="line">        if(map.containsKey(n)) {</div><div class="line">            map.put(n, map.get(n)+1);</div><div class="line">        } else {</div><div class="line">            map.put(n, 1);</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    for (Integer m : nums2) {</div><div class="line">        if(map.containsKey(m) &amp;&amp; map.get(m) &gt; 0) {</div><div class="line">            result[count++] = m;</div><div class="line">            map.put(m, map.get(m)-1);</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    return Arrays.copyOf(result, count);</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
</li>
</ul>
<h4 id="leetcode-160-intersection-of-two-linked-lists">LeetCode 160. Intersection of Two Linked Lists <a href="#leetcode-160-intersection-of-two-linked-lists" class="header-anchor">#</a></h4>
<h5 id="question">Question: <a href="#question" class="header-anchor">#</a></h5>
<p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>
<p>For example, the following two linked lists:</p>
<pre><code>  A:          a1 &#x2192; a2
                   &#x2198;
                     c1 &#x2192; c2 &#x2192; c3
                   &#x2197;
  B:     b1 &#x2192; b2 &#x2192; b3
</code></pre>
<p>begin to intersect at node c1.</p>
<p>Notes:</p>
<ul>
<li>If the two linked lists have no intersection at all, return null.</li>
<li>The linked lists must retain their original structure after the function returns.</li>
<li>You may assume there are no cycles anywhere in the entire linked structure.</li>
<li>Your code should preferably run in O(n) time and use only O(1) memory.</li>
</ul>
<h5 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h5>
<p>In order to use only O(1) memory and O(n) time, we can start from the same node (the head of shorter array) and get the intersection.</p>
<h5 id="code">Code: <a href="#code" class="header-anchor">#</a></h5>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public ListNode getIntersectionNode(ListNode headA, ListNode headB) {</div><div class="line">    if(headA == null || headB == null) {</div><div class="line">        return null;</div><div class="line">    }</div><div class="line">    int lengthA = length(headA);</div><div class="line">    int lengthB = length(headB);</div><div class="line">    while (lengthA &gt; lengthB) {</div><div class="line">        headA = headA.next;</div><div class="line">        lengthA --;</div><div class="line">    }</div><div class="line">    while(lengthB &gt; lengthA) {</div><div class="line">        headB = headB.next;</div><div class="line">        lengthB --;</div><div class="line">    }</div><div class="line">    ListNode intersection = null;</div><div class="line">    while(headA != headB ) {</div><div class="line">        headA = headA.next;</div><div class="line">        headB = headB.next;</div><div class="line">    }</div><div class="line">    intersection = headA;</div><div class="line">    return intersection;</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line">public int length(ListNode head) {</div><div class="line">    int result= 0;</div><div class="line">    while(head != null) {</div><div class="line">        result ++;</div><div class="line">        head = head.next;</div><div class="line">    }</div><div class="line">    return result;</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 396.Rotate Function]]></title>
      <url>http://yoursite.com/2016/12/30/leetcode-396/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>Question:</strong></p>
<p>Given an array of integers A and let n to be its length.</p>
<p>Assume Bk to be an array obtained by rotating the array A k positions clock-wise, we define a &quot;rotation function&quot; F on A as follow:</p>
<p>F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1].</p>
<p>Calculate the maximum value of F(0), F(1), ..., F(n-1).</p>
<p>Note:
n is guaranteed to be less than 105.</p>
<p>Example:
A = [4, 3, 2, 6]</p>
<pre><code>F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26

So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.
</code></pre>
<p><strong>Explanation:</strong>
OK,&#x6570;&#x5B66;&#x9898;Again&#x3002;&#x5982;&#x679C;&#x6309;&#x7167;&#x539F;&#x9898;&#x610F;&#x89E3;&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;TLE&#x7684;&#x95EE;&#x9898;&#x3002;</p>
<p>&#x501F;&#x7528;Top solution&#x7684;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x4E0B;&#xFF1A;</p>
<pre><code>F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]
F(k-1) = 0 * Bk-1[0] + 1 * Bk-1[1] + ... + (n-1) * Bk-1[n-1]
       = 0 * Bk[1] + 1 * Bk[2] + ... + (n-2) * Bk[n-1] + (n-1) * Bk[0]


 F(k) - F(k-1) = Bk[1] + Bk[2] + ... + Bk[n-1] + (1-n)Bk[0]
               = (Bk[0] + ... + Bk[n-1]) - nBk[0]
               = sum - nBk[0]
So:
F(k) = F(k-1) + sum - nBk[0]

What is Bk[0]?

k = 0; B[0] = A[0];
k = 1; B[0] = A[len-1];
k = 2; B[0] = A[len-2];
...
</code></pre>
<p><strong>Code</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def maxRotateFunction(self, A):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type A: List[int]</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        sumA = sum(A)</div><div class="line">        countA = 0</div><div class="line">        for index, value in enumerate(A):</div><div class="line">            countA += index * value</div><div class="line">        result = countA</div><div class="line">        for i in range(len(A)-1,0,-1):</div><div class="line">            countA = countA + sumA - len(A) * A[i]</div><div class="line">            result = max(countA, result)</div><div class="line">        return result</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 202. Happy Number]]></title>
      <url>http://yoursite.com/2016/12/30/leetcode-202/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>Question:</strong></p>
<p>Write an algorithm to determine if a number is &quot;happy&quot;.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p>Example: 19 is a happy number</p>
<p>12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1</p>
<p><strong>Explanation:</strong></p>
<p>&#x53C8;&#x662F;&#x4E00;&#x9053;&#x6570;&#x5B66;&#x9898;&#x3002;&#x5982;&#x679C;&#x5C31;&#x6309;&#x7167;&#x9898;&#x610F;&#x5199;&#x7B97;&#x6CD5;&#x7684;&#x8BDD;&#x975E;&#x5E38;&#x9EBB;&#x70E6;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x4ECE;&#x6570;&#x5B66;&#x7684;&#x89D2;&#x5EA6;&#x5148;&#x7B80;&#x5316;&#x9898;&#x76EE;&#x3002;
&#x6839;&#x636E;Top Solution&#x7684;&#x63D0;&#x793A;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x6536;&#x655B;&#x5230;1&#xFF0C;&#x610F;&#x5473;&#x7740;&#x5982;&#x679C;&#x51FA;&#x73B0;&#x4E86;&#x4E24;&#x6B21;&#x540C;&#x6837;&#x7684;&#x503C;&#xFF0C;&#x5219;&#x8868;&#x793A;&#x4E4B;&#x540E;&#x8FD8;&#x4F1A;&#x51FA;&#x73B0;&#xFF0C;&#x4F1A;&#x4E00;&#x76F4;&#x5FAA;&#x73AF;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x503C;&#x4E0D;&#x662F;1&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x8FD9;&#x4E2A;&#x6570;&#x5C31;&#x4E0D;&#x662F;happy number&#x3002;
&#x53EF;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x662F;happy number&#x7684;&#x6570;&#x4E0D;&#x53EF;&#x80FD;&#x4E0D;&#x91CD;&#x590D;&#x5730;&#x8FDB;&#x884C;&#x4E0B;&#x53BB;&#x5462;&#xFF1F;&#x4E0D;&#x662F;happy number&#x7684;&#x6570;&#x4E00;&#x5B9A;&#x4F1A;&#x5FAA;&#x73AF;&#x91CD;&#x590D;&#x4E48;&#xFF1F;</p>
<p>&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5047;&#x8BBE;&#xFF0C;&#x4E0D;&#x662F;happy number&#x7684;&#x6570;&#x4F1A;&#x65E0;&#x9650;&#x4E0B;&#x53BB;&#xFF0C;&#x4F46;&#x662F;&#x6240;&#x6709;&#x7684;&#x7ED3;&#x679C;&#x53EA;&#x53EF;&#x80FD;&#x5728;&#xFF08;2&#xFF0C;N]&#x4E2D;&#xFF0C;&#x8FD9;&#x91CC;N&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x9650;&#x5B9E;&#x6570;&#x3002;&#x5982;&#x679C;&#x65E0;&#x9650;&#x4EA7;&#x751F;&#x7ED3;&#x679C;&#xFF0C;&#x90A3;&#x603B;&#x6709;&#x4E00;&#x4E2A;&#x65F6;&#x95F4;&#x70B9;&#x4F1A;&#x51FA;&#x73B0;&#x91CD;&#x590D;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;loop&#x3002;</p>
<p>&#x6240;&#x4EE5;&#x4E00;&#x65E6;&#x51FA;&#x73B0;&#x4E86;loop&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x505C;&#x6B62;&#xFF0C;&#x53BB;&#x68C0;&#x6D4B;&#x7ED3;&#x679C;&#x662F;&#x4E0D;&#x662F;1&#x3002;</p>
<p><strong>Code:</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def isHappy(self, n):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type n: int</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        numbers = set()</div><div class="line">        while n not in numbers:</div><div class="line">            numbers.add(n)</div><div class="line">            n = sum(int(i)**2 for i in str(n))</div><div class="line">        return n== 1</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 437. Path Sum III]]></title>
      <url>http://yoursite.com/2016/12/30/LeetCode-437-Path-Sum-III/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>Quesition</strong></p>
<p>You are given a binary tree in which each node contains an integer value.</p>
<p>Find the number of paths that sum to a given value.</p>
<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>
<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p>
<p>Example:</p>
<pre><code>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -&gt; 3
2.  5 -&gt; 2 -&gt; 1
3. -3 -&gt; 11
</code></pre>
<p><strong>Explanation:</strong></p>
<p>&#x8FD9;&#x9053;&#x9898;&#x7ED9;&#x4E86;&#x4E8C;&#x53C9;&#x6811;&#x548C;&#x4E00;&#x4E2A;sum&#xFF0C;&#x627E;&#x51FA;&#x6240;&#x6709;&#x5B50;&#x8DEF;&#x5F84;&#x548C;&#x4E3A;sum&#x7684;&#x8DEF;&#x5F84;&#x3002;
&#x76F4;&#x63A5;&#x7528;&#x9012;&#x5F52;&#x65B9;&#x6CD5;&#x505A;&#xFF0C;&#x628A;&#x6BCF;&#x4E2A;&#x70B9;&#x90FD;&#x5F53;&#x505A;&#x7236;&#x8282;&#x70B9;&#x904D;&#x5386;&#xFF0C;&#x627E;&#x5230;&#x5B58;&#x5728;&#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x76F8;&#x52A0;&#x5373;&#x53EF;&#x3002;
&#x76F8;&#x5173;&#x9898;&#x76EE;&#xFF1A;</p>
<ul>
<li>Leetcode 64. Minimum Path Sum</li>
<li>Leetcode 112. Path Sum</li>
<li>Leetcode 113. Path Sum II</li>
</ul>
<p>&#x4E4B;&#x540E;&#x518D;&#x5BF9;&#x8FD9;&#x7C7B;&#x9898;&#x76EE;&#x8FDB;&#x884C;&#x603B;&#x7ED3;&#x3002;</p>
<p><strong>Code</strong>:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def pathSum(self, root, sum):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type root: TreeNode</div><div class="line">        :type sum: int</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line"></div><div class="line">        if not root:</div><div class="line">            return 0</div><div class="line">        return self.pathHelper(root, sum) + self.pathSum(root.left, sum) + self.pathSum(root.right, sum)</div><div class="line"></div><div class="line">    def pathHelper(self, root, sum):</div><div class="line">        result = 0</div><div class="line">        if not root:</div><div class="line">            return 0</div><div class="line">        if (sum == root.val):</div><div class="line">            result += 1</div><div class="line">        result += self.pathHelper(root.left, sum - root.val)</div><div class="line">        result += self.pathHelper(root.right, sum - root.val)</div><div class="line">        return result</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 401. Binary Watch]]></title>
      <url>http://yoursite.com/2016/12/29/LeetCode-401/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><a href="https://leetcode.com/problems/binary-watch/" target="_blank" rel="external"><strong>Question:</strong></a></p>
<p>A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).</p>
<p>Each LED represents a zero or one, with the least significant bit on the right.
For example, the above binary watch reads &quot;3:25&quot;.</p>
<p>Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p>
<p>Example:</p>
<pre><code>Input: n = 1
Return: [&quot;1:00&quot;, &quot;2:00&quot;, &quot;4:00&quot;, &quot;8:00&quot;, &quot;0:01&quot;, &quot;0:02&quot;, &quot;0:04&quot;, &quot;0:08&quot;, &quot;0:16&quot;, &quot;0:32&quot;]
</code></pre>
<p>Note:</p>
<ul>
<li>The order of output does not matter.</li>
<li>The hour must not contain a leading zero, for example &quot;01:00&quot; is not valid, it should be &quot;1:00&quot;.</li>
<li>The minute must be consist of two digits and may contain a leading zero, for example &quot;10:2&quot; is not valid, it should be &quot;10:02&quot;.</li>
</ul>
<p><strong>Explanation</strong></p>
<p>&#x5229;&#x7528;&#x4F4D;&#x8FD0;&#x7B97;&#x5C06;&#x72B6;&#x6001;&#x62C6;&#x5206;&#x4E3A;&#x5C0F;&#x65F6;&#x548C;&#x5206;&#x949F;&#x3002;
&#x679A;&#x4E3E;&#x5C0F;&#x65F6;h&#x548C;&#x5206;&#x949F;m&#xFF0C;&#x7136;&#x540E;&#x5224;&#x65AD;&#x4E8C;&#x8FDB;&#x5236;1&#x7684;&#x4E2A;&#x6570;&#x662F;&#x5426;&#x7B49;&#x4E8E;num</p>
<p><strong>Code</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def readBinaryWatch(self, num):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type num: int</div><div class="line">        :rtype: List[str]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        result = []</div><div class="line">        for h in range(12):</div><div class="line">            for m in range(60):</div><div class="line">                if (bin(h) + bin(m)).count(&apos;1&apos;) == num:</div><div class="line">                    result.append(&apos;%d:%02d&apos; % (h, m))</div><div class="line">        return result</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[天冷该吃火锅]]></title>
      <url>http://yoursite.com/2016/11/22/e5-a4-a9-e5-86-b7-e8-af-a5-e5-90-83-e7-81-ab-e9-94-85/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><embed src="http://www.xiami.com/widget/12753884_1773763930/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"></p>
<p>&#x665A;&#x4E0A;&#xFF0C;&#x7FFB;&#x5230;&#x4E00;&#x7BC7;&#x5199;&#x5317;&#x4EAC;&#x5364;&#x716E;&#x7684;&#x6587;&#x7AE0;&#x3002;15&#x5E74;&#x590F;&#x5929;&#x5728;&#x5317;&#x4EAC;&#xFF0C;&#x4E00;&#x4E2A;&#x59D1;&#x5A18;&#x5E26;&#x6211;&#x53BB;&#x4E86;&#x4E00;&#x4E2A;&#x5357;&#x57CE;&#x7684;&#x80E1;&#x540C;&#x91CC;&#x5403;&#x5364;&#x716E;&#x3002;&#x4E70;&#x5355;&#x7684;&#x4E0D;&#x662F;&#x6211;&#xFF0C;&#x9886;&#x9910;&#x7684;&#x4E5F;&#x4E0D;&#x662F;&#x6211;&#x3002;</p>
<p>&#x5728;&#x5403;&#x5B8C;&#x4E4B;&#x524D;&#x6211;&#x90FD;&#x6CA1;&#x592A;&#x641E;&#x6E05;&#x695A;&#x5230;&#x5E95;&#x5364;&#x716E;&#x91CC;&#x9762;&#x7684;&#x90A3;&#x4E9B;&#x5177;&#x4F53;&#x662F;&#x4EC0;&#x4E48;&#x3002;&#x6211;&#x5728;&#x5F53;&#x65F6;&#x5E38;&#x804A;&#x7684;&#x5FAE;&#x4FE1;&#x7FA4;&#x91CC;&#x8BF4;&#x6211;&#x5728;&#x5403;&#x5364;&#x716E;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x54E5;&#x6765;&#x4E86;&#x4E00;&#x53E5;&#xFF0C;Star&#xFF0C;&#x4F60;&#x5C45;&#x7136;&#x6562;&#x5403;&#x5364;&#x716E;&#x554A;&#xFF1F;&#x5F53;&#x7136;&#x6562;&#x3002;</p>
<p>&#x6211;&#x6709;&#x4EC0;&#x4E48;&#x662F;&#x4E0D;&#x6562;&#x7684;&#x3002;&#x79D1;&#x79D1;&#x3002;</p>
<p>&#x4F46;&#x662F;&#xFF0C;&#x88AB;&#x79D1;&#x666E;&#x5B8C;&#x5364;&#x716E;&#x7684;&#x6784;&#x6210;&#x4EE5;&#x540E;&#xFF0C;&#x6B63;&#x7AD9;&#x5728;&#x4E94;&#x9053;&#x53E3;&#x519C;&#x79D1;&#x9662;&#x7684;&#x90A3;&#x7247;&#x7A3B;&#x7530;&#x524D;&#x7684;&#x6211;&#xFF0C;&#x5DEE;&#x70B9;&#x8FDE;&#x540C;&#x521A;&#x521A;&#x5403;&#x7684;&#x5434;&#x88D5;&#x6CF0;&#x62B9;&#x8336;&#x51B0;&#x6DC7;&#x6DCB;&#x4E00;&#x8D77;&#x5410;&#x51FA;&#x6765;&#x3002;&#x6211;&#x611F;&#x53D7;&#x5230;&#x4E86;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5357;&#x65B9;&#x4EBA;&#x7684;&#x6781;&#x9650;&#x3002;
&#x73B0;&#x5728;&#x60F3;&#x60F3;&#xFF0C;&#x900F;&#x8FC7;&#x73B0;&#x8C61;&#x629B;&#x5F00;&#x5FC3;&#x7406;&#x56E0;&#x7D20;&#xFF0C;&#x6211;&#x627F;&#x8BA4;&#x90A3;&#x662F;&#x597D;&#x5403;&#x7684;&#x3002;&#x522B;&#x5FD8;&#x4E86;&#xFF0C;&#x8981;&#x914D;&#x5317;&#x51B0;&#x6D0B;&#x3002;</p>
<p>&#x5728;&#x5916;&#x9762;&#xFF0C;&#x6700;&#x8106;&#x5F31;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x662F;&#x60F3;&#x5403;&#x800C;&#x4E0D;&#x53EF;&#x5F97;&#x3002;&#x4E4B;&#x524D;&#x60F3;&#x5403;&#x80A0;&#x7C89;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E50;&#x6587;&#x5E26;&#x6211;&#x53BB;&#x4E86;&#x5339;&#x6751;&#x552F;&#x4E00;&#x4E00;&#x5BB6;&#x7684;&#x65E9;&#x8336;&#x5E97;&#xFF0C;&#x53EF;&#x60DC;&#x4E0D;&#x597D;&#x5403;&#x3002;&#x4EE5;&#x524D;&#x5728;&#x6FB3;&#x6D32;&#xFF0C;&#x5E7F;&#x4E1C;&#x4EBA;&#x5230;&#x5904;&#x90FD;&#x6709;&#xFF0C;&#x5728;&#x5C0F;&#x5929;&#x4F7F;&#x548C;&#x56E7;&#x56E7;&#x4E24;&#x4E2A;&#x6F6E;&#x6C55;&#x4EBA;&#x7684;&#x5E26;&#x52A8;&#x4E0B;&#xFF0C;&#x6211;&#x6DF1;&#x6DF1;&#x7231;&#x4E0A;&#x4E86;&#x65E9;&#x8336;&#x3002;&#x867E;&#x997A;&#x7687;&#x8981;&#x6709;&#x6C41;&#x513F;&#x624D;&#x597D;&#x5403;&#xFF0C;&#x871C;&#x6C41;&#x6392;&#x9AA8;&#x8981;&#x719F;&#x900F;&#xFF0C;&#x51E4;&#x722A;&#x8981;&#x7C89;&#x70C2;&#x4E14;&#x5165;&#x5473;&#x3002;&#x5403;&#x5F97;&#x4E0B;&#x5462;&#xFF0C;&#x53EF;&#x4EE5;&#x6765;&#x4E00;&#x4E2A;&#x69B4;&#x83B2;&#x9165;&#xFF0C;&#x53C9;&#x70E7;&#x5305;&#x3002;&#x4E3B;&#x98DF;&#x5F53;&#x7136;&#x662F;&#x5E72;&#x7092;&#x725B;&#x6CB3;&#x6216;&#x8005;&#x9C9C;&#x867E;&#x4E91;&#x541E;&#x9762;&#x5566;&#x3002;&#x53EF;&#x662F;&#x8FD9;&#x91CC;&#x8FDE;&#x4E00;&#x5BB6;&#x50CF;&#x6837;&#x7684;&#x65E9;&#x8336;&#x5E97;&#x90FD;&#x6CA1;&#x6709;&#xFF0C;&#x548C;&#x5C0F;&#x5929;&#x4F7F;&#x4E00;&#x8D77;&#x611F;&#x5230;&#x5FE7;&#x4F24;&#x3002;</p>
<p>&#x6700;&#x8FD1;&#x5929;&#x51B7;&#xFF0C;&#x96EA;&#x5FFD;&#x7136;&#x4E0B;&#x8D77;&#x6765;&#xFF0C;&#x98CE;&#x5C31;&#x5728;&#x6211;&#x5C4B;&#x5B50;&#x7684;&#x5916;&#x9762;&#x547C;&#x547C;&#x5730;&#x522E;&#xFF0C;&#x6709;&#x670B;&#x53CB;&#x6765;&#x5BB6;&#x91CC;&#x5403;&#x706B;&#x9505;&#xFF0C;&#x7A97;&#x5916;&#x96EA;&#x82B1;&#x659C;&#x7740;&#x98D8;&#xFF0C;&#x5C4B;&#x91CC;&#x5374;&#x70ED;&#x6C14;&#x817E;&#x817E;&#x7684;&#x3002;&#x68A6;&#x7476;&#x57CB;&#x5934;&#x5BFB;&#x627E;&#x5979;&#x7684;&#x5E74;&#x7CD5;&#x3002;&#x4E50;&#x4E50;&#x76F4;&#x547C;&#x592A;&#x5E78;&#x798F;&#x4E86;&#x3002;&#x723D;&#x723D;&#x5403;&#x5F97;&#x5FD8;&#x4E86;&#x5979;&#x521A;&#x521A;&#x600E;&#x4E48;&#x4E5F;&#x4FEE;&#x4E0D;&#x597D;&#x7684;bug&#x3002;&#x8FD9;&#x4E2A;&#x65F6;&#x523B;&#xFF0C;&#x6EE1;&#x8DB3;&#x53D8;&#x5F97;&#x5F88;&#x771F;&#x5B9E;&#x3002;&#x6EE1;&#x8DB3;&#x7684;&#xFF0C;&#x662F;&#x4E00;&#x76D2;&#x725B;&#x8089;&#xFF0C;&#x4E00;&#x76D8;&#x6D77;&#x5E26;&#x7ED3;&#xFF0C;&#x4E00;&#x5757;&#x8C46;&#x8150;&#x76AE;&#xFF0C;&#x4E00;&#x888B;&#x9C7C;&#x4E38;&#x5C31;&#x80FD;&#x89E3;&#x51B3;&#x7684;&#x6B32;&#x671B;&#x3002;</p>
<p>&#x5176;&#x5B9E;&#xFF0C;&#x5728;&#x67D0;&#x79CD;&#x610F;&#x4E49;&#x4E0A;&#xFF0C;&#x5BF9;&#x98DF;&#x7269;&#x7684;&#x6B32;&#x671B;&#x53CD;&#x6620;&#x7740;&#x4E00;&#x4E2A;&#x4EBA;&#x7684;&#x7CBE;&#x795E;&#x72B6;&#x6001;&#x3002;&#x7279;&#x522B;&#x7FA1;&#x6155;&#x8FD8;&#x80FD;&#x5BF9;&#x98DF;&#x7269;&#x6000;&#x62B1;100%&#x671F;&#x5F85;&#x7684;&#x4EBA;&#x3002;&#x90A3;&#x4E00;&#x5B9A;&#x662F;&#x70ED;&#x7231;&#x751F;&#x6D3B;&#x7684;&#x4EBA;&#x3002;&#x50CF;&#x6211;&#xFF0C;&#x53EA;&#x6709;&#x60F3;&#x505A;&#x83DC;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x624D;&#x4F1A;&#x89C9;&#x5F97;&#x81EA;&#x5DF1;&#x662F;&#x5BF9;&#x751F;&#x6D3B;&#x62B1;&#x6709;&#x61A7;&#x61AC;&#x7684;&#x3002;</p>
<p>&#x72B6;&#x6001;&#x975E;&#x5E38;&#x5DEE;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x548C;&#x8349;&#x8349;&#x8BA8;&#x8BBA;&#x8FC7;&#xFF0C;&#x5F53;&#x7ECF;&#x5386;&#x7740;&#x65E0;&#x6CD5;&#x81EA;&#x6108;&#x7684;&#x75DB;&#x82E6;&#xFF0C;&#x98DF;&#x7269;&#x8FD9;&#x79CD;&#x65E0;&#x95E8;&#x69DB;&#x3001;&#x4E0D;&#x9700;&#x8981;&#x9AD8;&#x96BE;&#x5EA6;&#x7ADE;&#x4E89;&#x5C31;&#x553E;&#x624B;&#x53EF;&#x5F97;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x662F;&#x6700;&#x4F4E;&#x7A0B;&#x5EA6;&#x7684;&#x6CBB;&#x7597;&#x65B9;&#x5F0F;&#x3002;&#x4F46;&#x968F;&#x7740;&#x5BF9;&#x75DB;&#x82E6;&#x7684;&#x8BA4;&#x77E5;&#x52A0;&#x6DF1;&#xFF0C;&#x5BF9;&#x4E8E;&#x81EA;&#x6211;&#x8C03;&#x8282;&#x7684;&#x8981;&#x6C42;&#x4F1A;&#x8D8A;&#x6765;&#x8D8A;&#x9AD8;&#xFF0C;&#x8D8A;&#x6765;&#x8D8A;&#x53D8;&#x5F97;&#x96BE;&#x4EE5;&#x6EE1;&#x8DB3;&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x201C;&#x5403;&#x4E00;&#x987F;&#x5927;&#x9910;&#x5C31;&#x597D;&#x4E86;&#x201D;&#x8FD9;&#x79CD;&#x89E3;&#x538B;&#x65B9;&#x5F0F;&#x5BF9;&#x6211;&#x4EEC;&#x5E76;&#x4E0D;&#x9002;&#x7528;&#x3002;high&#x70B9;&#x592A;&#x9AD8;&#x5230;&#xFF0C;&#x9700;&#x8981;&#x53BB;&#x8E66;&#x6781;&#xFF0C;&#x5750;&#x8FC7;&#x5C71;&#x8F66;&#xFF0C;&#x542C;live&#xFF0C;&#x559D;&#x9152;&#x624D;&#x80FD;&#x597D;&#x4E00;&#x4E9B;&#x3002;&#x56E0;&#x4E3A;&#x5728;&#x5FC3;&#x91CC;&#xFF0C;&#x77E5;&#x9053;&#x6211;&#x4EEC;&#x7684;&#x95EE;&#x9898;&#x662F;&#x98DF;&#x7269;&#x6240;&#x65E0;&#x6CD5;&#x89E3;&#x51B3;&#x7684;&#xFF0C;&#x6362;&#x8A00;&#x4E4B;&#xFF0C;&#x4E5F;&#x8BB8;&#x672A;&#x6765;&#x662F;&#x4F1A;&#x597D;&#x7684;&#xFF0C;&#x4F1A;&#x6709;&#x77ED;&#x6682;&#x7684;&#x5FEB;&#x4E50;&#x7684;&#xFF0C;&#x4F46;&#x6211;&#x4EEC;&#xFF0C;&#x6211;&#x4EEC;&#x81EA;&#x8EAB;&#x4E0D;&#x4F1A;&#x597D;&#x4E86;&#x3002;&#x5C31;&#x50CF;Monica&#x548C;Rachel&#x8BF4;&#x7684;&#xFF0C;&#x201C;That&apos;s food, not love.&#x201D;&#x3002;&#x4E0D;&#x8FC7;&#x8FD8;&#x597D;&#xFF0C;&#x6700;&#x4E25;&#x91CD;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5D29;&#x6E83;&#x5F97;&#x4E0D;&#x6210;&#x4EBA;&#x5F62;&#xFF0C;&#x4EC0;&#x4E48;&#x4E5F;&#x5E72;&#x4E0D;&#x4E86;&#xFF0C;&#x4E5F;&#x4E0D;&#x81F3;&#x4E8E;&#x6CA1;&#x6709;&#x5BF9;&#x98DF;&#x7269;&#x4E00;&#x70B9;&#x6B32;&#x671B;&#x90FD;&#x6CA1;&#x6709;&#x3002;</p>
<p>&#x5927;&#x4E09;&#x6691;&#x5047;&#xFF0C;&#x4E5D;&#x56DB;&#x548C;&#x6211;&#x6838;&#x5BF9;&#x6291;&#x90C1;&#x75C7;&#x75C7;&#x72B6;&#xFF0C;&#x5FEB;&#x5230;&#x89C9;&#x5F97;&#x6211;&#x53EF;&#x4EE5;&#x5F00;&#x59CB;&#x5403;&#x836F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x201C;&#x5B8C;&#x5168;&#x4E0D;&#x60F3;&#x5403;&#x4E1C;&#x897F;&#x201D;&#x8FD9;&#x4E00;&#x6761;&#x5C31;&#x6253;&#x56DE;&#x4E86;&#x539F;&#x5F62;&#x3002;&#x770B;&#x6765;&#x6CA1;&#x6709;&#x6291;&#x90C1;&#x75C7;&#xFF0C;&#x8FD8;&#x80FD;&#x7B11;&#x7740;&#x6D3B;&#x4E0B;&#x53BB;&#x3002;&#x53EF;&#x80FD;&#xFF0C;&#x98DF;&#x7269;&#x662F;&#x6700;&#x540E;&#x7684;&#x5E95;&#x7EBF;&#x4E86;&#x5427;&#x3002;</p>
<p>&#x53C8;&#x60F3;&#x8D77;&#x5F53;&#x65F6;&#x5E26;&#x6211;&#x53BB;&#x5403;&#x5364;&#x716E;&#x7684;&#x59D1;&#x5A18;&#xFF0C;&#x6211;&#x5176;&#x5B9E;&#x5DF2;&#x7ECF;&#x5FD8;&#x4E86;&#x5979;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x53EA;&#x8BB0;&#x5F97;&#x5979;&#x7684;&#x5FAE;&#x4FE1;&#x5934;&#x50CF;&#x662F;&#x300A;&#x8FD9;&#x4E2A;&#x6740;&#x624B;&#x4E0D;&#x592A;&#x51B7;&#x300B;&#x91CC;&#x5A1C;&#x5854;&#x8389;&#x6CE2;&#x7279;&#x66FC;&#x62FF;&#x67AA;&#x7684;&#x6837;&#x5B50;&#x3002;&#x6211;&#x5F53;&#x65F6;&#x5C31;&#x5728;&#x60F3;&#x554A;&#xFF0C;&#x5927;&#x591A;&#x6570;&#x4EBA;&#xFF0C;20&#x591A;&#x5C81;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x6B7B;&#x4E86;&#xFF0C;&#x4E4B;&#x540E;&#x7684;&#x65E5;&#x5B50;&#x4E0D;&#x8FC7;&#x662F;&#x673A;&#x68B0;&#x5730;&#x91CD;&#x590D;&#x4E4B;&#x524D;&#x7684;&#x65E5;&#x5B50;&#x3002;&#x4F46;&#x5979;&#x8FD8;&#x6CA1;&#x6709;&#xFF0C;&#x5979;&#x5BF9;&#x80E1;&#x540C;&#x6709;&#x70ED;&#x60C5;&#xFF0C;&#x5BF9;&#x7F8E;&#x98DF;&#x6709;&#x70ED;&#x60C5;&#xFF0C;&#x5BF9;&#x964C;&#x751F;&#x4EBA;&#x4E5F;&#x6709;&#x70ED;&#x60C5;&#x3002;&#x771F;&#x597D;&#x3002;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的比较]]></title>
      <url>http://yoursite.com/2016/11/13/java-e4-b8-ad-e7-9a-84-e6-af-94-e8-be-83/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="equals-he-compareto">equals, == &#x548C;compareTo <a href="#equals-he-compareto" class="header-anchor">#</a></h3>
<ul>
<li>== &#x64CD;&#x4F5C;&#x7B26;&#x5E76;&#x4E0D;&#x6D89;&#x53CA;&#x5BF9;&#x8C61;&#x5185;&#x5BB9;&#x7684;&#x6BD4;&#x8F83;&#x3002;</li>
<li>equals &#x6BD4;&#x8F83;&#x7684;&#x662F;reference&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5F15;&#x7528;&#x5185;&#x5BB9;</li>
<li>compareTo():
&#x5728;&#x57FA;&#x672C;&#x6570;&#x636E;&#x4E2D;&#xFF0C;compareTo()&#x662F;&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;Character &#x5BF9;&#x8C61;&#xFF1B;
&#x5728; Boolean&#x4E2D;&#xFF0C;&#x662F;&#x7528;boolean&#x7684;&#x5B9E;&#x4F8B;&#x4E8E;&#x5176;&#x5B83;&#x5B9E;&#x4F8B;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF1B;
&#x5728;String &#x4E2D;&#xFF0C;&#x5219;&#x662F;&#x6309;&#x7167;&#x5B57;&#x5178;&#x987A;&#x5E8F;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF0C;&#x8FD4;&#x56DE;&#x7684;&#x503C;&#x662F;&#x4E00;&#x4E2A;int &#x578B;&#x3002;</li>
</ul>
<p>&lt;pre class=&quot;editor-colors lang-text&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span&gt;&#xA0;&lt;/span&gt;&lt;span class=&quot;meta paragraph text&quot;&gt;&lt;span&gt;String&#xA0;a&#xA0;=&#xA0;&quot;abc&quot;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta paragraph text&quot;&gt;&lt;span&gt;&#xA0;String&#xA0;b&#xA0;=&#xA0;&quot;abc&quot;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;</p>
<pre><code>a == b: **true**
</code></pre>
<p>a.equals(b): <strong>true</strong></p>
<p>a.compareTo(b): ** 0**</p>
<p>&lt;pre class=&quot;editor-colors lang-text&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span&gt;&#xA0;&lt;/span&gt;&lt;span class=&quot;meta paragraph text&quot;&gt;&lt;span&gt;String&#xA0;a&#xA0;=&#xA0;new&#xA0;String(&quot;abc&quot;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta paragraph text&quot;&gt;&lt;span&gt;&#xA0;String&#xA0;b&#xA0;=&#xA0;new&#xA0;String(&quot;abc&quot;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;</p>
<pre><code> a == b: **false**
</code></pre>
<p>&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#xFF0C;&#x5BF9;&#x4E8E;&#x5BF9;&#x8C61;&#x7684;&#x6BD4;&#x8F83;&#x662F;&#x5BF9;&#x5BF9;&#x8C61;&#x5F15;&#x7528;&#x7684;&#x6BD4;&#x8F83;&#x3002;a&#x548C;b&#x7684;&#x5185;&#x5B58;&#x5730;&#x5740;&#x4E0D;&#x540C;&#xFF0C;&#x5BF9;&#x8C61;&#x5F15;&#x7528;&#x4E0D;&#x540C;</p>
<p>a.equals(b): <strong>true</strong></p>
<p>a.compareTo(b): ** 0**</p>
<ul>
<li>&#x5728;&#x7EE7;&#x627F;&#x4E86;Comparabale&#x63A5;&#x53E3;&#x7684;&#x7C7B;&#x4E2D;&#xFF0C;compareTo&#xFF08;&#xFF09;&#x7684;&#x5E94;&#x8BE5;&#x4E0E;euqals&#xFF08;&#xFF09;&#x4E00;&#x81F4;&#xFF0C;&#x6BD4;&#x5982; x.equals(y) == true, &#x5219;
x.compareTo(y) == 0</li>
</ul>
<h3 id="guan-yu-equals-he-hashcode">&#x5173;&#x4E8E;equals&#x548C;hashcode <a href="#guan-yu-equals-he-hashcode" class="header-anchor">#</a></h3>
<p>&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;equals&#x867D;&#x7136;&#x8BF4;&#x662F;&#x8868;&#x9762;&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x4E00;&#x81F4;&#xFF0C;&#x4F46;&#x662F;&#x5B9E;&#x9645;&#x7684;&#x539F;&#x7406;&#x662F;&#x4E8E;hashcode&#xFF08;&#xFF09;&#x65B9;&#x6CD5;&#x6709;&#x5173;&#x7684;&#x3002;
&#x6BD4;&#x5982;&#x4E0A;&#x4F8B;&#x4E2D;&#x7684;String&#x7684;&#x6BD4;&#x8F83;&#xFF0C;&#x662F;&#x56E0;&#x4E3A;String&#x91CD;&#x5199;&#x4E86;hashcode&#xFF08;&#xFF09;&#x548C;equals&#xFF08;&#xFF09;
&#x65B9;&#x6CD5;&#x3002;</p>
<ul>
<li>
<p>&#x5982;&#x679C;x.equals(y)&#x8FD4;&#x56DE;&#x201C;true&#x201D;&#xFF0C;&#x90A3;&#x4E48;x&#x548C;y&#x7684;hashCode()&#x5FC5;&#x987B;&#x76F8;&#x7B49;&#x3002;</p>
</li>
<li>
<p>&#x5982;&#x679C;x.equals(y)&#x8FD4;&#x56DE;&#x201C;false&#x201D;&#xFF0C;&#x90A3;&#x4E48;x&#x548C;y&#x7684;hashCode()&#x6709;&#x53EF;&#x80FD;&#x76F8;&#x7B49;&#xFF0C;&#x4E5F;&#x6709;&#x53EF;&#x80FD;&#x4E0D;&#x7B49;&#x3002;</p>
</li>
<li>
<p>&#x4EFB;&#x4F55;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;x.equals(null)&#xFF0C;&#x6C38;&#x8FDC;&#x8FD4;&#x56DE;&#x662F;&#x201C;false&#x201D;&#xFF1B;x.equals(&#x548C;x&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x5BF9;&#x8C61;)&#x6C38;&#x8FDC;&#x8FD4;&#x56DE;&#x662F;&#x201C;false&#x201D;&#x3002;</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning 复习（四）：概念学习]]></title>
      <url>http://yoursite.com/2016/10/19/machine-learning-e5-a4-8d-e4-b9-a0-ef-bc-88-e5-9b-9b-ef-bc-89-ef-bc-9a-e6-a6-82-e5-bf-b5-e5-ad-a6-e4-b9-a0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="gai-nian-xue-xi-concept-learning">&#x6982;&#x5FF5;&#x5B66;&#x4E60;&#xFF08;Concept Learning&#xFF09; <a href="#gai-nian-xue-xi-concept-learning" class="header-anchor">#</a></h3>
<p>&#x6982;&#x5FF5;&#x5B66;&#x4E60;&#x662F;&#x6307;&#x4ECE;&#x67D0;&#x4E2A;&#x5E03;&#x5C14;&#x51FD;&#x6570;&#x7684;&#x8F93;&#x5165;&#x8F93;&#x51FA;&#x8BAD;&#x7EC3;&#x4E2D;&#x63A8;&#x65AD;&#x51FA;&#x8BE5;&#x5E03;&#x5C14;&#x51FD;&#x6570;&#x3002;</p>
<h5 id="li-zi">&#x4F8B;&#x5B50; <a href="#li-zi" class="header-anchor">#</a></h5>
<p>&#x4E3A;&#x4E86;&#x66F4;&#x597D;&#x5730;&#x7406;&#x89E3;&#x6982;&#x5FF5;&#x5B66;&#x4E60;&#xFF0C;&#x6211;&#x4EEC;&#x4ECE;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7ECF;&#x5178;&#x6559;&#x6750;&#x300A;Machine learning&#x300B;&#xFF08;Tom Mitchell&#x8457;&#xFF09;&#x4E2D;&#x7684;&#x7ECF;&#x5178;&#x4F8B;&#x5B50;&#x6765;&#x89E3;&#x91CA;&#xFF1A;
<img src="http://i.imgur.com/0SnpShX.png" alt=""></p>
<p>&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x5C5E;&#x6027;EnjoySport&#x8868;&#x793A;&#x6700;&#x7EC8;&#x662F;&#x5426;&#x8FD0;&#x52A8;&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x4EFB;&#x52A1;&#x7684;&#x76EE;&#x6807;&#x662F;&#x6839;&#x636E;sky&#xFF0C;humidity&#x7B49;&#x7684;&#x5C5E;&#x6027;&#x6765;&#x9884;&#x6D4B;&#x51FA;EnjoySport&#x7684;&#x503C;&#x3002;</p>
<ul>
<li>
<p>&#x5C5E;&#x6027;&#x7684;&#x53D6;&#x503C;&#x53EF;&#x4EE5;&#x4E3A;&#xFF1A;</p>
<pre><code>*   &#xFF1F;&#xFF1A;&#x8868;&#x793A;&#x53EF;&#x4EE5;&#x63A5;&#x53D7;&#x4EFB;&#x610F;&#x503C;
</code></pre>
<ul>
<li>&#x660E;&#x786E;&#x6307;&#x5B9A;&#x5C5E;&#x6027;&#x503C;&#xFF08;&#x5982;warm&#xFF09;</li>
<li>&#x4E0D;&#x5141;&#x8BB8;&#x4EFB;&#x4F55;&#x503C;&#xFF1A;<img src="http://i.imgur.com/Sy3EXiV.png" alt=""></li>
</ul>
</li>
</ul>
<p>&#x6240;&#x4EE5;&#x5BF9;&#x4E8E;EnjoySport&#x8FD9;&#x4E2A;&#x4EFB;&#x52A1;&#xFF1A;</p>
<ul>
<li>
<p>&#x5DF2;&#x77E5;&#xFF1A;</p>
<ul>
<li>
<p>&#x5B9E;&#x4F8B;&#x96C6; X&#xFF1A;&#x53EF;&#x80FD;&#x7684;&#x65E5;&#x5B50;&#xFF0C;&#x6BCF;&#x4E2A;&#x65E5;&#x5B50;&#x90FD;&#x6709;&#x5982;&#x4E0B;&#x5C5E;&#x6027;&#x63CF;&#x8FF0;&#xFF1A;</p>
<pre><code>    *   Sky
</code></pre>
<ul>
<li>Temp</li>
<li>Humid</li>
<li>Wind</li>
<li>Water</li>
<li>Forecast</li>
</ul>
</li>
<li>
<p>&#x5047;&#x8BBE;&#x96C6;&#xFF1A; H&#x3002;&#x6BCF;&#x4E2A;&#x5047;&#x8BBE;&#x96C6;&#x90FD;&#x6709;6&#x4E2A;&#x5C5E;&#x6027;&#x7684;&#x4EFB;&#x610F;&#x53D6;&#x503C;&#x3002;</p>
</li>
<li>
<p>&#x76EE;&#x6807;&#x6982;&#x5FF5;c&#xFF1A;EnjoySport&#xFF1A; <img src="http://i.imgur.com/uGkb5OB.png" alt=""></p>
</li>
<li>
<p>&#x8BAD;&#x7EC3;&#x5B9E;&#x4F8B; D&#xFF1A; +/-&#x7684;&#x5173;&#x4E8E;&#x76EE;&#x6807;&#x6982;&#x5FF5;&#x7684;&#x4F8B;&#x5B50;&#xFF1A;
<img src="http://i.imgur.com/nOw2ffI.png" alt=""></p>
</li>
<li>
<p>&#x5F52;&#x7EB3;&#x5B66;&#x4E60;&#x5047;&#x8BBE;&#xFF1A; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5047;&#x8BBE;&#x80FD;&#x591F;&#x5728;&#x8BAD;&#x7EC3;&#x96C6;&#x6837;&#x672C;&#x4E2D;&#x5F88;&#x597D;&#x5730;&#x903C;&#x8FD1;&#x76EE;&#x6807;&#x51FD;&#x6570;&#xFF0C;&#x5C31;&#x80FD;&#x5728;&#x672A;&#x89C1;&#x5B9E;&#x4F8B;&#x4E2D;&#x5F88;&#x597D;&#x5730;&#x903C;&#x8FD1;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x3002;
<img src="http://i.imgur.com/vDaItGC.png" alt=""></p>
</li>
<li>
<p>Find-S &#x7B97;&#x6CD5;&#xFF1A;</p>
</li>
<li>
<p>&#x521D;&#x59CB;&#x5316;H&#x5230;&#x6700;&#x7279;&#x522B;&#x7684;&#x90A3;&#x4E2A;&#x5047;&#x8BBE;</p>
</li>
<li>
<p>&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x8BAD;&#x7EC3;&#x5B9E;&#x4F8B;X&#x4E2D;&#x7684;&#x7EA6;&#x675F;ai&#xFF1A;</p>
<pre><code>    *   &#x5982;&#x679C;ai&#x5DF2;&#x7ECF;&#x7B26;&#x5408;&#x5047;&#x8BBE;&#xFF0C;&#x4EC0;&#x4E48;&#x4E5F;&#x4E0D;&#x505A;&#x3002;
</code></pre>
<ul>
<li>
<p>&#x5426;&#x5219;&#xFF0C;&#x7528;&#x4E00;&#x4E2A;&#x66F4;&#x52A0;general&#x7684;&#x7EA6;&#x675F;&#x6765;&#x4EE3;&#x66FF;H&#x4E2D;&#x7684;ai</p>
</li>
<li>
<p>&#x8F93;&#x51FA;&#x6700;&#x7EC8;&#x7684;&#x5047;&#x8BBE; H
<img src="http://i.imgur.com/hMNrVw1.png" alt=""></p>
</li>
</ul>
</li>
<li>
<p>Find-S &#x7B97;&#x6CD5;&#x4ECD;&#x7136;&#x5B58;&#x5728;&#x4E00;&#x4E9B;&#x6CA1;&#x6709;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;&#xFF1A;</p>
<pre><code>*   &#x96BE;&#x4EE5;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5BF9;&#x6982;&#x5FF5;&#x8FDB;&#x884C;&#x4E86;&#x5B66;&#x4E60;
</code></pre>
<ul>
<li>
<p>&#x662F;&#x5426;&#x80FD;&#x5904;&#x7406;&#x4E0D;&#x4E00;&#x81F4;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#xFF1A;&#x5728;&#x5B9E;&#x9645;&#x4E2D;&#xFF0C;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x5E38;&#x5E38;&#x51FA;&#x73B0;&#x9519;&#x8BEF;&#x3002;&#x8FD9;&#x79CD;&#x4E0D;&#x4E00;&#x81F4;&#x53EF;&#x80FD;&#x4F1A;&#x4E25;&#x91CD;&#x7834;&#x574F;Find-S&#x7B97;&#x6CD5;&#xFF0C;&#x56E0;&#x4E3A;Find-S&#x7B97;&#x6CD5;&#x5FFD;&#x7565;&#x4E86;&#x6240;&#x6709;&#x7684;&#x53CD;&#x4F8B;&#x3002;&#x6211;&#x4EEC;&#x671F;&#x5F85;&#x7684;&#x7B97;&#x6CD5;&#x81F3;&#x5C11;&#x8981;&#x80FD;&#x68C0;&#x6D4B;&#x51FA;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x7684;&#x4E0D;&#x4E00;&#x81F4;&#x6027;&#xFF0C;&#x5E76;&#x80FD;&#x5BB9;&#x5FCD;&#x8FD9;&#x6837;&#x7684;&#x9519;&#x8BEF;&#x3002;</p>
</li>
<li>
<p>&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x7528;&#x7279;&#x6B8A;&#x5047;&#x8BBE;&#xFF1F;&#x5982;&#x679C;&#x6709;&#x591A;&#x4E2A;&#xFF0C;&#x6B64;&#x7B97;&#x6CD5;&#x53EA;&#x80FD;&#x627E;&#x5230;&#x6700;&#x7279;&#x6B8A;&#x7684;&#x90A3;&#x4E2A;&#x3002;&#x4E3A;&#x4EC0;&#x4E48;&#x6211;&#x4EEC;&#x4E0D;&#x7528;&#x6700;&#x4E00;&#x822C;&#x7684;&#x5047;&#x8BBE;&#x5462;&#xFF0C;&#x6216;&#x8005;&#x4E24;&#x8005;&#x4E4B;&#x95F4;&#x7684;&#x5047;&#x8BBE;&#x3002;</p>
</li>
<li>
<p>&#x5982;&#x679C;&#x6709;&#x591A;&#x4E2A;&#x6781;&#x5927;&#x7279;&#x6B8A;&#x5047;&#x8BBE;&#xFF1F;&#x5728;&#x5176;&#x4ED6;&#x4E00;&#x4E9B;&#x5047;&#x8BBE;&#x7A7A;&#x95F4;&#xFF08;&#x540E;&#x9762;&#x4F1A;&#x8BA8;&#x8BBA;&#x5230;&#xFF09;&#x4E2D;&#xFF0C;&#x53EF;&#x80FD;&#x6709;&#x591A;&#x4E2A;&#x6781;&#x5927;&#x7279;&#x6B8A;&#x5047;&#x8BBE;&#x3002;</p>
</li>
<li>
<p>&#x53D8;&#x5F62;&#x7A7A;&#x95F4;&#xFF08;Version Spaces):
&#x6240;&#x6709;&#x548C;&#x6570;&#x636E;&#x96C6;&#x4EE5;&#x53CA;&#x5047;&#x8BBE;&#x8868;&#x793A;&#x5BF9;&#x5E94;&#x7684;&#x5047;&#x8BBE;&#x7684;&#x96C6;&#x5408;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x5728;Find-S&#x4E2D;&#xFF0C;&#x6700;&#x7EC8;&#x8F93;&#x51FA;&#x7684;&#x5047;&#x8BBE;&#x53EF;&#x80FD;&#x53EA;&#x662F;H&#x4E2D;&#x4E0E;&#x8BAD;&#x7EC3;&#x6837;&#x4F8B;&#x4E00;&#x81F4;&#x7684;&#x591A;&#x4E2A;&#x5047;&#x8BBE;&#x4E4B;&#x4E00;&#x3002;</p>
</li>
</ul>
</li>
<li>
<p>&#x5217;&#x8868;&#x540E;&#x6D88;&#x9664;&#x7B97;&#x6CD5;&#xFF08;List-Then-Eliminate&#xFF09;&#xFF1A;</p>
<pre><code>*   &#x5148;&#x628A;&#x53D8;&#x5F62;&#x7A7A;&#x95F4;&#x8BBE;&#x7F6E;&#x4E3A;&#x6240;&#x6709;&#x5047;&#x8BBE;&#x7684;&#x5217;&#x8868;
</code></pre>
<ul>
<li>
<p>&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x4F8B;&#xFF0C;&#x6211;&#x4EEC;&#x6392;&#x9664;&#x5047;&#x8BBE;&#x4E2D;&#x548C;&#x6837;&#x4F8B;&#x4E0D;&#x7B26;&#x5408;&#x7684;&#x60C5;&#x51B5;&#x3002;</p>
</li>
<li>
<p>&#x8F93;&#x51FA;&#x53D8;&#x5F62;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x5047;&#x8BBE;&#x3002;</p>
</li>
<li>
<p>&#x4E00;&#x822C;&#x8FB9;&#x754C;&#xFF08;General boundary&#xFF09;&#xFF1A; &#x8868;&#x793A;&#x5728;H&#x4E2D;&#x4E0E;D&#x76F8;&#x4E00;&#x81F4;&#x7684;&#x6781;&#x5927;&#x4E00;&#x822C;&#x6210;&#x5458;&#x7684;&#x96C6;&#x5408;&#x3002;</p>
</li>
</ul>
</li>
<li>
<p>&#x7279;&#x6B8A;&#x8FB9;&#x754C;&#xFF08;Specific Boundary&#xFF09;&#xFF1A;&#x8868;&#x793A;&#x5728;H&#x4E2D;&#x4E0E;D&#x76F8;&#x4E00;&#x81F4;&#x7684;&#x6781;&#x5927;&#x7279;&#x6B8A;&#x6210;&#x5458;&#x7684;&#x96C6;&#x5408;&#x3002;</p>
</li>
<li>
<p>&#x6240;&#x6709;&#x7684;&#x53D8;&#x5F62;&#x7A7A;&#x95F4;&#x90FD;&#x5728;&#x8FD9;&#x4E24;&#x4E2A;&#x8FB9;&#x754C;&#x4E4B;&#x95F4;&#xFF1A;
<img src="http://i.imgur.com/n0uBYdt.png" alt=""></p>
</li>
</ul>
</li>
</ul>
<h3 id="hui-dao-enjoy-sport-de-li-zi">&#x56DE;&#x5230;enjoy sport&#x7684;&#x4F8B;&#x5B50; <a href="#hui-dao-enjoy-sport-de-li-zi" class="header-anchor">#</a></h3>
<p><img src="http://i.imgur.com/0SnpShX.png" alt="">
&#x6211;&#x4EEC;&#x6765;&#x68B3;&#x7406;&#x4E00;&#x4E0B;&#xFF1A;</p>
<ul>
<li>&#x8F93;&#x5165;&#x7A7A;&#x95F4;&#xFF1A; X={sky(cloudy/sunny/rainy),Temp=(warm/cold),Humid=(Normal/high),Wind=(Strong/weak),water=(warm/cool),forecast=(same/change)}
&#x6240;&#x4EE5;&#x4E00;&#x5171;&#x662F; = 3_2_2_2_2*2 =96</li>
<li>&#x6982;&#x5FF5;&#x7A7A;&#x95F4;&#xFF08;Concept Space&#xFF09;&#xFF1A;
&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x8F93;&#x5165;&#xFF0C;&#x90FD;&#x6709;&#x6B63;&#x4F8B;&#x53CD;&#x4F8B;&#x4E24;&#x79CD;&#x53EF;&#x80FD;&#x7684;&#x6982;&#x5FF5;&#x3002;
&#x6240;&#x4EE5;&#x6982;&#x5FF5;&#x7A7A;&#x95F4;&#x4E3A;2^96</li>
<li>&#x5047;&#x8BBE;&#x7A7A;&#x95F4;&#xFF1A;&#x628A;&#x6BCF;&#x79CD;&#x60C5;&#x51B5;&#x5305;&#x542B;all&#x8FD9;&#x4E2A;&#x9009;&#x9879;&#xFF0C;&#x76F8;&#x4E58;=4_3_3_3_3*3+1=973.&#x8FD9;&#x91CC;&#x52A0;&#x7684;1&#x8868;&#x793A;&#x7684;&#x662F;&#x5168;&#x5426;&#x7684;&#x60C5;&#x51B5;&#x3002;</li>
</ul>
<h3 id="gui-na-pian-zhi-inductive-bias">&#x5F52;&#x7EB3;&#x504F;&#x7F6E;(Inductive Bias) <a href="#gui-na-pian-zhi-inductive-bias" class="header-anchor">#</a></h3>
<p>&#x673A;&#x5668;&#x5B66;&#x4E60;&#x8BD5;&#x56FE;&#x53BB;&#x5EFA;&#x9020;&#x4E00;&#x4E2A;&#x53EF;&#x4EE5;&#x5B66;&#x4E60;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x7528;&#x6765;&#x9884;&#x6D4B;&#x67D0;&#x4E2A;&#x76EE;&#x6807;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x8981;&#x8FBE;&#x5230;&#x6B64;&#x76EE;&#x7684;&#xFF0C;&#x8981;&#x7ED9;&#x4E8E;&#x5B66;&#x4E60;&#x7B97;&#x6CD5;&#x4E00;&#x4E9B;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#xFF0C;&#x6837;&#x672C;&#x8BF4;&#x660E;&#x8F93;&#x5165;&#x4E0E;&#x8F93;&#x51FA;&#x4E4B;&#x95F4;&#x7684;&#x9884;&#x671F;&#x5173;&#x7CFB;&#x3002;&#x7136;&#x540E;&#x5047;&#x8BBE;&#x5B66;&#x4E60;&#x5668;&#x5728;&#x9884;&#x6D4B;&#x4E2D;&#x903C;&#x8FD1;&#x6B63;&#x786E;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x5176;&#x4E2D;&#x5305;&#x62EC;&#x5728;&#x8BAD;&#x7EC3;&#x4E2D;&#x672A;&#x51FA;&#x73B0;&#x7684;&#x6837;&#x672C;&#x3002;&#x65E2;&#x7136;&#x672A;&#x77E5;&#x72B6;&#x51B5;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x610F;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x82E5;&#x6CA1;&#x6709;&#x5176;&#x5B83;&#x989D;&#x5916;&#x7684;&#x5047;&#x8BBE;&#xFF0C;&#x8FD9;&#x4EFB;&#x52A1;&#x5C31;&#x65E0;&#x6CD5;&#x89E3;&#x51B3;&#x3002;&#x8FD9;&#x79CD;&#x5173;&#x4E8E;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x7684;&#x5FC5;&#x8981;&#x5047;&#x8BBE;&#x5C31;&#x79F0;&#x4E3A;&#x5F52;&#x7EB3;&#x504F;&#x7F6E;&#xFF08;Mitchell, 1980; desJardins and Gordon, 1995&#xFF09;&#x3002;</p>
<p>&#x53C2;&#x8003;&#xFF1A;
&#x300A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x300B;&#xFF08;Tom Mitchell&#xFF09;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning 复习（零）：机器学习基本介绍]]></title>
      <url>http://yoursite.com/2016/10/18/machine-learning-e5-a4-8d-e4-b9-a0-ef-bc-880-ef-bc-89-ef-bc-9a-e6-9c-ba-e5-99-a8-e5-ad-a6-e4-b9-a0-e5-9f-ba-e6-9c-ac-e4-bb-8b-e7-bb-8d/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x673A;&#x5668;&#x5B66;&#x4E60;&#x662F;&#x57FA;&#x4E8E;&#x6570;&#x636E;&#x7684;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#xFF08;1980s-&#x73B0;&#x5728;&#xFF09;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x80FD;&#x591F;&#x901A;&#x8FC7;&#x5B66;&#x4E60;&#x4F8B;&#x5B50;&#x6765;&#x5B8C;&#x6210;&#x4EFB;&#x52A1;&#x3002;</p>
<h3 id="ji-qi-xue-xi-kuang-jia">&#x673A;&#x5668;&#x5B66;&#x4E60;&#x6846;&#x67B6; <a href="#ji-qi-xue-xi-kuang-jia" class="header-anchor">#</a></h3>
<ul>
<li>
<p>&#x901A;&#x5E38;&#x662F;&#x6210;&#x5BF9;&#x51FA;&#x73B0;&#xFF08;Input-Correct_Output&#xFF09;</p>
</li>
<li>
<p>&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x5E38;&#x89C1;&#x60C5;&#x51B5;&#xFF1A;</p>
<pre><code>*   **&#x5206;&#x7C7B;(Classification)**&#xFF1A; &#x533B;&#x7597;&#x8BCA;&#x65AD;&#xFF1A; &#x4ECE;&#x4E00;&#x4E2A;&#x8F93;&#x51FA;&#x6307;&#x5411;&#x4E00;&#x4E9B;&#x5206;&#x7C7B;&#xFF1B;*   **&#x56DE;&#x5F52;&#xFF08;Regression&#xFF09;**&#xFF1A;&#x9884;&#x6D4B;&#x660E;&#x5929;&#x7684;&#x5929;&#x6C14;&#xFF1A;&#x4ECE;&#x4E00;&#x4E2A;&#x8F93;&#x51FA;&#x5230;&#x4E00;&#x4E2A;&#x6570;&#x5B57;
</code></pre>
<ul>
<li><strong>&#x903B;&#x8F91;&#x56DE;&#x5F52;&#xFF08;Logistic Regression&#xFF09;</strong>: &#x5B58;&#x6D3B;&#x51E0;&#x7387;&#xFF1A;&#x4ECE;&#x4E00;&#x4E2A;&#x8F93;&#x51FA;&#x5230;&#x4E00;&#x4E2A;&#x53EF;&#x80FD;&#x6027;</li>
</ul>
</li>
</ul>
<h3 id="ru-he-jie-jue-yi-ge-ji-qi-xue-xi-de-wen-ti">&#x5982;&#x4F55;&#x89E3;&#x51B3;&#x4E00;&#x4E2A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x95EE;&#x9898; <a href="#ru-he-jie-jue-yi-ge-ji-qi-xue-xi-de-wen-ti" class="header-anchor">#</a></h3>
<ul>
<li>&#x5B9A;&#x4E49;&#x4F60;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x8003;&#x8651;&#x4F60;&#x7684;&#x76EE;&#x6807;&#xFF0C;&#x6BD4;&#x5982;&#x662F;&#x8981;&#x51B3;&#x5B9A;&#x662F;&#x5426;&#x5141;&#x8BB8;&#x8D37;&#x6B3E;</li>
<li>&#x8003;&#x8651;&#x5B9E;&#x9645;&#x60C5;&#x51B5;&#xFF0C;&#x6BD4;&#x5982;&#x4F60;&#x6709;&#x591A;&#x5C11;&#x6570;&#x636E;&#xFF0C;&#x8981;&#x82B1;&#x591A;&#x5C11;&#x65F6;&#x95F4;&#x548C;&#x52AA;&#x529B;</li>
<li>&#x8003;&#x8651;&#x8F93;&#x51FA;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x662F;&#x6570;&#x5B57;&#x8FD8;&#x662F;&#x5206;&#x7C7B;&#xFF0C;&#x662F;&#x53EF;&#x80FD;&#x6027;&#x8FD8;&#x662F;&#x4E00;&#x4E2A;&#x8BA1;&#x5212;</li>
<li>&#x9009;&#x62E9;&#x8861;&#x91CF;&#x8868;&#x73B0;&#x7684;&#x6807;&#x51C6;&#xFF0C;&#x6BD4;&#x5982;&#x635F;&#x5931;&#x51FD;&#x6570;&#x6216;&#x9519;&#x8BEF;&#x7387;</li>
<li>&#x9009;&#x62E9;&#x8F93;&#x5165;&#x7684;&#x5F62;&#x5F0F;</li>
<li>&#x9009;&#x62E9;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#xFF08;&#x5047;&#x8BBE;&#x7A7A;&#x95F4;&#xFF09;</li>
<li>&#x9009;&#x62E9;&#x6216;&#x8005;&#x8BBE;&#x8BA1;&#x4E00;&#x79CD;&#x5B66;&#x4E60;&#x7B97;&#x6CD5;</li>
</ul>
<p><img src="http://i.imgur.com/13KMImC.png" alt=""></p>
<h3 id="ji-qi-xue-xi-he-tong-ji-de-guan-xi">&#x673A;&#x5668;&#x5B66;&#x4E60;&#x548C;&#x7EDF;&#x8BA1;&#x7684;&#x5173;&#x7CFB; <a href="#ji-qi-xue-xi-he-tong-ji-de-guan-xi" class="header-anchor">#</a></h3>
<p>&#x4ECE;20&#x4E16;&#x7EAA;90&#x5E74;&#x4EE3;&#x4E2D;&#xFF0C;&#x4EBA;&#x4EEC;&#x5F00;&#x59CB;&#x6162;&#x6162;&#x4E86;&#x89E3;&#x7EDF;&#x8BA1;&#x548C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x5173;&#x7CFB;&#x3002;</p>
<ul>
<li>
<p>&#x7EDF;&#x8BA1;&#xFF1A;</p>
<pre><code>*   &#x6570;&#x5B66;&#x7684;&#x5206;&#x652F;
</code></pre>
<ul>
<li>&#x66F4;&#x591A;&#x8003;&#x8651;&#x662F;&#x5426;&#x6B63;&#x786E;</li>
<li>&#x4E0D;&#x592A;&#x8003;&#x8651;&#x8BA1;&#x7B97;&#x7684;&#x590D;&#x6742;&#x6027;</li>
</ul>
</li>
<li>
<p>&#x673A;&#x5668;&#x5B66;&#x4E60;&#xFF1A;</p>
<pre><code>*   &#x4FE1;&#x606F;&#x6280;&#x672F;&#x6216;&#x8005;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x7684;&#x5206;&#x652F;
</code></pre>
<ul>
<li>&#x66F4;&#x770B;&#x91CD;&#x662F;&#x5426;&#x80FD;&#x5728;&#x5B9E;&#x9645;&#x4E2D;&#x8FD0;&#x7528;</li>
<li>&#x4E0D;&#x592A;&#x8003;&#x8651;&#x7EDF;&#x8BA1;&#x539F;&#x7406;</li>
<li>&#x5982;&#x4ECA;&#xFF0C;&#x4E24;&#x8005;&#x5DF2;&#x7ECF;&#x6709;&#x6548;&#x7ED3;&#x5408;&#x4E86;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E5F;&#x5E38;&#x5E38;&#x79F0;&#x4E3A;&#x201C;&#x7EDF;&#x8BA1;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x201D;&#x3002;</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning 复习（二）：信息论]]></title>
      <url>http://yoursite.com/2016/10/18/machine-learning-e5-a4-8d-e4-b9-a0-ef-bc-88-e4-ba-8c-ef-bc-89-ef-bc-9a-e4-bf-a1-e6-81-af-e8-ae-ba/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="informaiton">Informaiton <a href="#informaiton" class="header-anchor">#</a></h3>
<ul>
<li>&#x4FE1;&#x606F; &#xFF01;= &#x77E5;&#x8BC6;</li>
<li>&#x4FE1;&#x606F;&#x7528;&#x6765;&#x51CF;&#x5C11;&#x4E0D;&#x786E;&#x5B9A;&#x6027;</li>
<li>&#x5F53;&#x6211;&#x4EEC;&#x5F97;&#x77E5;E&#x4E8B;&#x4EF6;&#x53D1;&#x751F;&#xFF0C;&#x610F;&#x5473;&#x7740;&#x6211;&#x4EEC;&#x5F97;&#x5230;&#x4E86;</li>
</ul>
<p><img src="http://i.imgur.com/d6puw09.png" alt=""></p>
<p>bits&#x7684;&#x4FE1;&#x606F;&#x3002;</p>
<pre><code>*   &#x5176;&#x4E2D;log&#x7684;&#x5E95;&#x6570;&#x5E76;&#x4E0D;&#x91CD;&#x8981;&#xFF0C;&#x6211;&#x4EEC;&#x5047;&#x8BBE;&#x4E3A;2.
*   &#x8FD9;&#x4E5F;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x8FD9;&#x4E2A;&#x8868;&#x793A;&#x4E86;&#x4E8B;&#x4EF6;E&#x7684;&#x201C;&#x60CA;&#x559C;&#x201D;&#x6570;&#x91CF;&#x3002;
*   &#x4F8B;&#x5982;&#x629B;&#x4E00;&#x679A;&#x786C;&#x5E01;&#x5F97;&#x5230;&#x7684;&#x4FE1;&#x606F;&#x662F;&#xFF1A;![](http://i.imgur.com/xCAfm06.png)
*   &#x629B;&#x4E00;&#x679A;&#x9AB0;&#x5B50;&#x5F97;&#x5230;&#x7684;&#x4FE1;&#x606F;&#x662F;&#xFF1A;
</code></pre>
<p><img src="http://i.imgur.com/3qhzEa5.png" alt=""></p>
<ul>
<li>&#x4FE1;&#x606F;&#x71B5;&#xFF08;Entropy&#xFF09;&#x7528;&#x6765;&#x5EA6;&#x91CF;&#x968F;&#x673A;&#x53D8;&#x91CF;&#x7684;&#x4E0D;&#x786E;&#x5B9A;&#x6027;<img src="http://i.imgur.com/vhNudZf.png" alt=""></li>
</ul>
<p><img src="http://i.imgur.com/hMmPF6t.png" alt=""></p>
<p>&lt;pre class=&quot;editor-colors lang-text&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta bullet-point star text&quot;&gt;&lt;span&gt;&#xA0;&lt;/span&gt;&lt;span class=&quot;punctuation definition item text&quot;&gt;&lt;span&gt;<em>&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA0;&#x4EE3;&#x8868;&#x7684;&#x662F;&#x89C2;&#x5BDF;S&#x4E8B;&#x4EF6;&#x6765;&#x6E90;&#x6240;&#x80FD;&#x5F97;&#x5230;&#x7684;&#x5E73;&#x5747;&#x4FE1;&#x606F;&#x91CF;&#x3002;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta bullet-point star text&quot;&gt;&lt;span&gt;&#xA0;&lt;/span&gt;&lt;span class=&quot;punctuation definition item text&quot;&gt;&lt;span&gt;</em>&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA0;&#x4EE3;&#x8868;&#x7684;&#x662F;&#x89C2;&#x5BDF;&#x4E00;&#x4E2A;&#x7279;&#x5F81;&#x6240;&#x5F97;&#x5230;&#x7684;&#x5E73;&#x5747;&#x201C;&#x60CA;&#x559C;&#x201D;&#x91CF;&#x3002;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta bullet-point star text&quot;&gt;&lt;span&gt;&#xA0;&lt;/span&gt;&lt;span class=&quot;punctuation definition item text&quot;&gt;&lt;span&gt;<em>&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA0;&#x5728;&#x89C2;&#x5BDF;&#x4E00;&#x4E2A;&#x7279;&#x5F81;&#x4E4B;&#x524D;&#x7684;&#x4E0D;&#x786E;&#x5B9A;&#x6027;&#x3002;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&lt;span class=&quot;meta bullet-point star text&quot;&gt;&lt;span&gt;&#xA0;&lt;/span&gt;&lt;span class=&quot;punctuation definition item text&quot;&gt;&lt;span&gt;</em>&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&#xA0;&#x6839;&#x636E;Shannon&#x5B9A;&#x5F8B;&#xFF0C;&#x5F53;&#x4F60;&#x7528;code&#x6765;&#x4F20;&#x9012;&#x4FE1;&#x606F;&#x65F6;&#xFF0C;&#x6700;&#x4F4E;&#x7684;limit&#x662F;code&#x7684;efficiency&#x4E0D;&#x80FD;&#x4F4E;&#x4E8E;Entropy&#x3002;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;</p>
<ul>
<li>
<p>&#x4FE1;&#x606F;&#x71B5;&#x7684;&#x7279;&#x6027;&#xFF1A;</p>
<ul>
<li>&#x4E0D;&#x4E3A;&#x8D1F;&#x3002;</li>
<li>&#x6982;&#x7387;&#x8D8A;&#x5927;&#xFF0C;&#x81EA;&#x4FE1;&#x606F;&#x91CF;&#x8D8A;&#x5C0F;</li>
<li>&#x8BBE;K&#x662F;&#x7CFB;&#x7EDF;&#x5185;&#x7684;&#x4FE1;&#x606F;&#x603B;&#x6570;&#xFF0C;&#x5219;
<img src="http://i.imgur.com/Dq8RQVR.png" alt="">&#x5F53;p=1/k,&#x5373;&#x4E8B;&#x4EF6;&#x6982;&#x7387;&#x76F8;&#x7B49;&#x65F6;&#xFF0C;&#x7CFB;&#x7EDF;S&#x7684;&#x71B5;&#x6700;&#x5927;&#x3002;</li>
</ul>
</li>
<li>
<p>&#x8054;&#x5408;&#x71B5;&#xFF1A;</p>
<ul>
<li>
<p>&#x901A;&#x8FC7;&#x4E3E;&#x4F8B;&#x6765;&#x8BF4;&#x660E;&#xFF1A;
<img src="http://i.imgur.com/cJLL1eO.png" alt=""></p>
<pre><code>*   &#x5982;&#x56FE;&#xFF0C;H&#xFF08;T&#xFF09;= H&#xFF08;0.3&#xFF0C;0.5&#xFF0C;0.2&#xFF09;=1.48548
</code></pre>
</li>
</ul>
</li>
</ul>
<p>H(M)=H(0.6,0.4)=0.970951
H(T)+H(M)=2.456431
*   &#x800C;&#x8054;&#x5408;&#x71B5;&#x5219;&#x8868;&#x793A;&#x4E3A;&#xFF1A;
<img src="http://i.imgur.com/fXwGoZd.png" alt=""></p>
<pre><code>    &#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF1A;
</code></pre>
<p><img src="http://i.imgur.com/bRTkMLK.png" alt="">
&#x5F53;X&#xFF0C;Y&#x5728;&#x7EDF;&#x8BA1;&#x5B66;&#x4E0A;&#x4E92;&#x76F8;&#x72EC;&#x7ACB;&#x65F6;&#xFF0C;&#x7B49;&#x53F7;&#x6210;&#x7ACB;&#x3002;</p>
<ul>
<li>
<p>&#x6761;&#x4EF6;&#x71B5;&#xFF08;Conditional Entropy&#xFF09;;
P(T=t|M=m):
<img src="http://i.imgur.com/FGzAOEu.png" alt="">
<img src="http://i.imgur.com/yIkhyGa.png" alt=""></p>
<ul>
<li>
<p>&#x5E73;&#x5747;&#x6761;&#x4EF6;&#x71B5;&#xFF1A;
<img src="http://i.imgur.com/CJsv6Xz.png" alt=""></p>
<pre><code>*   &#x90A3;&#x4E48;M&#xFF08;cold/mild/hot&#xFF09;&#x80FD;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x591A;&#x5C11;&#x5173;&#x4E8E;T&#x7684;&#x4FE1;&#x606F;&#x5462;&#xFF1F;
</code></pre>
</li>
</ul>
</li>
</ul>
<p><img src="http://i.imgur.com/7Hgqpdo.png" alt=""></p>
<pre><code>    &#x540C;&#x7406;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x89C2;&#x5BDF;T&#x80FD;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x591A;&#x5C11;&#x548C;M&#x6709;&#x5173;&#x7684;&#x4FE1;&#x606F;&#xFF1A;
</code></pre>
<p><img src="http://i.imgur.com/xbxyZyg.png" alt=""></p>
<ul>
<li>
<p>&#x5E73;&#x5747;&#x4E92;&#x4FE1;&#x606F;&#xFF1A;
<img src="http://i.imgur.com/XqcI5yk.png" alt=""></p>
<ul>
<li>
<p>&#x6027;&#x8D28;&#xFF1A;</p>
<pre><code>    *   &#x5BF9;&#x79F0;&#x6027;&#xFF1A;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5BF9;&#x4E8E;X&#x548C;Y&#xFF0C;&#x5E73;&#x5747;&#x4E92;&#x4FE1;&#x606F;&#x90FD;&#x662F;I&#xFF08;X&#xFF1B;Y&#xFF09;
</code></pre>
<ul>
<li>&#x4E0D;&#x4E3A;&#x8D1F;&#xFF1A; &#x4F46;&#x662F;H(X) &#x2212; H(X/y) &#x53EF;&#x80FD;&#x4E3A;&#x8D1F;</li>
<li>&#x5982;&#x679C;X&#xFF0C;Y&#x662F;&#x72EC;&#x7ACB;&#x7684;&#xFF0C;&#x5C31;&#x662F;0</li>
<li>&#x53EF;&#x76F8;&#x52A0;&#x7684;</li>
<li><img src="http://i.imgur.com/2L2g7mM.png" alt=""></li>
</ul>
</li>
</ul>
</li>
<li>
<p>&#x5BF9;&#x4E8E;&#x4E09;&#x4E2A;&#x4FE1;&#x606F;&#x6E90;&#xFF1A;
<img src="http://i.imgur.com/DMMhYMM.png" alt=""></p>
</li>
<li>
<p>&#x9A6C;&#x5C14;&#x79D1;&#x592B;&#x94FE;&#xFF08;Markov Source&#xFF09;:
&#x9A6C;&#x5C14;&#x53EF;&#x592B;&#x94FE;&#x63CF;&#x8FF0;&#x4E86;&#x4E00;&#x79CD;&#x72B6;&#x6001;&#x5E8F;&#x5217;&#xFF0C;&#x5176;&#x6BCF;&#x4E2A;&#x72B6;&#x6001;&#x503C;&#x53D6;&#x51B3;&#x4E8E;&#x524D;&#x9762;&#x6709;&#x9650;&#x4E2A;&#x72B6;&#x6001;&#x3002;&#x9A6C;&#x5C14;&#x53EF;&#x592B;&#x94FE;&#x662F;&#x5177;&#x6709;&#x9A6C;&#x5C14;&#x53EF;&#x592B;&#x6027;&#x8D28;&#x7684;&#x968F;&#x673A;&#x53D8;&#x91CF;&#x7684;&#x4E00;&#x4E2A;&#x6570;&#x5217;&#x3002;&#x8FD9;&#x4E9B;&#x53D8;&#x91CF;&#x7684;&#x8303;&#x56F4;&#xFF0C;&#x5373;&#x5B83;&#x4EEC;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x53D6;&#x503C;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x88AB;&#x79F0;&#x4E3A;&#x201C;&#x72B6;&#x6001;&#x7A7A;&#x95F4;&#x201D;&#xFF0C;&#x800C;  &#x7684;&#x503C;&#x5219;&#x662F;&#x5728;&#x65F6;&#x95F4;n&#x7684;&#x72B6;&#x6001;&#x3002;&#x5982;&#x679C;<img src="http://i.imgur.com/kHK3e83.png" alt="">&#x5BF9;&#x4E8E;&#x8FC7;&#x53BB;&#x72B6;&#x6001;&#x7684;&#x6761;&#x4EF6;&#x6982;&#x7387;&#x5206;&#x5E03;&#x4EC5;&#x662F;  &#x7684;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x5219; <img src="http://i.imgur.com/xBCVgwp.png" alt=""></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning 复习 (一)：概率统计和线性回归]]></title>
      <url>http://yoursite.com/2016/10/17/machine-learning-e5-a4-8d-e4-b9-a0-e4-b8-80-ef-bc-9a-e6-a6-82-e7-8e-87-e7-bb-9f-e8-ae-a1-e5-92-8c-e7-ba-bf-e6-80-a7-e5-9b-9e-e5-bd-92/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>Machine Learning &#x603B;&#x7ED3;</p>
<h3 id="probability-and-statistics">Probability and Statistics <a href="#probability-and-statistics" class="header-anchor">#</a></h3>
<ul>
<li>
<p>&#x5E38;&#x89C4;&#x53D8;&#x91CF;&#xFF08;Regular variables&#xFF09;&#x5E94;&#x8BE5;&#x662F;&#x6570;&#x5B57;&#x6216;&#x8005;&#x662F;&#x5176;&#x4ED6;&#x3002;&#x76F8;&#x53CD;&#xFF0C;&#x968F;&#x673A;&#x53D8;&#x91CF;&#xFF08;Random Variables&#xFF09;&#x662F;&#x4E00;&#x7CFB;&#x5217;&#x503C;&#x5F97;&#x5206;&#x90E8;&#x3002; &#x6BD4;&#x5982;&#xFF0C;&#x6254;&#x4E00;&#x679A;&#x786C;&#x5E01;&#x662F;&#x968F;&#x673A;&#x53D8;&#x91CF;X&#x7684;&#x5982;&#x4E0B;&#x5206;&#x5E03;&#xFF0C;&#x2018;Head&#x2019;&#x53EF;&#x80FD;&#x6027;&#x4E3A;0.5&#xFF0C;&#x2018;Tail&#x2019;&#x53EF;&#x80FD;&#x6027;&#x4E3A;0.5.</p>
</li>
<li>
<p>&#x4E00;&#x822C;&#x6211;&#x4EEC;&#x7528;&#x5927;&#x5199;&#x5B57;&#x6BCD;&#x8868;&#x793A;&#x968F;&#x673A;&#x53D8;&#x91CF;&#xFF0C;&#x7528;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;&#x8868;&#x793A;&#x968F;&#x673A;&#x53D8;&#x91CF;&#x53D6;&#x7684;&#x503C;&#x3002;
<img src="http://i.imgur.com/pDKvACY.png" alt=""></p>
</li>
<li>
<p>&#x94FE;&#x5F0F;&#x6CD5;&#x5219;&#xFF1A;
<img src="http://i.imgur.com/4mhM7ZX.png" alt=""></p>
</li>
<li>
<p>&#x72EC;&#x7ACB;&#x4E8B;&#x4EF6;&#xFF1A;
<img src="http://i.imgur.com/OW5IlLd.png" alt=""></p>
</li>
<li>
<p>&#x6570;&#x5B66;&#x671F;&#x671B;E&#xFF1A;
<img src="http://i.imgur.com/cnOMht3.png" alt=""></p>
<ul>
<li>
<p>&#x6027;&#x8D28;&#xFF1A;</p>
<pre><code>*   &#x7EBF;&#x6027;&#x8868;&#x8FBE;&#xFF1A;
</code></pre>
</li>
</ul>
</li>
</ul>
<p><img src="http://i.imgur.com/umYck9X.png" alt="">
*   &#x5728;&#x4E0D;&#x5047;&#x5B9A;&#x4EFB;&#x4F55;X&#x548C;Y&#x7684;&#x5173;&#x7CFB;&#x6761;&#x4EF6;&#x4E0B;&#xFF1A;
<img src="http://i.imgur.com/oIUCHhI.png" alt=""></p>
<ul>
<li>&#x65B9;&#x5DEE;&#xFF1A;</li>
</ul>
<p>Var[X] = E[(X &#x2212; E[X])2]
<img src="http://i.imgur.com/nMY4vIP.png" alt=""></p>
<ul>
<li>
<p>&#x6807;&#x51C6;&#x5DEE;&#xFF1A;
<img src="http://i.imgur.com/eDUZuou.png" alt=""></p>
</li>
<li>
<p>X,Y&#x7684;&#x534F;&#x65B9;&#x5DEE;&#xFF1A;
<img src="http://i.imgur.com/H8fkuCv.png" alt=""></p>
</li>
<li>
<p>&#x65B9;&#x5DEE;&#xFF0C;&#x6807;&#x51C6;&#x5DEE;&#xFF0C;&#x534F;&#x65B9;&#x5DEE;&#x7684;&#x4E00;&#x4E9B;&#x6027;&#x8D28;&#xFF1A;
<img src="http://i.imgur.com/K1fjJc8.png" alt=""></p>
</li>
<li>
<p>&#x603B;&#x65B9;&#x5DEE;&#x5B9A;&#x5F8B;&#xFF08;The law of total variance&#xFF09;:
<img src="http://i.imgur.com/kEzg3MB.png" alt=""></p>
</li>
<li>
<p>&#x7EBF;&#x6027;&#x76F8;&#x5173;&#xFF08;&#x901A;&#x5E38;&#x88AB;&#x7B80;&#x79F0;&#x4E3A; &#x76F8;&#x5173;&#xFF09;&#xFF1A;</p>
<ul>
<li>
<p>&#x5C5E;&#x4E8E;[-1&#xFF0C;1]
<img src="http://i.imgur.com/5DyzoXH.png" alt=""></p>
</li>
<li>
<p>&#x76F8;&#x5173;&#x6027;&#x5728;&#x53D8;&#x91CF;&#x7684;&#x79FB;&#x52A8;&#x548C;&#x8303;&#x56F4;&#x53D8;&#x5316;&#x4E2D;&#x5E38;&#x5E38;&#x662F;&#x4FDD;&#x6301;&#x4E0D;&#x53D8;&#x7684;
<img src="http://i.imgur.com/CNoMJ92.png" alt=""></p>
<ul>
<li>&#x5982;&#x679C;X&#xFF0C;Y&#x4E92;&#x76F8;&#x72EC;&#x7ACB;&#xFF0C;&#x90A3;&#x4E48;&#x7EBF;&#x6027;&#x76F8;&#x5173;&#x6027;&#x4E3A;0&#xFF0C;&#x4F46;&#x662F;&#x53CD;&#x4E4B;&#x4E0D;&#x53EF;&#x4EE5;&#x3002;&#x5373;X&#xFF0C;Y&#x53EF;&#x80FD;&#x7EBF;&#x6027;&#x4E0D;&#x76F8;&#x5173;&#xFF0C;&#x4F46;&#x662F;&#x4F9D;&#x65E7;&#x4E0D;&#x662F;&#x72EC;&#x7ACB;&#x7684;&#x3002;
&#x6240;&#x4EE5;&#x7ED3;&#x8BBA;&#x53EA;&#x80FD;&#x662F;&#xFF1A;
&#x72EC;&#x7ACB; -&gt; &#x7EBF;&#x6027;&#x4E0D;&#x76F8;&#x5173;&#xFF0C;&#x53CD;&#x4E4B;&#x4E0D;&#x53EF;&#x3002;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="correlation-vs-mutual-information">Correlation vs. Mutual Information <a href="#correlation-vs-mutual-information" class="header-anchor">#</a></h3>
<ul>
<li>
<p>Mutual Information &#x7684;&#x5B9A;&#x4E49;&#xFF08;&#x53EF;&#x53C2;&#x89C1;&#x53E6;&#x4E00;&#x7BC7;&#x535A;&#x5BA2;&#x3010;&#x73B0;&#x5728;&#x6CA1;&#x6709;&#x54C8;&#x54C8;&#x3011;&#xFF1A;Machine Learning&#x4FE1;&#x606F;&#x8BBA;&#x590D;&#x4E60;&#xFF09;&#xFF1A;</p>
</li>
<li>
<p>&#x7EBF;&#x6027;&#x76F8;&#x5173;&#x6027;&#x9700;&#x8981;x&#xFF0C;y&#x7684;&#x503C;&#x90FD;&#x662F;&#x6570;&#x5B57;&#xFF0C;&#x6240;&#x4EE5;&#x4E24;&#x8005;&#x4E4B;&#x95F4;&#x5B58;&#x5728;&#x8DDD;&#x79BB;&#x6982;&#x5FF5;---&#x5EA6;&#x91CF;&#x7A7A;&#x95F4;&#xFF08;metric space&#xFF09;&#x3002;</p>
<ul>
<li>
<p>&#x5EA6;&#x91CF;&#x7A7A;&#x95F4;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x8861;&#x91CF;&#x7EBF;&#x6027;&#x76F8;&#x5173;&#x7684;&#x7A0B;&#x5EA6;&#x548C;&#x7D27;&#x5BC6;&#x5EA6;&#xFF08;tightness&#xFF09;&#x3002;</p>
<ul>
<li>&#x5BF9;&#x4E8E;binary&#x7684;&#x968F;&#x673A;&#x53D8;&#x91CF;&#xFF0C;&#x8BA4;&#x4E3A;&#x53D8;&#x91CF;&#x62E5;&#x6709;&#x4E24;&#x4E2A;&#x6570;&#x503C;&#xFF0C;0&#x548C;1&#x3002;&#x8303;&#x56F4;&#x4E5F;&#x662F;[-1&#xFF0C;1]&#x3002;&#x5927;&#x591A;&#x6570;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x66F4;&#x52A0;&#x5728;&#x610F;&#x76F8;&#x5173;&#x7684;&#x5F3A;&#x5EA6;&#xFF0C;&#x800C;&#x975E;&#x53CD;&#x5411;&#x6027;&#xFF08;polarity&#xFF09;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x4F1A;&#x89C2;&#x5BDF;<img src="http://i.imgur.com/snCouQg.png" alt=""> &#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5176;&#x8303;&#x56F4;&#x4E3A;[0,1]</li>
</ul>
</li>
</ul>
</li>
<li>
<p>&#x76F8;&#x53CD;&#xFF0C;Mutual Information &#x4E0D;&#x9700;&#x8981;&#x5EA6;&#x91CF;&#x7A7A;&#x95F4;&#x3002;
<img src="http://i.imgur.com/Nzz5md8.png" alt=""></p>
</li>
<li>
<p>Mutual Information I&#xFF08;X;Y&#xFF09;&#x5F88;&#x5927;&#x4F46;&#x662F;&#x76F8;&#x5173;&#x6027;&#x4E3A;0&#x7684;&#x4F8B;&#x5B50;:</p>
<ul>
<li>
<p>&#x4E00;&#x4E2A;&#x5B8C;&#x7F8E;&#x7684;&#x591A;&#x8FB9;&#x5F62;&#xFF0C;&#x9876;&#x70B9;&#x7684;&#x7EBF;&#x6027;&#x76F8;&#x5173;&#x6027;&#x6C38;&#x8FDC;&#x4E3A;0&#xFF0C;&#x4F46;&#x662F;&#x5F53;&#x5B9A;&#x70B9;&#x4E2A;&#x6570;&#x8D8B;&#x5411;&#x65E0;&#x7A77;&#xFF0C;I&#xFF08;X&#xFF1B;Y&#xFF09;&#x4E5F;&#x4F1A;&#x8D8B;&#x5411;&#x65E0;&#x7A77;&#x3002;</p>
<pre><code>    *   &#x6700;&#x5C0F;&#x7684;&#x4F8B;&#x5B50;&#xFF1A;&#x7B49;&#x8FB9;&#x4E09;&#x89D2;&#x5F62;
</code></pre>
<ul>
<li>&#x6765;&#x601D;&#x8003;&#x4E00;&#x4E2A;&#x5206;&#x5E03;&#x5747;&#x5300;&#x7684;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x5F53;&#x4F60;&#x65CB;&#x8F6C;&#x5B83;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x76F8;&#x5173;&#x6027;&#x4E0D;&#x53D8;&#xFF0C;&#x4F46;&#x662F;I&#x4F1A;&#x968F;&#x7740;&#x65CB;&#x8F6C;&#x800C;&#x53D8;&#x5316;&#x3002;&#x5F53;&#x65CB;&#x8F6C;&#x5230;&#x548C;&#x8F74;&#x5E73;&#x884C;&#x65F6;&#xFF0C;I&#x51CF;&#x5C0F;&#x4E86;&#x3002;
<img src="http://i.imgur.com/0VfYmLq.png" alt=""></li>
</ul>
</li>
</ul>
</li>
<li>
<p>Mutual Information &#x4E3A;0&#x4F46;&#x662F;&#x76F8;&#x5173;&#x6027;&#x4E0D;&#x4E3A;0&#x7684;&#x4F8B;&#x5B50;&#xFF1A;</p>
<ul>
<li>&#x6CA1;&#x6709;&#x3002;&#x56E0;&#x4E3A;I&#xFF08;X&#xFF1B;Y&#xFF09;=0 &#x610F;&#x5473;&#x7740;X&#xFF0C;Y&#x662F;&#x72EC;&#x7ACB;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x76F8;&#x5173;&#x6027;&#x4E00;&#x5B9A;&#x4E3A;0&#x3002;</li>
</ul>
</li>
</ul>
<h3 id="linear-learning-in-one-dimension-simple-linear-regression">Linear Learning in One Dimension(Simple Linear Regression) <a href="#linear-learning-in-one-dimension-simple-linear-regression" class="header-anchor">#</a></h3>
<ul>
<li>&#x6211;&#x4EEC;&#x5728;&#x8FD9;&#x91CC;&#x8003;&#x8651;&#x7684;&#x662F;&#x4E00;&#x79CD;Mapping X-&gt;Y.X&#x4F5C;&#x4E3A;&#x8F93;&#x5165;&#x4F1A;&#x7ED9;&#x51FA;&#xFF0C;&#x6211;&#x4EEC;&#x66F4;&#x503E;&#x5411;&#x4E8E;&#x4E86;&#x89E3;P&#xFF08;y|x&#xFF09;&#x800C;&#x4E0D;&#x662F;P&#xFF08;x&#xFF0C;y&#xFF09;&#x3002;&#x7B80;&#x5355;&#x6765;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x60F3;&#x77E5;&#x9053;&#x5728;&#x7ED9;&#x5B9A;x&#x7684;&#x60C5;&#x51B5;&#x4E0B;y&#x7684;&#x671F;&#x671B;&#x503C;&#x3002;&#x5373;&#xFF0C;E[Y|X=x]&#xFF0C;&#x66F4;&#x7B80;&#x5355;&#x6765;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x5047;&#x8BBE;X&#x548C;E[Y]&#x7B26;&#x5408;&#x4E00;&#x79CD;&#x7EBF;&#x6027;&#x5173;&#x7CFB;&#xFF1A;
<img src="http://i.imgur.com/FtpiBMl.png" alt="">
&#x6216;&#x8005;&#x8BF4;&#x662F;&#xFF1A;
<img src="http://i.imgur.com/79iWQIz.png" alt=""></li>
<li>&#x3B2;&#x662F;&#x659C;&#x7387;&#xFF0C;&#x3B1;&#x662F;&#x622A;&#x8DDD;&#xFF0C;&#x3B5;&#x662F;&#x96F6;&#x5747;&#x503C;&#x5206;&#x5E03;&#x3002;&#xFF08;&#x597D;&#x4E86;&#x597D;&#x4E86;&#x8FD9;&#x4E2A;&#x4E2D;&#x5B66;&#x5C31;&#x5B66;&#x8FC7;&#x4E86;&#x3002;&#xFF09;</li>
<li>&#x5BF9;&#x4E8E;&#x7ED9;&#x5B9A;&#x7684;&#x659C;&#x7387;&#x548C;&#x622A;&#x8DDD;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x4E00;&#x6761;&#x7EBF;&#xFF0C;&#x7136;&#x540E;&#x8BA1;&#x7B97;&#x4E00;&#x4E0B;&#x8BEF;&#x5DEE;&#x3002;
<img src="http://i.imgur.com/cHM6aMP.png" alt="">
&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x8FD9;&#x79CD;&#x8BEF;&#x5DEE;&#x5E76;&#x4E0D;&#x4EE3;&#x8868;&#x9519;&#x8BEF;&#xFF0C;&#x53EA;&#x662F;&#x9884;&#x6D4B;&#x503C;&#x548C;&#x771F;&#x5B9E;&#x503C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x8DDD;.</li>
<li>&#x4E00;&#x79CD;&#x627E;&#x5230;&#x8FD9;&#x4E9B;&#x53C2;&#x6570;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x6700;&#x5C0F;&#x5316;&#x6B8B;&#x5DEE;&#x5E73;&#x65B9;&#xFF0C; &#x8FD9;&#x91CC;&#x5047;&#x8BBE;&#x8BEF;&#x5DEE;&#x662F;Guassion&#xFF08;&#x4E5F;&#x5C31;&#x662F;&#x6B63;&#x6001;&#x5206;&#x5E03;&#xFF09;&#x7684;&#x3002;
<img src="http://i.imgur.com/ElJtZHe.png" alt="">
&#x6709;&#x4E00;&#x79CD;&#x76F8;&#x8FD1;&#x89E3;&#x6CD5;&#xFF1A;
<img src="http://i.imgur.com/MlB77DE.png" alt=""></li>
</ul>
<h3 id="linear-learning-in-multiple-dimensions">Linear Learning in Multiple Dimensions <a href="#linear-learning-in-multiple-dimensions" class="header-anchor">#</a></h3>
<ul>
<li>&#x5982;&#x679C;X&#x4E0D;&#x6B62;&#x4E00;&#x4E2A;&#x6BD4;&#x5982;&#xFF1A;
<img src="http://i.imgur.com/vHnaG1o.png" alt=""></li>
<li>&#x6211;&#x4EEC;&#x540C;&#x6837;&#x53EF;&#x4EE5;&#x5047;&#x8BBE;&#x7EBF;&#x6027;&#x5173;&#x7CFB;&#xFF1A;
<img src="http://i.imgur.com/ppDgVx1.png" alt=""></li>
<li>&#x4E3A;&#x4E86;&#x7B80;&#x5316;&#x7B26;&#x53F7;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5047;&#x8BBE;&#x3B2;0=&#x3B1;&#xFF0C;&#x540C;&#x65F6;x0=1&#x3002;&#x5C31;&#x5F97;&#x5230;&#x4E86;&#x5982;&#x4E0B;&#x6A21;&#x578B;&#xFF1A;
<img src="http://i.imgur.com/LOlkLBu.png" alt=""></li>
<li>&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x6570;&#x636E;&#x96C6;&#x7528;&#x77E9;&#x9635;&#x8868;&#x793A;
<img src="http://i.imgur.com/gx7nN0Q.png" alt=""></li>
<li>&#x7559;&#x5B58;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x4E3A;&#xFF1A;
<img src="http://i.imgur.com/07n1cTT.png" alt=""></li>
<li>&#x548C;&#x4E0A;&#x9762;&#x7684;&#x4E00;&#x6837;&#xFF0C;&#x6211;&#x4EEC;&#x540C;&#x6837;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x51FA;&#x6700;&#x5C0F;&#x5316;&#x6B8B;&#x5DEE;&#x5E73;&#x65B9;&#xFF1A;
<img src="http://i.imgur.com/8r1EA7v.png" alt="">
&#x6216;&#x8005;&#x4E00;&#x79CD;&#x8FD1;&#x4F3C;&#x89E3;&#x6CD5;&#xFF1A;
<img src="http://i.imgur.com/ojQx65w.png" alt=""></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode 172.Factorial Trailing Zeroes]]></title>
      <url>http://yoursite.com/2016/10/15/leetcode-172-easyfactorial-trailing-zeroes/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>Question:</p>
</blockquote>
<blockquote>
<p>Given an integer n, return the number of trailing zeroes in n!.</p>
</blockquote>
<p>&#x9898;&#x610F;&#x662F;&#x6C42;n&#x7684;&#x9636;&#x4E58;&#x540E;&#x9762;0&#x7684;&#x4E2A;&#x6570;&#x3002;</p>
<h3 id="basic-solution">Basic Solution <a href="#basic-solution" class="header-anchor">#</a></h3>
<p>&#x76F4;&#x63A5;&#x786C;&#x6C42;n!&#x7684;&#x7ED3;&#x679C;,&#x518D;&#x8BA1;&#x7B97;&#x672B;&#x5C3E;0&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x5982;&#x679C;n&#x8FC7;&#x5927;&#xFF0C;&#x7ED3;&#x679C;&#x4F1A;&#x6EA2;&#x51FA;&#x3002;</p>
<p>** Better Solution **</p>
<p><code>Complexity</code> : O(lgn)</p>
<p>&#x540E;&#x7F00;&#x4E3A;0&#x7684;&#x90FD;&#x662F;2&#x548C;5&#x76F8;&#x4E58;&#x5F97;&#x5230;&#x7684;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x8BA1;&#x7B97;2&#x548C;5&#x7684;&#x4E2A;&#x6570;&#x3002;</p>
<p>&#x4F46;&#x662F;&#x4F8B;&#x5982;&#xFF1A;</p>
<p>n = 5! = 1 * 2 * 2 * 2 * 3 * 5 &#x6709;3&#x4E2A;2&#xFF0C;1&#x4E2A;5
n = 7! = 1 * 2 * 3 * 2 * 2 * 5 * 2 * 3 * 7 &#x6709;4&#x4E2A;2&#xFF0C;1&#x4E2A;5</p>
<p>&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;2&#x4F1A;&#x8FDC;&#x8FDC;&#x6BD4;5&#x591A;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x6709;5&#x7684;&#x4E2A;&#x6570;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;&#x4F46;&#x662F;&#x8981;&#x6CE8;&#x610F;&#xFF1A;</p>
<p>n = 25! &#x4E0D;&#x6B62;2&#x4E2A;5&#xFF0C;&#x800C;&#x662F;3&#x4E2A;5&#xFF0C;&#x56E0;&#x4E3A;25 = 5 * 5</p>
<p>&#x6240;&#x4EE5;  result = n/5 + n/25 + n/125....</p>
<p>Python Solution:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">   def trailingZeroes(self, n):</div><div class="line">       num, x = 0, 5</div><div class="line">       while n &amp;gt;= x:</div><div class="line">              num += n/x</div><div class="line">              x *= 5</div><div class="line">      return num</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[听李宗盛]]></title>
      <url>http://yoursite.com/2016/09/23/e5-90-ac-e6-9d-8e-e5-ae-97-e7-9b-9b/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><embed src="http://www.xiami.com/widget/12753884_1772001102/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"></p>
<p>&#x591C;&#x91CC;&#x4ECE;&#x706F;&#x706B;&#x901A;&#x660E;&#x7684;&#x5B66;&#x6821;&#x56DE;&#x5230;&#x5BB6;&#xFF0C;&#x867E;&#x7C73;&#x968F;&#x673A;&#x653E;&#x4E86;&#x4E00;&#x9996;&#x6B4C;&#x3002; &#x5C45;&#x7136;&#x662F;&#x674E;&#x5B97;&#x76DB;&#x7248;&#x7684;&#x300A;&#x9634;&#x5929;&#x300B;&#x3002;</p>
<p>&#x6211;&#x4E00;&#x4E0B;&#x60F3;&#x5230;&#x4E86;&#x6211;&#x54E5;&#xFF0C;&#x4E00;&#x4E2A;&#x957F;&#x671F;&#x53EA;&#x542C;&#x674E;&#x5B97;&#x76DB;&#x548C;&#x6C11;&#x8C23;&#x7684;&#x7537;&#x4EBA;&#x3002;&#x5927;&#x591A;&#x6570;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4F1A;&#x5FD8;&#x8BB0;&#x4ED6;&#x53EA;&#x6BD4;&#x6211;&#x5927;&#x4E00;&#x5C81;&#xFF0C;&#x4ED6;&#x8BB2;&#x8D77;&#x9053;&#x7406;&#xFF0C;&#x603B;&#x662F;&#x8BA9;&#x6211;&#x4E0D;&#x5F97;&#x4E0D;&#x670D;&#x3002;</p>
<p>&#x5370;&#x8C61;&#x91CC;&#xFF0C;&#x4E00;&#x8D77;&#x594B;&#x6597;&#x7684;&#x65E5;&#x5B50;&#x91CC;&#xFF0C;&#x4ED6;&#x603B;&#x662F;&#x7A9D;&#x5728;&#x6C99;&#x53D1;&#x91CC;&#xFF0C;Mac&#x5C31;&#x516C;&#x653E;&#x674E;&#x5B97;&#x76DB;&#x3002;&#x6211;&#x4E00;&#x4E2A;&#x672C;&#x6765;&#x6CA1;&#x542C;&#x8FC7;&#x674E;&#x5B97;&#x76DB;&#x7684;&#x4EBA;&#xFF0C;&#x6700;&#x540E;&#x8FDE;&#x300A;&#x5C71;&#x4E18;&#x300B;&#x7684;&#x6B4C;&#x8BCD;&#x90FD;&#x5012;&#x80CC;&#x5982;&#x6D41;&#x4E86;&#x3002;</p>
<p>&#x6BCF;&#x53E5;&#x8BDD;&#xFF0C;&#x90FD;&#x50CF;&#x8FC7;&#x5B8C;&#x4E86;&#x4E00;&#x751F;&#x3002;</p>
<p>&#x4E4B;&#x540E;&#xFF0C;&#x6709;&#x7761;&#x4E0D;&#x7740;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x628A;&#x8FD9;&#x9996;&#x6B4C;&#x62FF;&#x51FA;&#x6765;&#x542C;&#x3002;</p>
<p>&#x91D1;&#x739F;&#x5C90;&#x7FFB;&#x5531;&#x8FC7;&#xFF0C;&#x592A;&#x7C89;&#x9970;&#xFF0C;&#x6216;&#x8005;&#x8BF4;&#x592A;&#x5E74;&#x8F7B;&#xFF0C;&#x5F88;&#x4E0D;&#x559C;&#x3002;</p>
<p>&#x867D;&#x7136;&#x6211;&#x662F;&#x7EDD;&#x5BF9;&#x4E0D;&#x76F8;&#x4FE1;&#x6240;&#x8C13;&#x201C;&#x592A;&#x5E74;&#x8F7B;&#x4E86;&#xFF0C;&#x4E0D;&#x80FD;&#x5982;&#x4F55;&#x5982;&#x4F55;&#x5982;&#x4F55;&#x201D;&#x8FD9;&#x6837;&#x7684;&#x8BF4;&#x8F9E;&#x7684;&#xFF0C;&#x90A3;&#x66F4;&#x50CF;&#x662F;&#x4E00;&#x79CD;&#x6545;&#x4F5C;&#x8001;&#x6210;&#x501A;&#x8001;&#x5356;&#x8001;&#x7684;&#x59FF;&#x6001;&#x3002;</p>
<p>&#x4F46;&#x662F;&#x8FD9;&#x9996;&#x6B4C;&#xFF0C;&#x4F46;&#x662F;&#x674E;&#x5B97;&#x76DB;&#xFF0C;&#x5C31;&#x50CF;&#x662F;&#x6C89;&#x6DC0;&#x4E86;&#x5F88;&#x4E45;&#x7684;&#x597D;&#x9152;&#x3002;&#x4F60;&#x5F88;&#x6015;&#x4E00;&#x6253;&#x5F00;&#xFF0C;&#x65E0;&#x6CD5;&#x62B5;&#x5FA1;&#x6251;&#x9762;&#x800C;&#x6765;&#x7684;&#x5C81;&#x6708;&#x611F;&#xFF0C;&#x5E74;&#x8F7B;&#x662F;&#x771F;&#x7684;&#x4F1A;&#x9189;&#x7684;&#x3002;</p>
<p>&#x542C;&#x674E;&#x5B97;&#x76DB;&#x548C;&#x6881;&#x9759;&#x8339;&#x7684;&#x5408;&#x5531;&#xFF0C;&#x58F0;&#x7EBF;&#x90FD;&#x662F;&#x88AB;&#x62C9;&#x957F;&#x4E86;&#x7684;&#xFF0C;&#x80CC;&#x540E;&#x7684;&#x4E1C;&#x897F;&#x592A;&#x591A;&#x3002;&#x8BF4;&#x4E5F;&#x8BF4;&#x4E0D;&#x5B8C;&#x7684;&#x611F;&#x89C9;&#x3002;&#x6881;&#x9759;&#x8339;&#x7FFB;&#x5531;&#x8FC7;&#x674E;&#x5B97;&#x76DB;&#x7684;&#x300A;&#x95EE;&#x300B;&#xFF0C;&#x300A;&#x68A6;&#x9192;&#x65F6;&#x5206;&#x300B;&#xFF0C;&#x300A;&#x660E;&#x660E;&#x767D;&#x767D;&#x6211;&#x7684;&#x5FC3;&#x300B;&#xFF0C;&#x6709;&#x5979;&#x81EA;&#x5DF1;&#x7684;&#x5473;&#x9053;&#xFF0C;&#x771F;&#x5B9E;&#x3002;</p>
<p>&#x6709;&#x6BB5;&#x65F6;&#x95F4;&#x5355;&#x5FAA;&#x542C;&#x674E;&#x5B97;&#x76DB;&#x7684;&#x300A;&#x6F02;&#x6D0B;&#x8FC7;&#x6D77;&#x6765;&#x770B;&#x4F60;&#x300B;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5E38;&#x5750;&#x5728;&#x5730;&#x6BEF;&#x4E0A;&#xFF0C;&#x5E38;&#x89C9;&#x5F97;&#x67D4;&#x8F6F;&#x800C;&#x88AB;&#x7737;&#x987E;&#xFF0C;&#x89C9;&#x5F97;&#x5FC3;&#x5B89;&#x3002;</p>
<p>&#x5176;&#x5B9E;&#xFF0C;&#x542C;&#x6B4C;&#x8FD9;&#x79CD;&#x4E8B;&#x60C5;&#xFF0C;&#x4E0D;&#x5E26;&#x611F;&#x60C5;&#x5730;&#x542C;&#xFF0C;&#x4E0D;&#x8BA4;&#x771F;&#x3002;&#x5E26;&#x611F;&#x60C5;&#x5730;&#x542C;&#xFF0C;&#x53C8;&#x592A;&#x7D2F;&#x3002;</p>
<p>&#x53EA;&#x80FD;&#x9002;&#x91CF;&#x3002;&#x6447;&#x6EDA;&#xFF0C;&#x6D41;&#x884C;&#xFF0C;&#x53E4;&#x5178;&#xFF0C;&#x90FD;&#x8981;&#x9002;&#x91CF;&#xFF0C;&#x624D;&#x80FD;&#x51B7;&#x9759;&#x5730;&#x4FDD;&#x6301;&#x81EA;&#x5DF1;&#x7684;&#x5E73;&#x8861;&#x3002;</p>
<p>&#x542C;&#x674E;&#x5B97;&#x76DB;&#xFF0C;&#x66F4;&#x8981;&#x9002;&#x91CF;&#x3002;&#x4E0D;&#x7136;&#x4E00;&#x4E0D;&#x5C0F;&#x5FC3;&#xFF0C;&#x542C;&#x591A;&#x4E86;&#x6216;&#x8BB8;&#x5C31;&#x770B;&#x6DE1;&#x4EBA;&#x751F;&#x4E86;&#x3002;</p>
<p>&#x8981;&#x771F;&#x770B;&#x6DE1;&#x4EBA;&#x751F;&#xFF0C;&#x5F88;&#x96BE;&#x4FDD;&#x6301;&#x5BF9;&#x751F;&#x6D3B;&#x6709;&#x70ED;&#x60C5;&#x7684;&#x90A3;&#x79CD;&#x82F1;&#x96C4;&#x4E3B;&#x4E49;&#x4E86;&#x3002;</p>
<p>&#x6240;&#x4EE5;&#xFF0C;&#x5982;&#x4ECA;&#xFF0C;&#x5728;&#x8FD9;&#x4E2A;&#x9700;&#x8981;&#x88AB;&#x6FC0;&#x52B1;&#x7684;&#x5E74;&#x9F84;&#x91CC;&#xFF0C;&#x6211;&#x60F3;&#xFF0C;&#x7B49;&#x5230;&#x6709;&#x4E00;&#x5929;&#x89C9;&#x5F97;&#x7D2F;&#x4E86;&#xFF0C;&#x89C9;&#x5F97;&#x8D70;&#x4E0D;&#x4E0B;&#x53BB;&#x4E86;&#xFF0C;&#x9700;&#x8981;&#x66F4;&#x968F;&#x610F;&#x7684;&#x6001;&#x5EA6;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x518D;&#x6765;&#x542C;&#x542C;&#x674E;&#x5B97;&#x76DB;&#x5427;&#x3002;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python remove误区]]></title>
      <url>http://yoursite.com/2016/09/19/python-remove-e8-af-af-e5-8c-ba/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x5728;list&#x91CC;&#x9762;&#x8FB9;&#x67E5;&#x627E;&#x8FB9;remove&#xFF0C;&#x4F1A;&#x51FA;&#x9519;&#x3002; &#x56E0;&#x4E3A;&#x8FD9;&#x4E2A;&#x539F;&#x56E0;Debug&#x4E86;&#x4E00;&#x4E2A;&#x65E9;&#x4E0A;&#x771F;&#x662F;&#x54ED;&#x778E;&#x3002;</p>
<p>&#x539F;&#x6765;&#x662F;&#xFF1A;</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for h in total_h:</div><div class="line">    if attr_value_list not in h:</div><div class="line">       total_h.remove(h)</div></pre></td></tr></table></figure></p>
<p>&#x4F46;&#x7ED3;&#x679C;&#x59CB;&#x7EC8;&#x9519;&#x8BEF;&#xFF0C;&#x8DD1;&#x4E0D;&#x51FA;&#x5206;&#x3002;</p>
<p>&#x8C03;&#x7528;remove&#x540E;&#xFF0C;index&#x6539;&#x53D8;&#x4E86;&#x3002;</p>
<p>&#x6240;&#x4EE5;&#x6539;&#x6210;&#x4E86;&#x5982;&#x4E0B;&#xFF0C;&#x5148;&#x628A;&#x8981;remove&#x7684;&#x5B58;&#x5728;&#x65B0;&#x7684;list&#x91CC;&#x9762;&#xFF0C;&#x518D;&#x904D;&#x5386;list&#x53BB;&#x6389;&#x3002;</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for h in total_h:</div><div class="line">    new_h = []</div><div class="line">    if attr_value_list not in h:</div><div class="line">       for x in h:</div><div class="line">           new_h.append(x)</div><div class="line">       remove_list.append(new_h)</div><div class="line">for r in remove_list:</div><div class="line">    total_h.remove(r)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[明天一切好说]]></title>
      <url>http://yoursite.com/2016/08/27/e6-98-8e-e5-a4-a9-e4-b8-80-e5-88-87-e5-a5-bd-e8-af-b4/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#xA0;</p>
<p>&#xA0; &#xA0; &#xA0; &#x843D;&#x5730;&#x706F;&#x6E29;&#x548C;&#x5730;&#x4EAE;&#x7740;&#xFF0C;&#x6536;&#x62FE;&#x597D;&#x5367;&#x5BA4;&#xFF0C;&#x6446;&#x597D;&#x8863;&#x67B6;&#xFF0C;&#x53A8;&#x623F;&#x9910;&#x5177;&#x6446;&#x597D;&#xFF0C;&#x624D;&#x7EC8;&#x4E8E;&#x6709;&#x65F6;&#x95F4;&#x5750;&#x5728;&#x81EA;&#x5DF1;&#x62FC;&#x7684;&#x6C99;&#x53D1;&#x4E0A;&#x548C;&#x5BA4;&#x53CB;&#x8BB2;&#x51E0;&#x53E5;&#x8BDD;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#x6765;&#x4E86;&#x4E00;&#x5468;&#x591A;&#x4E00;&#x4E9B;&#xFF0C;&#x51E0;&#x4E4E;&#x90FD;&#x5728;&#x75B2;&#x4E8E;&#x5E94;&#x4ED8;&#x4E00;&#x4E2A;&#x5B89;&#x8EAB;&#x7ACB;&#x547D;&#x7684;&#x5730;&#x65B9;&#x3002;&#x60F3;&#x6765;&#xFF0C;&#x88AB;&#x6D77;&#x5173;&#x5173;&#x8FC7;&#x5C0F;&#x9ED1;&#x5C4B;&#xFF0C;&#x88AB;&#x623F;&#x5C4B;manager&#x543C;&#x8FC7;&#xFF0C;&#x88AB;&#x4E0D;&#x9760;&#x8C31;&#x7684;&#x7BA1;&#x7406;&#x4EBA;&#x5458;&#x653E;&#x9E3D;&#x5B50;&#xFF0C;&#x88AB;&#x8BA1;&#x5212;&#x4E2D;&#x7684;&#x5BA4;&#x53CB;&#x5751;&#x5F97;&#x63AA;&#x624B;&#x4E0D;&#x53CA;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#x521A;&#x5230;&#x5339;&#x5179;&#x5821;&#xFF0C;&#x7B2C;&#x4E09;&#x6B21;&#x8DD1;&#x5230;&#x81EA;&#x5DF1;&#x56DB;&#x6708;&#x4EFD;&#x5C31;&#x79DF;&#x4E0B;&#x6765;&#x7684;&#x516C;&#x5BD3;&#x5374;&#x8FD8;&#x662F;&#x62FF;&#x4E0D;&#x5230;&#x94A5;&#x5319;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E00;&#x4E2A;&#x4EBA;&#xFF0C;&#x5728;&#x516C;&#x4EA4;&#x7AD9;&#x53F0;&#xFF0C;&#x5DEE;&#x70B9;&#x5C31;&#x54ED;&#x51FA;&#x6765;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0;&#x540E;&#x6765;&#x4E5F;&#x6CA1;&#x6709;&#x54ED;&#xFF0C;&#x5FC3;&#x91CC;&#x89C9;&#x5F97;&#x4E0D;&#x503C;&#x5F97;&#xFF0C;&#x81EA;&#x5DF1;&#x63D0;&#x524D;&#x5B9A;&#x4E86;&#x5408;&#x7EA6;&#xFF0C;&#x6253;&#x8FC7;&#x7535;&#x8BDD;&#xFF0C;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x8FC7;&#x9519;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x662F;&#x6211;&#x8981;&#x54ED;&#x3002;&#x6709;&#x95EE;&#x9898;&#x5C31;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x597D;&#x4E86;&#xFF0C;&#x4E0D;&#x7ED9;&#x6211;&#x6211;&#x5C31;&#x4E00;&#x76F4;&#x6253;&#x7535;&#x8BDD;&#xFF0C;&#x4E00;&#x76F4;&#x6765;&#xFF0C;&#x8017;&#x4E0B;&#x53BB;&#x3002;&#x8FD9;&#x4E48;&#x60F3;&#x7740;&#xFF0C;&#x773C;&#x6CEA;&#x8FD8;&#x662F;&#x6253;&#x4E86;&#x4E2A;&#x8F6C;&#x3002;&#x773C;&#x524D;&#x662F;&#x6559;&#x5802;&#xFF0C;&#x5BF9;&#x9762;&#x662F;&#x94F6;&#x884C;&#xFF0C;&#x6765;&#x5F80;&#x7684;&#x8F66;&#x8F86;&#x91CC;&#x8FD8;&#x6709;&#x7279;&#x65AF;&#x62C9;&#x3002;&#x771F;&#x4E0D;&#x6562;&#x76F8;&#x4FE1;&#xFF0C;&#x8FD9;&#x91CC;&#x662F;&#x7F8E;&#x56FD;&#x554A;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0;&#x7EC8;&#x4E8E;&#x62FF;&#x5230;&#x4E86;&#x94A5;&#x5319;&#xFF0C;&#x6FC0;&#x52A8;&#x5F97;&#x53BB;&#x4E2D;&#x9910;&#x9986;&#x5403;&#x4E86;&#x4E00;&#x7897;&#x725B;&#x8089;&#x9762;&#xFF0C;&#x548C;&#x4E00;&#x8D77;&#x7684;&#x59D1;&#x5A18;&#x8BF4;&#x8D77;&#x665A;&#x4E0A;&#x60F3;&#x53BB;&#x63A5;yuki&#xFF0C;&#x5979;&#x8BF4;&#x4F60;&#x81EA;&#x5DF1;&#x90FD;&#x6CA1;&#x7167;&#x987E;&#x597D;&#xFF0C;&#x8FD8;&#x7BA1;&#x522B;&#x4EBA;&#x3002;&#x54C7;&#x5730;&#x4E00;&#x4E0B;&#xFF0C;&#x5FC3;&#x91CC;&#x611F;&#x89C9;&#x88AB;&#x523A;&#x5230;&#x4E86;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0; &#x8BB0;&#x5F97;&#x5927;&#x56DB;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x820D;&#x53CB;&#x90FD;&#x4E0D;&#x5728;&#xFF0C;&#x5BBF;&#x820D;&#x9ED1;&#x4E86;&#xFF0C;&#x6211;&#x624D;&#x53D1;&#x73B0;&#x56DB;&#x5E74;&#x6211;&#x4ECE;&#x6765;&#x6CA1;&#x53BB;&#x5145;&#x8FC7;&#x4E00;&#x6B21;&#x7535;&#x3002;&#x540E;&#x6765;&#x53BB;&#x6FB3;&#x6D32;&#xFF0C;&#x5BA4;&#x53CB;&#x662F;&#x4E2A;&#x4E8B;&#x65E0;&#x5DE8;&#x7EC6;&#x90FD;&#x4F1A;&#x7167;&#x987E;&#x5468;&#x5168;&#x7684;&#x5F3A;&#x8FEB;&#x75C7;&#x59D1;&#x5A18;&#xFF0C;&#x6211;&#x51E0;&#x4E4E;&#x4E5F;&#x6CA1;&#x6709;&#x64CD;&#x8FC7;&#x4EC0;&#x4E48;&#x5FC3;&#x3002;&#x201C;&#x751F;&#x6D3B;&#x4ECE;&#x6765;&#x90FD;&#x662F;&#x4E0D;&#x5BB9;&#x6613;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x89C9;&#x5F97;&#x5BB9;&#x6613;&#xFF0C;&#x53EA;&#x662F;&#x6709;&#x4EBA;&#x66FF;&#x4F60;&#x627F;&#x62C5;&#x4E86;&#x800C;&#x5DF2;&#x3002;&#x201D;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0; &#x4EE5;&#x524D;&#x89C9;&#x5F97;&#x81EA;&#x5DF1;&#x4ECE;&#x6765;&#x4E5F;&#x90FD;&#x662F;&#x72EC;&#x5F53;&#x4E00;&#x9762;&#x7684;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0; &#x6240;&#x4EE5;&#xFF0C;&#x5C1D;&#x8BD5;&#x5BA2;&#x6C14;&#x5730;&#x7ED9;&#x623F;&#x5C4B;&#x7BA1;&#x7406;&#x8FDE;&#x53D1;&#x90AE;&#x4EF6;&#xFF0C;&#x6709;&#x4E8B;&#x513F;&#x6CA1;&#x4E8B;&#x513F;&#x53BB;&#x697C;&#x4E0B;&#x529E;&#x516C;&#x5BA4;&#x770B;manager&#x5728;&#x4E0D;&#x5728;&#xFF0C;&#x53BB;&#x94F6;&#x884C;&#x89E3;&#x51B3;&#x8D26;&#x6237;&#x88AB;&#x51BB;&#x7ED3;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4ECE;li&#x59D0;&#x59D0;&#x5BB6;&#x91CC;&#x62D6;&#x5E8A;&#x56DE;&#x5BB6;&#xFF0C;&#x627E;&#x4EBA;&#x5F00;&#x5C0F;&#x8D27;&#x8F66;&#x8FD0;&#x9001;&#x5BB6;&#x5177;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0;&#xA0;&#x65E2;&#x7136;&#x8981;&#x7ED3;&#x679C;&#xFF0C;&#x5C31;&#x8981;&#x597D;&#x597D;&#x5904;&#x7406;&#x95EE;&#x9898;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0; &#x4ECA;&#x5929;&#xFF0C;manager&#x8FC5;&#x901F;&#x5E2E;&#x6211;&#x6362;&#x4E86;&#x574F;&#x6389;&#x7684;&#x95E8;&#x9501;&#xFF0C;&#x6211;&#x521A;&#x8BF4;&#x51B0;&#x7BB1;&#x574F;&#x4E86;&#x4E0B;&#x5348;&#x5C31;&#x7ED9;&#x6211;&#x6362;&#x4E86;&#x65B0;&#x7684;&#xFF0C;&#x8FD8;&#x5F00;&#x59CB;&#x548C;&#x6211;&#x5F00;&#x73A9;&#x7B11;&#xFF0C;&#x6211;&#x867D;&#x7136;&#x542C;&#x4E0D;&#x61C2;&#x4ED6;&#x8BF4;&#x7684;&#x662F;&#x4EC0;&#x4E48;&#x7B11;&#x8BDD;&#xFF0C;&#x4F46;&#x80FD;&#x611F;&#x89C9;&#x4ED6;&#x7684;&#x6001;&#x5EA6;&#x597D;&#x4E86;&#x5F88;&#x591A;&#x3002;&#x4EA4;&#x4E86;&#x5B66;&#x8D39;&#xFF0C;&#x4E5F;&#x627E;&#x5230;&#x4E86;&#x65B0;&#x5BA4;&#x53CB;&#xFF0C;&#x7EC8;&#x4E8E;&#x6709;&#x4E86;&#x4E00;&#x4E2A;&#x6210;&#x578B;&#x7684;&#x7A9D;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0; &#x548C;&#x68A6;&#x7476;&#x8BF4;&#xFF0C;&#x4FE9;&#x4EBA;&#x4F4F;&#x4E5F;&#x633A;&#x597D;&#xFF0C;&#x8981;&#x4E0D;&#x662F;&#x623F;&#x79DF;&#x592A;&#x8D35;&#xFF0C;&#x771F;&#x60F3;&#x5C31;&#x8FD9;&#x4E48;&#x5F85;&#x7740;&#xFF0C;&#x6709;&#x4E2A;&#x91C7;&#x5149;&#x597D;&#x7684;&#x5927;&#x5BA2;&#x5385;&#x6211;&#x5C31;&#x662F;&#x57FA;&#x672C;&#x4E0D;&#x5728;&#x5BB6;&#x4E5F;&#x4F1A;&#x89C9;&#x5F97;&#x5F00;&#x5FC3;&#x7684;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;&#x5979;&#x8BF4;&#xFF0C;&#x4F60;&#x60F3;&#x554A;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;&#x7FFB;&#x767D;&#x773C;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;&#x8FD9;&#x59D1;&#x5A18;&#x6765;&#x4E86;&#x4EE5;&#x540E;&#xFF0C;&#x4E5F;&#x6CA1;&#x5C11;&#x8D70;&#x8DEF;&#xFF0C;&#x53EF;&#x662F;&#x6709;&#x5979;&#x4E00;&#x8D77;&#xFF0C;&#x6211;&#x53CD;&#x5012;&#x6BD4;&#x4E4B;&#x524D;&#x597D;&#x8FC7;&#x4E86;&#x5F88;&#x591A;&#x3002;&#x597D;&#x50CF;&#xFF0C;&#x4E00;&#x5207;&#x90FD;&#x662F;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x7684;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;&#x8FD9;&#x4E00;&#x5468;&#x6765;&#xFF0C;&#x5954;&#x6CE2;&#x6765;&#x53BB;&#x4E4B;&#x5916;&#x7684;&#x671F;&#x5F85;&#x7ADF;&#x662F;&#x5750;&#x4E0B;&#x597D;&#x597D;&#x505A;&#x9898;&#xFF0C;&#x597D;&#x597D;&#x8BFB;&#x4E66;&#xFF0C;&#x6CA1;&#x4EBA;&#x6253;&#x6270;&#x3002;&#x539F;&#x6765;&#x5B89;&#x9759;&#x4E5F;&#x53EF;&#x4EE5;&#x8FD9;&#x4E48;&#x5962;&#x4F88;&#x3002;</p>
<p>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#x60F3;&#x6765;&#xFF0C;&#x4E4B;&#x540E;&#x7684;&#x65E5;&#x5B50;&#xFF0C;&#x8D1F;&#x62C5;&#x91CD;&#xFF0C;&#x538B;&#x529B;&#x5927;&#xFF0C;&#x6050;&#x6015;&#x5728;&#x6240;&#x96BE;&#x514D;&#x3002;&#x53EF;&#x662F;&#x554A;&#xFF0C;&#x65E2;&#x7136;&#x9009;&#x62E9;&#x6765;&#x5230;&#x4E86;&#x8FD9;&#x91CC;&#xFF0C;&#x4E5F;&#x8BB8;&#x5C31;&#x4E0D;&#x8BA1;&#x8F83;&#x8FD9;&#x4E9B;&#x4E86;&#x3002;</p>
<pre><code>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &#x660E;&#x5929;&#x4E00;&#x5207;&#x597D;&#x8BF4;&#x3002;&#x665A;&#x5B89;&#x3002;
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016-08-02]]></title>
      <url>http://yoursite.com/2016/08/02/2016-08-02/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x4ECA;&#x5929;&#x5750;&#x5728;&#x7A97;&#x53F0;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x770B;&#x7740;&#x84DD;&#x5929;&#x767D;&#x4E91;&#x53D1;&#x4E86;&#x4F1A;&#x513F;&#x5446;&#x3002;</p>
<p>&#x8FD8;&#x6709;&#x4E09;&#x5929;&#x5C31;&#x8981;&#x79BB;&#x5F00;&#x4E0A;&#x6D77;&#x4E86;&#x3002;&#x5728;&#x6BCF;&#x4E00;&#x4E2A;&#x5199;&#x8FC7;&#x6587;&#x5B57;&#x7684;&#x5730;&#x65B9;&#x90FD;&#x4F1A;&#x8BF4;&#xFF0C;&#x4E0A;&#x6D77;&#x554A;&#xFF0C;&#x6211;&#x771F;&#x559C;&#x6B22;&#x8FD9;&#x5EA7;&#x57CE;&#x3002;</p>
<p>&#x4E5F;&#x8BB8;&#x53BB;&#x8FC7;&#x5F88;&#x591A;&#x5730;&#x65B9;&#xFF0C;&#x4E5F;&#x8BB8;&#x5C06;&#x8981;&#x53BB;&#x5F88;&#x591A;&#x5730;&#x65B9;&#xFF0C;&#x4E5F;&#x8BB8;&#x770B;&#x8FC7;&#x5F88;&#x591A;&#x98CE;&#x666F;&#xFF0C;&#x4E5F;&#x8BB8;&#x5C06;&#x8981;&#x770B;&#x5F88;&#x591A;&#x98CE;&#x666F;&#xFF0C;&#x4F46;&#x6211;&#x4E0D;&#x4F1A;&#x5FD8;&#x8BB0;&#x5728;&#x6211;&#x8FD8;&#x5E74;&#x8F7B;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E0A;&#x6D77;&#x6240;&#x7ED9;&#x4E88;&#x6211;&#x7684;&#x4E00;&#x5207;&#x3002;</p>
<p>&#x8FD9;&#x91CC;&#x662F;&#x8BA9;&#x6211;&#x5FC3;&#x5B89;&#x7684;&#x5730;&#x65B9;&#x3002;&#x5BF9;&#x4E00;&#x4E2A;&#x4EBA;&#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x5730;&#x65B9;&#x4E0D;&#x4F1A;&#x5F88;&#x591A;&#x7684;&#x3002;</p>
<p>&#x60F3;&#x8D77;&#x5728;&#x6FB3;&#x6D32;&#x7684;&#x65F6;&#x5019;&#x603B;&#x4F1A;&#x770B;&#x661F;&#x7A7A;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x4F4F;&#x8FDB;&#x5927;&#x623F;&#x5B50;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5750;&#x5728;&#x9633;&#x53F0;&#x4E0A;&#x770B;&#x4E86;&#x597D;&#x4E45;&#xFF0C;&#x4E5F;&#x4E0D;&#x8BF4;&#x8BDD;&#xFF0C;&#x4E5F;&#x4E0D;&#x60F3;&#x6709;&#x4EBA;&#x5728;&#x65C1;&#x8FB9;&#x3002;&#x5C31;&#x60F3;&#x8FD9;&#x4E48;&#x770B;&#x7740;&#xFF0C;&#x540E;&#x6765;&#x592A;&#x51B7;&#x4E86;&#x8FDB;&#x4E86;&#x5C4B;&#xFF0C;&#x5750;&#x5728;&#x5730;&#x6BEF;&#x4E0A;&#xFF0C;&#x8111;&#x5B50;&#x91CC;&#x8FD8;&#x662F;&#x661F;&#x7A7A;&#x3002;</p>
<p>&#x5BD2;&#x5047;&#x7684;&#x65F6;&#x5019;&#x88AB;&#x62C9;&#x53BB;Road Trip&#xFF0C;&#x4F4F;&#x8FDB;&#x4E00;&#x4E2A;&#x65C1;&#x8FB9;&#x4EC0;&#x4E48;&#x4E5F;&#x6CA1;&#x6709;&#x7684;&#x5C0F;&#x6728;&#x5C4B;&#xFF0C;&#x8EBA;&#x5728;&#x5E8A;&#x4E0A;&#x5C31;&#x80FD;&#x770B;&#x5230;&#x5929;&#x7A7A;&#x3002;&#x53EF;&#x662F;&#x6211;&#x4E00;&#x4E0A;&#x5E8A;&#x5C31;&#x7761;&#x7740;&#x4E86;&#xFF0C;&#x9192;&#x6765;&#x7684;&#x65F6;&#x5019;&#x51CC;&#x6668;&#x56DB;&#x70B9;&#xFF0C;&#x9519;&#x8FC7;&#x4E86;&#x4E09;&#x70B9;&#x4E8C;&#x5341;&#x7684;&#x53CC;&#x5B50;&#x5EA7;&#x6D41;&#x661F;&#x96E8;&#x3002;</p>
<p>&#x53EF;&#x90A3;&#x4E00;&#x523B;&#xFF0C;&#x4E00;&#x70B9;&#x4E5F;&#x4E0D;&#x89C9;&#x5F97;&#x53EF;&#x60DC;&#x3002;</p>
<p>&#x90A3;&#x4E2A;&#x65F6;&#x5019;&#xFF0C;&#x5FC3;&#x91CC;&#x4E5F;&#x662F;&#x60F3;&#x7740;&#x8FD9;&#x56DB;&#x4E2A;&#x5B57;&#xFF0C;&#x6765;&#x65E5;&#x65B9;&#x957F;&#x3002;&#x661F;&#x7A7A;&#x4E00;&#x76F4;&#x5728;&#x554A;&#x3002;&#x4E0D;&#x7528;&#x6015;&#x3002;</p>
<p>&#x9AD8;&#x4E2D;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x987E;&#x8349;&#x8349;&#x7B2C;&#x4E00;&#x6B21;&#x5728;&#x672C;&#x5B50;&#x4E0A;&#x5199;&#x7ED9;&#x6211;&#x8FD9;&#x53E5;&#x8BDD;&#xFF0C;&#x6765;&#x65E5;&#x65B9;&#x957F;&#x3002;&#x7EC6;&#x7626;&#x7684;&#x5B57;&#x4F53;&#x7279;&#x522B;&#x597D;&#x770B;&#x3002;&#x4F46;&#x5C31;&#x662F;&#x8FD9;&#x79CD;&#x5B57;&#x4F53;&#xFF0C;&#x5979;&#x548C;&#x6211;&#x51B7;&#x6218;&#x3001;&#x95F9;&#x77DB;&#x76FE;&#xFF0C;&#x4E00;&#x4E2A;&#x5B66;&#x671F;&#x6CA1;&#x6709;&#x8BB2;&#x8BDD;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E5F;&#x662F;&#x7528;&#x8FD9;&#x79CD;&#x5B57;&#x4F53;&#x7ED9;&#x6211;&#x5199;&#x4E86;&#x5C0F;&#x7EB8;&#x6761;&#x6765;&#x548C;&#x597D;&#x3002;</p>
<p>&#x90A3;&#x65F6;&#x5019;&#x771F;&#x662F;&#x5E74;&#x8F7B;&#xFF0C;&#x73B0;&#x5728;&#x8C01;&#x8FD8;&#x6709;&#x7CBE;&#x529B;&#x7EA0;&#x7F20;&#x8FD9;&#x4E48;&#x4E45;&#x3002;</p>
<p>&#x53EF;&#x662F;&#x6765;&#x65E5;&#x65B9;&#x957F;&#xFF0C;&#x5230;&#x540E;&#x6765;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x6211;&#x548C;&#x6211;&#x6700;&#x597D;&#x7684;&#x670B;&#x53CB;&#x4E00;&#x5E74;&#x624D;&#x89C1;&#x4E00;&#x9762;&#xFF0C;&#x4E00;&#x9762;&#x624D;&#x51E0;&#x4E2A;&#x5C0F;&#x65F6;&#xFF0C;&#x4E00;&#x676F;&#x5496;&#x5561;&#x6216;&#x8005;&#x4E00;&#x987F;&#x996D;&#x3002;&#x5728;&#x673A;&#x573A;&#x8FD9;&#x6837;&#x5306;&#x5FD9;&#x7684;&#x5730;&#x65B9;&#x3002;</p>
<p>&#x6240;&#x4EE5;&#x542C;&#x4E0A;&#x53BB;&#x6765;&#x65E5;&#x65B9;&#x957F;&#x771F;&#x662F;&#x9EBB;&#x6728;&#x81EA;&#x5DF1;&#x7684;&#x8BF4;&#x8F9E;&#x3002;</p>
<p>&#x5C31;&#x50CF;&#x90A3;&#x5929;&#x6960;&#x6960;&#x548C;&#x6211;&#x8BA8;&#x8BBA;&#x7684;&#x90A3;&#x6837;&#xFF0C;&#x8FD9;&#x4E2A;&#x4E16;&#x754C;&#x4E0A;&#xFF0C;&#x5F88;&#x591A;&#x4EBA;&#x628A;&#x75DB;&#x82E6;&#x5F53;&#x78E8;&#x70BC;&#xFF0C;&#x628A;&#x5E73;&#x51E1;&#x5F53;&#x5E78;&#x798F;&#xFF0C;&#x5728;&#x67D0;&#x79CD;&#x610F;&#x4E49;&#x4E0A;&#x7ED9;&#x81EA;&#x5DF1;&#x627E;&#x5230;&#x501F;&#x53E3;&#xFF0C;&#x627E;&#x5230;&#x5FC3;&#x5B89;&#x7406;&#x5F97;&#x7EE7;&#x7EED;&#x6D3B;&#x4E0B;&#x53BB;&#x7684;&#x501F;&#x53E3;&#x3002;&#x6211;&#x60F3;&#xFF0C;&#x5176;&#x5B9E;&#x662F;&#x65E0;&#x6CD5;&#x5206;&#x8FA8;&#x75DB;&#x82E6;&#x548C;&#x771F;&#x6B63;&#x7684;&#x6109;&#x60A6;&#xFF0C;&#x4E60;&#x60EF;&#x4E86;&#x987A;&#x5E94;&#x4E86;&#x75DB;&#x82E6;&#xFF0C;&#x53CD;&#x800C;&#x5FD8;&#x8BB0;&#x4E86;&#x5982;&#x4F55;&#x89C4;&#x907F;&#x75DB;&#x82E6;&#x3002;&#x4F46;&#x89C4;&#x907F;&#x75DB;&#x82E6;&#xFF0C;&#x5F88;&#x96BE;&#xFF0C;&#x5927;&#x591A;&#x6570;&#x65F6;&#x5019;&#xFF0C;&#x4EBA;&#x7684;&#x60EF;&#x6027;&#x4F1A;&#x7528;&#x7ECF;&#x9A8C;&#x4EE3;&#x66FF;&#x611F;&#x77E5;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;&#x81EA;&#x5DF1;&#x7684;&#x8FD8;&#x662F;&#x522B;&#x4EBA;&#x7684;&#x3002;</p>
<p>&#x53EF;&#x6211;&#x8FD8;&#x662F;&#x8BA4;&#x4E3A;&#xFF0C;&#x81EA;&#x5DF1;&#x7684;&#x611F;&#x53D7;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x3002;&#x54EA;&#x6015;&#x627E;&#x4E0D;&#x5230;&#x8DEF;&#x3002;&#x54EA;&#x6015;&#x56DE;&#x4E0D;&#x5230;&#x539F;&#x70B9;&#x3002;&#x4E5F;&#x8981;&#x5FE0;&#x4E8E;&#x81EA;&#x6211;&#x3002;</p>
<p>&#x665A;&#x5B89;&#x3002;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[温度]]></title>
      <url>http://yoursite.com/2016/07/30/e6-b8-a9-e5-ba-a6/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#xA0;</p>
<p>&#x5728;&#x51FA;&#x95E8;&#x9700;&#x8981;&#x52C7;&#x6C14;&#x7684;&#x65E5;&#x5B50;&#x91CC;&#xFF0C;&#x770B;&#x4E86;&#x4E24;&#x90E8;&#x6E2F;&#x7247;&#x3002;</p>
<p>&#x5F88;&#x4E45;&#x6CA1;&#x770B;&#x6E2F;&#x7247;&#x4E86;&#xFF0C;&#x4E00;&#x76F4;&#x5F88;&#x559C;&#x6B22;&#xFF0C;&#x867D;&#x7136;&#x5BF9;&#x738B;&#x5BB6;&#x536B;&#x65E0;&#x611F;&#xFF0C;&#x4F46;&#x5F88;&#x591A;&#x6E2F;&#x7247;&#x81EA;&#x5E26;&#x5F39;&#x5E55;&#x6548;&#x679C;&#xFF0C;&#x8BED;&#x901F;&#x5FEB;&#xFF0C;&#x8282;&#x594F;&#x5FEB;&#xFF0C;&#x60C5;&#x8282;&#x7D27;&#x51D1;&#xFF0C;&#x968F;&#x4FBF;&#x6311;&#x4E00;&#x90E8;&#x4E0D;&#x81F3;&#x4E8E;&#x50CF;&#x5927;&#x9646;&#x5F88;&#x591A;&#x8A00;&#x4E4B;&#x65E0;&#x7269;&#x7684;&#x7247;&#x5B50;&#x4E00;&#x6837;&#x8BA9;&#x4EBA;&#x6709;&#x6D6A;&#x8D39;&#x65F6;&#x95F4;&#x7684;&#x611F;&#x53F9;&#x3002;</p>
<p>&#x804A;&#x804A;&#x300A;&#x516D;&#x697C;&#x540E;&#x5EA7;&#x300B;&#xFF0C;&#x6797;&#x5609;&#x6B23;&#x5362;&#x5DE7;&#x97F3;&#x5728;&#x91CC;&#x9762;&#x5B9E;&#x5728;&#x592A;&#x7F8E;&#x592A;&#x751C;&#xFF0C;&#x80CC;&#x5FC3;&#x725B;&#x4ED4;&#x88E4;&#x7684;21&#x4E16;&#x7EAA;&#x521D;&#x7684;&#x6D41;&#x884C;&#x6253;&#x626E;&#x5E72;&#x51C0;&#x5229;&#x843D;&#x3002;&#x516D;&#x4E2A;&#x4EBA;&#x6700;&#x7231;&#x73A9;&#x7684;&#x201C;Truth or Dare&#x201D;&#xFF0C;&#x5176;&#x5B9E;&#x4E5F;&#x5C31;&#x662F;&#x771F;&#x5FC3;&#x8BDD;&#x5927;&#x5192;&#x9669;&#x5427;&#x3002;&#x4F60;&#x9009;&#x62E9;&#x8BDA;&#x5B9E;&#xFF0C;&#x6216;&#x8005;&#x5927;&#x80C6;&#x3002;&#x5E74;&#x8F7B;&#x7684;&#x72B6;&#x6001;&#x975E;&#x5E38;&#x660E;&#x663E;&#xFF0C;&#x60F3;&#x54ED;&#x7684;&#x65F6;&#x5019;&#x4E0D;&#x5FCD;&#x7740;&#xFF0C;&#x60F3;&#x95F9;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x95F9;&#xFF0C;&#x4E0D;&#x723D;&#x4E5F;&#x4E0D;&#x618B;&#x7740;&#xFF0C;&#x6323;&#x624E;&#x5C31;&#x662F;&#x6323;&#x624E;&#x3002;</p>
<p>&#x6700;&#x540E;&#x4E00;&#x6BB5;&#x8BDD;&#xFF0C;&#x8BF4;&#x9752;&#x6625;&#x5C31;&#x662F;&#x65B9;&#x7CD6;&#x3002;&#x6211;&#x662F;&#x4E0D;&#x559C;&#x201C;&#x9752;&#x6625;&#x201C;&#x201D;&#x8FD9;&#x4E2A;&#x8BCD;&#x8BED;&#x7684;&#xFF0C;&#x88AB;&#x4FD7;&#x4EBA;&#x7528;&#x70C2;&#x4E86;&#x3002;</p>
<p>&#x4F46;&#x90A3;&#x6BB5;&#x8BDD;&#x91CC;&#x9762;&#x6709;&#x51E0;&#x53E5;&#x8BDD;&#xFF0C;&#x5F88;&#x6709;&#x610F;&#x601D;&#xFF1A;</p>
<blockquote>
<p>&#x8FD9;&#x79CD;&#x751C;&#x871C;&#x662F;&#x8981;&#x4EB2;&#x8EAB;&#x7528;&#x820C;&#x5C16;&#x7684;&#x70ED;&#x91CF;</p>
<p>&#x624D;&#x80FD;&#x878D;&#x5316;&#xFF0C;&#x624D;&#x80FD;&#x54C1;&#x5C1D;</p>
<p>&#x4F60;&#x603B;&#x4E0D;&#x80FD;&#x9694;&#x5CB8;&#x89C2;&#x706B;</p>
<p>&#x4EBA;&#x751F;&#x603B;&#x4F1A;&#x6709;&#x8FD9;&#x4E48;&#x7684;&#x4E00;&#x4E2A;&#x9636;&#x6BB5;</p>
<p>&#x4E00;&#x4E2A;&#x505A;&#x4EC0;&#x4E48;&#x4E5F;&#x5FEB;&#x4E50;&#x7684;&#x9636;&#x6BB5;</p>
<p>&#x4E00;&#x4E2A;&#x8BF4;&#x4EC0;&#x4E48;&#x4E5F;&#x771F;&#x8BDA;&#x7684;&#x9636;&#x6BB5;</p>
<p>&#x4ED6;&#x4EEC;&#x53EF;&#x7B11;&#x4E5F;&#x53EF;&#x7231;</p>
<p>&#x7B11;&#x4ED6;&#x4EEC;</p>
<p>&#x7686;&#x56E0;&#x6211;&#x4EEC;&#x66FE;&#x7ECF;&#x8352;&#x5510;&#x8FC7;</p>
<p>&#x7231;&#x4ED6;&#x4EEC;</p>
<p>&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x4E5F;&#x66FE;&#x7ECF;&#x751C;&#x871C;&#x8FC7;</p>
</blockquote>
<p>&#xA0;</p>
<p>&#x4E0D;&#x80FD;&#x9694;&#x5CB8;&#x89C2;&#x706B;&#x3002;&#x603B;&#x8981;&#x81EA;&#x5DF1;&#x53BB;&#x878D;&#x5316;&#x3002;&#x6211;&#x4F1A;&#x60F3;&#x8D77;Lewen&#x4E4B;&#x524D;&#x548C;&#x6211;&#x8BF4;&#xFF0C;&#x5979;&#x8BF4;&#xFF0C;&#x603B;&#x89C9;&#x5F97;&#x8FD9;&#x4E48;&#x4E45;&#x4E86;&#xFF0C;&#x81EA;&#x5DF1;&#x50CF;&#x662F;&#x81EA;&#x5DF1;&#x751F;&#x547D;&#x7684;&#x65C1;&#x89C2;&#x8005;&#x3002;</p>
<p>&#x6709;&#x7684;&#x65F6;&#x5019;&#x6211;&#x4EFF;&#x4F5B;&#x53C8;&#x8FD9;&#x6837;&#x7684;&#x4F53;&#x4F1A;&#xFF0C;&#x6CA1;&#x6709;&#x8DB3;&#x591F;&#x6295;&#x5165;&#x5730;&#x6D3B;&#xFF0C;&#x9760;&#x7740;&#x60EF;&#x6027;&#x800C;&#x4E0D;&#x662F;&#x52A8;&#x529B;&#x3002;</p>
<p>&#x8FD9;&#x4E09;&#x4E2A;&#x6708;&#xFF0C;&#x5728;&#x4E0A;&#x6D77;&#xFF0C;&#x5FEB;&#x4E50;&#x7684;&#x65F6;&#x5019;&#x5F88;&#x7EAF;&#x7CB9;&#xFF0C;&#x4E5F;&#x53D1;&#x73B0;&#x8FD9;&#x4E00;&#x5E74;&#x8FC7;&#x53BB;&#xFF0C;&#x8BA9;&#x6211;&#x771F;&#x7684;&#x4E0D;&#x5728;&#x610F;&#x522B;&#x4EBA;&#x7684;&#x770B;&#x6CD5;&#x4E86;&#x3002;&#x4F46;&#x8FD9;&#x6837;&#x7684;&#x6D3B;&#x6CD5;&#xFF0C;&#x53CD;&#x800C;&#x8BA9;&#x6211;&#x89C9;&#x5F97;&#x81EA;&#x5DF1;&#x548C;&#x8EAB;&#x8FB9;&#x7684;&#x4EBA;&#x90FD;&#x66F4;&#x52A0;&#x81EA;&#x5728;&#x3002;</p>
<p>&#x4EA4;&#x4E86;&#x5F88;&#x591A;&#x670B;&#x53CB;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x90FD;&#x503C;&#x5F97;&#x3002;&#x53EA;&#x662F;&#xFF0C;&#x6709;&#x4E9B;&#x8BDD;&#x6CA1;&#x8BF4;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;&#x4F1A;&#x4E0D;&#x4F1A;&#x9057;&#x61BE;&#x3002;</p>
<p>&#xA0;</p>
<pre><code>&amp;nbsp;
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Emacs: 从无法入门到放弃]]></title>
      <url>http://yoursite.com/2016/07/27/e4-bd-bf-e7-94-a8emacs-e4-bb-8e-e6-97-a0-e6-b3-95-e5-85-a5-e9-97-a8-e5-88-b0-e6-94-be-e5-bc-83/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#xA0;</p>
<p>&#x88AB;&#x5B89;&#x5229;&#x4F7F;&#x7528;Emacs&#x6765;&#x8FDB;&#x884C;&#x6587;&#x4EF6;&#x7F16;&#x8F91;&#x548C;&#x7BA1;&#x7406;&#xFF0C;&#x6253;&#x5F00;baidu&#x9996;&#x9875;&#x663E;&#x793A;&#x7684;&#x6587;&#x7AE0;&#x662F;<code>&#x300A;&#x5982;&#x4F55;&#x4E00;&#x5E74;&#x6210;&#x4E3A;Emacs&#x5927;&#x795E;&#x300B;</code></p>
<p>&#x4E00;&#x5E74;&#x3002;</p>
<p>&#x4E00;&#x5E74;&#x3002;</p>
<p>&#x4E00;&#x5E74;&#x3002;</p>
<p>&#xFF08;&#x751F;&#x65E0;&#x53EF;&#x604B;&#xFF09;</p>
<p>&#x679C;&#x7136;&#x662F;&quot;&#x795E;&#x7684;&#x7F16;&#x8F91;&#x5668;&quot;&#x3002;</p>
<p>&#x4E0D;&#x8FC7;&#x9274;&#x4E8E;&#x4E00;&#x5207;&#x90FD;&#x8981;&#x4ECE;&#x5165;&#x95E8;&#x5230;&#x653E;&#x5F03;&#xFF0C;&#x6211;&#x51B3;&#x5B9A;&#x5C1D;&#x8BD5;&#x4E00;&#x4E0B;&#x3002;</p>
<p>&#x57FA;&#x672C;&#x64CD;&#x4F5C;&#xFF1A;</p>
<p>1.&#x6253;&#x5F00;&#x6587;&#x4EF6;&#x5939;&#xFF1A; <code>C+x d</code></p>
<p>2.&#x6587;&#x4EF6;&#x76EE;&#x5F55;&#x4E0A;&#x4E00;&#x7EA7;/&#x4E0B;&#x4E00;&#x7EA7;&#xFF1A; <code>C+x &amp;gt;</code> <code>C+x &amp;lt;</code></p>
<p>3.&#x65B0;&#x5EFA;&#x6587;&#x4EF6;&#xFF08;&#x82E5;&#x5B58;&#x5728;&#x5219;&#x6253;&#x5F00;&#xFF09;&#xFF1A; <code>C+x C+f</code></p>
<p>4.&#x526A;&#x5207;&#x5185;&#x5BB9;&#xFF1A; <code>C+space</code> &#x5F00;&#x59CB;Mark <code>M+w</code> &#x590D;&#x5236;</p>
<p>5.&#x4FDD;&#x5B58;&#x6587;&#x4EF6;&#xFF1A; <code>C+x C+s</code></p>
<p>&#x8FD9;&#x51E0;&#x6B65;&#x662F;&#x6700;&#x57FA;&#x672C;&#x7684;&#x4E86;&#xFF0C;&#x4E4B;&#x540E;&#x6162;&#x6162;&#x719F;&#x7EC3;&#xFF0C;&#x6162;&#x6162;&#x66F4;&#x65B0;&#x3002;</p>
<pre><code>&amp;nbsp;
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How to use Markdown as a starter]]></title>
      <url>http://yoursite.com/2016/07/26/how-to-use-markdown-as-a-starter/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot;&gt;
&lt;style type=&quot;text/css&quot;&gt;
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote {
margin: 0;
padding: 0;
}
body {
font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif;
font-size: 13px;
line-height: 18px;
color: #737373;
background-color: white;
margin: 10px 13px 10px 13px;
}
table {
	margin: 10px 0 15px 0;
	border-collapse: collapse;
}
td,th {
	border: 1px solid #ddd;
	padding: 3px 10px;
}
th {
	padding: 5px 10px;
}</p>
<p>a {
color: #0069d6;
}
a:hover {
color: #0050a3;
text-decoration: none;
}
a img {
border: none;
}
p {
margin-bottom: 9px;
}
h1,
h2,
h3,
h4,
h5,
h6 {
color: #404040;
line-height: 36px;
}
h1 {
margin-bottom: 18px;
font-size: 30px;
}
h2 {
font-size: 24px;
}
h3 {
font-size: 18px;
}
h4 {
font-size: 16px;
}
h5 {
font-size: 14px;
}
h6 {
font-size: 13px;
}
hr {
margin: 0 0 19px;
border: 0;
border-bottom: 1px solid #ccc;
}
blockquote {
padding: 13px 13px 21px 15px;
margin-bottom: 18px;
font-family:georgia,serif;
font-style: italic;
}
blockquote:before {
content:&quot;\201C&quot;;
font-size:40px;
margin-left:-10px;
font-family:georgia,serif;
color:#eee;
}
blockquote p {
font-size: 14px;
font-weight: 300;
line-height: 18px;
margin-bottom: 0;
font-style: italic;
}
code, pre {
font-family: Monaco, Andale Mono, Courier New, monospace;
}
code {
background-color: #fee9cc;
color: rgba(0, 0, 0, 0.75);
padding: 1px 3px;
font-size: 12px;
-webkit-border-radius: 3px;
-moz-border-radius: 3px;
border-radius: 3px;
}
pre {
display: block;
padding: 14px;
margin: 0 0 18px;
line-height: 16px;
font-size: 11px;
border: 1px solid #d9d9d9;
white-space: pre-wrap;
word-wrap: break-word;
}
pre code {
background-color: #fff;
color:#737373;
font-size: 11px;
padding: 0;
}
sup {
font-size: 0.83em;
vertical-align: super;
line-height: 0;
}</p>
<ul>
<li>
<p>{
-webkit-print-color-adjust: exact;
}
@media screen and (min-width: 914px) {
body {
width: 854px;
margin:10px auto;
}
}
@media print {
body,code,pre code,h1,h2,h3,h4,h5,h6 {
	color: black;
}
table, pre {
	page-break-inside: avoid;
}
}&lt;/style&gt;
&lt;title&gt;
&lt;/title&gt;</p>
<p>&#xA0;</p>
<p>Recently, I am desired&#xA0;to write wordpress for do some summarization.&#xA0;But the format and writing style keep confusing me.</p>
</li>
</ul>
<h1 id=""> <a href="#" class="header-anchor">#</a></h1>
<pre><code>Let&amp;#39;s try Markdown this time!

There are two ways to apply Markdown in wordpress:
</code></pre>
<h4 id=""> <a href="#" class="header-anchor">#</a></h4>
<pre><code>1\. Install plugins:

The recommended plugin is [Markdown for WordPress and bbPress](https://wordpress.org/plugins/markdown-for-wordpress-and-bbpress/) But it doesn&amp;#39;t work on my wordpress. Sad.
</code></pre>
<h4 id=""> <a href="#" class="header-anchor">#</a></h4>
<pre><code>2\. Using Markdown Tools&amp;nbsp;

You can write the article in advace using softwares before paste it to the blog.

I prefer this way since using Wordpress to write is a huge disaster.
</code></pre>
<h6 id=""> <a href="#" class="header-anchor">#</a></h6>
<pre><code>Step 1: Know about the grammar of Markdown :

[CMD Markdown](https://www.zybuluo.com/mdeditor) is really a good tutorial. Or any other tutorials, whatever.
</code></pre>
<h6 id=""> <a href="#" class="header-anchor">#</a></h6>
<pre><code>Step 2: Download a good Markdown Tool :

It&amp;#39;s very convenience for us to write and review at the same time.&amp;nbsp;

So, you can download [Mou](http://25.io/mou/) if&amp;nbsp;you use Mac.
</code></pre>
<h6 id=""> <a href="#" class="header-anchor">#</a></h6>
<pre><code>Step 3: Keep practising to be perfect :

As you can see, this article is written in Markdown.

**_Cheers!_**

&amp;nbsp;

&amp;nbsp;

&amp;nbsp;
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016-07-21]]></title>
      <url>http://yoursite.com/2016/07/21/2016-07-21/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x4E00;&#x3001;</p>
<pre><code>&#x6211;&#x6D3B;&#x5F97;&#x8D8A;&#x6765;&#x8D8A;&#x5766;&#x7136;&#x7684;&#x4E00;&#x4E2A;&#x4FE1;&#x53F7;&#x5C31;&#x662F;&#xFF0C;&#x6211;&#x80FD;&#x52C7;&#x6562;&#x5730;&#x548C;&#x522B;&#x4EBA;&#x5B89;&#x5229;&#x81EA;&#x5DF1;&#x7684;&#x516C;&#x4F17;&#x53F7;&#x4E86;&#x3002;

&#x5173;&#x4E8E;&#x8FD9;&#x4E2A;&#x516C;&#x4F17;&#x53F7;&#xFF0C;&#x91CC;&#x9762;&#x7684;&#x6587;&#x7AE0;&#x5E26;&#x7740;&#x60C5;&#x7EEA;&#x7684;&#x6210;&#x5206;&#x5F88;&#x591A;&#x3002;&#x800C;&#x6211;&#x7684;&#x4E60;&#x60EF;&#x662F;&#xFF0C;&#x5728;&#x73B0;&#x5B9E;&#x751F;&#x6D3B;&#x4E2D;&#x9762;&#x5BF9;&#x9762;&#x8BB2;&#x8BDD;&#x597D;&#x597D;&#x76F8;&#x5904;&#xFF0C;&#x8FD9;&#x6837;&#x624D;&#x662F;&#x771F;&#x5B9E;&#x7684;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x865A;&#x65E0;&#x5730;&#x6BEB;&#x65E0;&#x57FA;&#x7840;&#x5730;&#x901A;&#x8FC7;&#x8868;&#x60C5;&#x548C;&#x6587;&#x5B57;&#x6765;&#x4F20;&#x8FBE;&#x5F7C;&#x6B64;&#x7684;&#x5FC3;&#x7406;&#x3002;&#x7F51;&#x7EDC;&#x66F4;&#x5E94;&#x8BE5;&#x662F;&#xFF0C;&#x8BA9;&#x4EB2;&#x5BC6;&#x5173;&#x7CFB;&#x66F4;&#x65B9;&#x4FBF;&#xFF0C;&#x4E0D;&#x8BE5;&#x662F;&#x8BA9;&#x964C;&#x751F;&#x7684;&#x4EBA;&#x53D8;&#x6210;&#x719F;&#x4EBA;&#xFF0C;&#x8FD9;&#x662F;&#x4E0D;&#x53EF;&#x80FD;&#x3002;&#x5373;&#x4F7F;&#x6709;&#x53EF;&#x80FD;&#xFF0C;&#x4E5F;&#x662F;&#x8106;&#x5F31;&#x7684;&#xFF0C;&#x4E0D;&#x582A;&#x4E00;&#x51FB;&#x7684;&#x3002;

&#x540C;&#x65F6;&#xFF0C;&#x5728;&#x5F88;&#x957F;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x91CC;&#xFF0C;&#x6211;&#x4E5F;&#x5F88;&#x4E0D;&#x613F;&#x8BA9;&#x522B;&#x4EBA;&#x5B8C;&#x5168;&#x770B;&#x900F;&#x6211;&#x7684;&#x5185;&#x5FC3;&#xFF0C;&#x8FD9;&#x8BA9;&#x6211;&#x6050;&#x60E7;&#x548C;&#x4E0D;&#x77E5;&#x6240;&#x63AA;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x73B0;&#x5728;&#xFF0C;&#x6210;&#x719F;&#x5730;&#x770B;&#x6211;&#x4F9D;&#x65E7;&#x4E0D;&#x60F3;&#x8BA9;&#x522B;&#x4EBA;&#x5B8C;&#x5168;&#x770B;&#x900F;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x89C9;&#x5F97;&#x6211;&#x4E5F;&#x4E0D;&#x5FC5;&#x8981;&#x9690;&#x85CF;&#x81EA;&#x5DF1;&#x672C;&#x6765;&#x7684;&#x4E00;&#x9762;&#x3002;&#x6211;&#x786E;&#x5B9E;&#x60F3;&#x6CD5;&#x5F88;&#x591A;&#xFF0C;&#x5C0F;&#x5FC3;&#x601D;&#x5F88;&#x591A;&#xFF0C;&#x6211;&#x76F8;&#x4FE1;&#x8FD9;&#x4E0D;&#x4F1A;&#x8BA9;&#x4EBA;&#x56E0;&#x6B64;&#x800C;&#x653E;&#x5F03;&#x7231;&#x6211;&#x6216;&#x8005;&#x758F;&#x8FDC;&#x6211;&#xFF0C;&#x8FDC;&#x79BB;&#x6211;&#x3002;

&#x6587;&#x5B57;&#x8FD8;&#x662F;&#x8981;&#x5199;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x8981;&#x5199;&#x597D;&#xFF0C;&#x8981;&#x597D;&#x597D;&#x5199;&#xFF0C;&#x8981;&#x8BA4;&#x771F;&#x8E0F;&#x5B9E;&#x5730;&#xFF0C;&#x8A00;&#x4E4B;&#x6709;&#x7269;&#x5730;&#x5199;&#x3002;&#x751A;&#x81F3;&#x5199;&#x51FA;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#x611F;&#x89C9;&#x6765;&#x3002;

&#x4E8C;&#x3001;

&#x6628;&#x5929;&#x89C1;&#x4E86;&#x5C0F;&#x5218;&#x6D77;&#xFF0C;&#x4E00;&#x4E2A;&#x9AD8;&#x9AD8;&#x7684;&#x59D1;&#x5A18;&#xFF0C;&#x505A;&#x82B1;&#x827A;&#xFF0C;&#x8BDD;&#x5520;&#xFF0C;&#x62C9;&#x62C9;&#xFF0C;&#x53EF;&#x7231;&#x3002;&#x6211;&#x4E0D;&#x662F;&#x8D34;&#x6807;&#x7B7E;&#x54E6;&#xFF0C;&#x5F53;&#x6211;&#x65E0;&#x6CD5;&#x5B8C;&#x6574;&#x5730;&#x5199;&#x51FA;&#x4E00;&#x4E2A;&#x4EBA;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x66F4;&#x503E;&#x5411;&#x4E8E;&#x8BB0;&#x5F55;&#x4E00;&#x4E9B;&#x7279;&#x5F81;&#x3002;&#x5927;&#x5B66;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x5C31;&#x50CF;&#x6D77;&#x7EF5;&#x5438;&#x6C34;&#x4E00;&#x6837;&#xFF0C;&#x8FEB;&#x4E0D;&#x53CA;&#x5F85;&#x5730;&#x89C1;&#x8BC6;&#x5404;&#x79CD;&#x5404;&#x6837;&#x7684;&#x4EBA;&#xFF0C;&#x8BA9;&#x5404;&#x79CD;&#x4E16;&#x754C;&#x89C2;&#x51B2;&#x51FB;&#x6211;&#xFF0C;&#x8FEB;&#x4E0D;&#x53CA;&#x5F85;&#x62D3;&#x5C55;&#x81EA;&#x5DF1;&#x5BF9;&#x4E16;&#x754C;&#x8BA4;&#x77E5;&#x7684;&#x8FB9;&#x754C;&#x3002;

&#x540E;&#x6765;&#xFF0C;&#x6211;&#x6162;&#x6162;&#x953B;&#x70BC;&#x5230;&#x80FD;&#x591F;&#x81EA;&#x5DF1;&#x719F;&#x7EC3;&#x9009;&#x62E9;&#x60F3;&#x8981;&#x4EA4;&#x7684;&#x670B;&#x53CB;&#xFF0C;&#x60F3;&#x8981;&#x9760;&#x8FD1;&#x7684;&#x4EBA;&#xFF0C;&#x60F3;&#x8981;&#x8C08;&#x8BDD;&#x7684;&#x5BF9;&#x8C61;&#x3002;&#x67D0;&#x79CD;&#x610F;&#x4E49;&#x4E0A;&#x6765;&#x8BF4;&#xFF0C;&#x65F6;&#x95F4;&#x6210;&#x672C;&#x5728;&#x4E00;&#x65B9;&#x9762;&#x7684;&#x51CF;&#x5C11;&#x610F;&#x5473;&#x7740;&#x6295;&#x5165;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x9886;&#x57DF;&#xFF0C;&#x5927;&#x6982;&#x66FE;&#x7ECF;&#x7684;&#x6211;&#x786E;&#x5B9E;&#x7A7A;&#x865A;&#x5427;&#x3002;

&#x5C0F;&#x5218;&#x6D77;&#x7ED9;&#x6211;&#x4E86;&#x4E00;&#x53EA;&#x82B1;&#xFF0C;&#x6211;&#x517B;&#x5728;&#x4E86;&#x6C34;&#x676F;&#x91CC;&#xFF0C;&#x53EF;&#x60DC;&#x4ECA;&#x5929;&#x56DE;&#x6765;&#x7684;&#x65F6;&#x5019;&#x5DF2;&#x7ECF;&#x6709;&#x70B9;&#x67AF;&#x840E;&#x4E86;&#x3002;&#x53EF;&#x4EE5;&#x505A;&#x6210;&#x5E72;&#x82B1;&#x3002;

&#x4E09;&#x3001;

&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x8FD9;&#x4E2A;&#x535A;&#x5BA2;&#x53D8;&#x6210;&#x6D41;&#x6C34;&#x8D26;&#x535A;&#x5BA2;&#x3002;&#x6211;&#x5C31;&#x505C;&#x7B14;&#xFF0C;&#x4E0D;&#x5199;&#x4E86;&#x3002;

&#x4ECA;&#x5929;&#x7684;BGM&#x662F;&#x738B;&#x83F2;&#x300A;&#x77DC;&#x6301;&#x300B;&#x3002;Nighty
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开篇：打碎浅薄和矫情]]></title>
      <url>http://yoursite.com/2016/07/21/e5-bc-80-e7-af-87-ef-bc-9a-e6-89-93-e7-a2-8e-e6-b5-85-e8-96-84-e5-92-8c-e7-9f-ab-e6-83-85/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x6240;&#x8C13;&#x5F00;&#x7BC7;&#xFF0C;&#x662F;&#x8FD9;&#x4E2A;&#x535A;&#x5BA2;&#x7684;&#x5F00;&#x7BC7;&#x3002;</p>
<p>&#x6211;&#x5199;&#x5B57;&#x7684;&#x5386;&#x53F2;&#x5F88;&#x957F;&#xFF0C;&#x6362;&#x4E86;&#x5F88;&#x591A;&#x5E73;&#x53F0;&#x3002;&#x5148;&#x884C;&#x603B;&#x7ED3;&#xFF0C;&#x5B57;&#x6570;&#x4E0D;&#x7B97;&#x60CA;&#x4EBA;&#xFF0C;&#x4F46;&#x4E5F;&#x4E0D;&#x7B97;&#x5C11;&#x4E86;&#x3002;</p>
<p>&#x5927;&#x81F4;&#x5982;&#x4E0B;&#xFF1A;</p>
<hr>
<p>2006- 2013&#x5E74;&#xFF1A; <a href="http://user.qzone.qq.com/576070839/main" target="_blank" rel="external">QQ&#x7A7A;&#x95F4;</a>&#xFF0C;107&#x7BC7;&#x65E5;&#x5FD7;&#xFF0C;&#x5176;&#x4E2D;100&#x7BC7;&#x5DE6;&#x53F3;&#x662F;&#x539F;&#x521B;&#xFF0C;&#x5E73;&#x5747;&#x6BCF;&#x7BC7;&#x5B57;&#x6570;&#x8FBE;&#x5230;1000&#x5B57;&#x3002;</p>
<p>2013- &#x81F3;&#x4ECA;&#xFF1A;&#x7B80;&#x4E66;&#xFF0C;58&#x7BC7;&#x6587;&#x7AE0;&#xFF08;&#x542B;&#x516C;&#x5F00;&#x548C;&#x4E0D;&#x516C;&#x5F00;&#xFF09;&#xFF0C;&#x5171;&#x8BA1;43898&#x5B57;&#x3002;</p>
<p>&#x516C;&#x4F17;&#x53F7;&#xFF1A;&#x770B;&#x4E0D;&#x89C1;&#x7684;&#x57CE;&#x5E02;&#xFF08;&#x5FAE;&#x4FE1;&#x641C;&#x7D22;&#x516C;&#x4F17;&#x53F7;&#xFF1A;alohomoracity&#xFF09;&#x4E5F;&#x5728;&#x4E0D;&#x65AD;&#x66F4;&#x65B0;&#x539F;&#x521B;&#x957F;&#x6587;+&#x77ED;&#x6587;&#x4E2D;&#x3002;</p>
<hr>
<p>&#x53EF;&#x60DC;&#xFF0C;&#x8BA4;&#x771F;&#x770B;&#x6765;&#xFF0C;&#x8FD9;&#x4E9B;&#x5730;&#x65B9;&#x8BB0;&#x5F55;&#x7684;&#x66F4;&#x591A;&#x662F;&#x7EC6;&#x5C0F;&#x7684;&#x751F;&#x6D3B;&#xFF0C;&#x4E2A;&#x4EBA;&#x60C5;&#x611F;&#x503E;&#x5411;&#x5F88;&#x91CD;&#xFF0C;&#x4E0D;&#x5F97;&#x4E0D;&#x8BF4;&#xFF0C;&#x5728;&#x8BB0;&#x5F55;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x6211;&#x5BF9;&#x4E8B;&#x7269;&#x4F1A;&#x53D8;&#x5F97;&#x66F4;&#x60C5;&#x7EEA;&#x5316;&#xFF0C;&#x5728;&#x4E0D;&#x65AD;&#x5F3A;&#x5316;&#x81EA;&#x5DF1;&#x7684;&#x611F;&#x53D7;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x6709;&#x68B3;&#x7406;&#x5E73;&#x9759;&#x7684;&#x597D;&#x5904;&#xFF0C;&#x4F46;&#x4E5F;&#x786E;&#x5B9E;&#x5728;&#x67D0;&#x79CD;&#x7A0B;&#x5EA6;&#x4E0A;&#x4F1A;&#x9020;&#x6210;&#x6211;&#x60C5;&#x611F;&#x5BFC;&#x5411;&#x7684;&#x6027;&#x683C;&#x3002;</p>
<p>&#x8FD9;&#x4E00;&#x70B9;&#xFF0C;&#x4ECE;&#x7B80;&#x4E66;&#x540E;&#x6BB5;&#x7684;&#x8BB0;&#x5F55;&#x4E2D;&#x5C24;&#x5176;&#x660E;&#x663E;&#x3002;&#x5728;Adelaide&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E16;&#x754C;&#x5F88;&#x5C0F;&#xFF0C;&#x53C8;&#x521A;&#x4ECE;&#x4E00;&#x4E2A;&#x60C5;&#x6DF1;&#x4E49;&#x91CD;&#x7684;Team&#x4E2D;&#x8131;&#x79BB;&#x51FA;&#x6765;&#xFF0C;&#x603B;&#x6CA1;&#x6CD5;&#x628A;&#x81EA;&#x8D1F;&#x3001;&#x77EB;&#x60C5;&#x5BA2;&#x89C2;&#x770B;&#x5F85;&#xFF0C;&#x52A0;&#x4E0A;Projects&#x591A;&#xFF0C;&#x4E0E;&#x8EAB;&#x8FB9;&#x7684;&#x4EBA;&#x76F8;&#x5904;&#x5173;&#x7CFB;&#x7B80;&#x5355;&#x53C8;&#x590D;&#x6742;&#xFF0C;&#x6613;&#x6012;&#x6613;&#x5D29;&#x6E83;&#xFF0C;&#x4E5F;&#x6613;&#x559C;&#x6613;&#x6EE1;&#x8DB3;&#x3002;</p>
<p>&#x4F46;&#x7531;&#x8877;&#x5730;&#xFF0C;&#x611F;&#x8C22;&#x7ECF;&#x5386;&#x8FC7;&#x7684;&#x65E5;&#x5B50;&#xFF0C;&#x6BCF;&#x6B21;&#x60C5;&#x7EEA;&#x7684;&#x6765;&#x4E34;&#x6216;&#x79BB;&#x5F00;&#xFF0C;&#x90FD;&#x8BA9;&#x6211;&#x5BF9;&#x8FD9;&#x4E2A;&#x4E16;&#x754C;&#x591A;&#x4E86;&#x89E3;&#x4E00;&#x5206;&#x3002;</p>
<p>&#x51B7;&#x9759;&#x4E0E;&#x51B7;&#x6F20;&#x672C;&#x5C31;&#x4E0D;&#x662F;&#x6211;&#x7684;&#x4F5C;&#x98CE;&#xFF0C;&#x4E0D;&#x8FC7;&#x662F;&#x6CE2;&#x6F9C;&#x4E0D;&#x60CA;&#x4E86;&#x800C;&#x5DF2;&#x3002;</p>
<p>&#x53EF;&#x6162;&#x6162;&#x5730;&#xFF0C;&#x5728;&#x4E0E;&#x6570;&#x636E;&#x3001;&#x4EE3;&#x7801;&#x6253;&#x4EA4;&#x9053;&#x7684;&#x65F6;&#x5149;&#x91CC;&#xFF0C;&#x5728;&#x548C;&#x7A0B;&#x5E8F;&#x5458;&#x8D8A;&#x8D70;&#x8D8A;&#x8FD1;&#xFF0C;&#x8D8A;&#x804A;&#x8D8A;&#x591A;&#x7684;&#x65F6;&#x5149;&#x91CC;&#xFF0C;&#x5728;&#x65E0;&#x6CD5;&#x4ECE;IT&#x8FD9;&#x4E2A;&#x4E00;&#x9897;&#x8D5B;&#x7279;&#x7684;&#x884C;&#x4E1A;&#x91CC;&#x8131;&#x79BB;&#x51FA;&#x6765;&#x7684;&#x65F6;&#x5149;&#x91CC;&#xFF0C;&#x60F3;&#x8981;&#x628A;&#x81EA;&#x5DF1;&#x5851;&#x9020;&#x6210;&#x4E00;&#x4E2A;&#x903B;&#x8F91;&#x80FD;&#x529B;&#x5353;&#x8D8A;&#xFF0C;&#x601D;&#x7EF4;&#x654F;&#x6377;&#xFF0C;&#x5224;&#x65AD;&#x529B;&#x4E00;&#x6D41;&#x7684;&#x59D1;&#x5A18;&#x3002;&#x4E0D;&#xFF0C;&#x6211;&#x662F;&#x8BF4;&#x4EBA;&#x3002;</p>
<p>&#x4ECE;&#x4E00;&#x5F00;&#x59CB;&#xFF0C;&#x6211;&#x7684;&#x601D;&#x7EF4;&#x91CC;&#x5E26;&#x7740;&#x6027;&#x522B;&#x7684;&#x89C2;&#x5FF5;&#xFF0C;&#x7ED9;&#x4E86;&#x81EA;&#x5DF1;&#x9000;&#x8DEF;&#x548C;&#x501F;&#x53E3;&#xFF0C;&#x540E;&#x6765;&#x53D1;&#x73B0;&#x8FD9;&#x624D;&#x662F;&#x6700;&#x5927;&#x7684;&#x95EE;&#x9898;&#x3002;&#x7537;&#x751F;&#x548C;&#x5973;&#x751F;&#x5728;&#x751F;&#x7406;&#x4E0A;&#x6784;&#x9020;&#x7684;&#x4E0D;&#x540C;&#xFF0C;&#x786E;&#x5B9E;&#x4F1A;&#x5BFC;&#x81F4;&#x5148;&#x5929;&#x4F18;&#x52BF;&#x548C;&#x601D;&#x7EF4;&#x65B9;&#x5F0F;&#x7684;&#x5DEE;&#x5F02;&#xFF0C;&#x4F46;&#x5176;&#x5B9E;&#x4E25;&#x683C;&#x8BF4;&#x6765;&#xFF0C;&#x5728;&#x6CA1;&#x5230;&#x62FC;&#x5929;&#x8D4B;&#x7684;&#x7A0B;&#x5EA6;&#xFF0C;&#x8FD9;&#x70B9;&#x5DEE;&#x5F02;&#x5E76;&#x4E0D;&#x80FD;&#x4F5C;&#x4E3A;&#x6211;&#x4EFB;&#x4F55;&#x5931;&#x8D25;&#x6216;&#x8005;&#x4E0D;&#x601D;&#x8FDB;&#x53D6;&#x7684;&#x501F;&#x53E3;&#x3002;&#x4E00;&#x70B9;&#x70B9;&#x4E5F;&#x4E0D;&#x5E94;&#x8BE5;&#x3002;</p>
<p>&#x53E6;&#x4E00;&#x65B9;&#x9762;&#xFF0C;&#x4E00;&#x4E2A;&#x5982;&#x6211;&#x822C;&#x9A84;&#x50B2;&#x7684;&#x4EBA;&#xFF0C;&#x81EA;&#x8BE9;&#x5C31;&#x662F;&#x8981;&#x517C;&#x987E;&#x903B;&#x8F91;&#x548C;&#x611F;&#x60C5;&#x7684;&#x3002;&#x4E00;&#x6837;&#x4E5F;&#x4E0D;&#x53EF;&#x4EE5;&#x653E;&#xFF0C;&#x4E00;&#x6837;&#x4E5F;&#x4E0D;&#x53EF;&#x4EE5;&#x8F93;&#x3002;</p>
<p>&#x611F;&#x8C22;Leon&#x7ED9;&#x6211;&#x5F04;&#x4E86;&#x8FD9;&#x4E2A;Wordpress&#xFF0C;&#x4E70;&#x4E86;&#x57DF;&#x540D;&#xFF0C;&#x4E4B;&#x540E;&#x6709;&#x673A;&#x4F1A;&#x60F3;&#x81EA;&#x5DF1;&#x5C1D;&#x8BD5;&#x4E00;&#x4E0B;Hexo&#x3002;&#x4E4B;&#x524D;&#x6211;&#x4E00;&#x76F4;&#x6CA1;&#x6709;&#x73CD;&#x60DC;&#xFF0C;&#x6CA1;&#x6709;&#x7528;&#x8D77;&#x6765;&#x3002;</p>
<p>&#x90A3;&#x4E48;&#xFF0C;&#x5728;&#x8FD9;&#x4E2A;&#x591C;&#x6DF1;&#x4EBA;&#x9759;&#x7684;&#x665A;&#x4E0A;&#xFF0C;&#x5728;&#x6211;&#x5BB3;&#x6015;&#x4EBA;&#x751F;&#x505C;&#x6EDE;&#x4E0D;&#x524D;&#x7684;&#x665A;&#x4E0A;&#xFF0C;&#x6211;&#x8FD8;&#x4FDD;&#x7559;&#x7740;&#x76F2;&#x76EE;&#x7684;&#x4FE1;&#x5FC3;&#xFF0C;&#x671F;&#x5F85;&#x7740;&#x6211;&#x80FD;&#x5728;&#x8FD9;&#x91CC;&#x66F4;&#x597D;&#x5730;&#x8BB0;&#x5F55;&#xFF0C;&#x770B;&#x770B;&#x662F;&#x4E0D;&#x662F;&#x771F;&#x7684;&#x80FD;&#x201C;&#x6253;&#x7834;&#x6D45;&#x8584;&#x548C;&#x77EB;&#x60C5;&#x201D;&#xFF0C;&#x5982;&#x6211;&#x60F3;&#x7684;&#x90A3;&#x6837;&#xFF0C;&#x6210;&#x4E3A;&#x60F3;&#x8981;&#x6210;&#x4E3A;&#x7684;&#x4EBA;&#x3002;</p>
]]></content>
    </entry>
    
  
  
</search>

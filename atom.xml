<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Star</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-28T20:03:06.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Star</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构：树</title>
    <link href="http://yoursite.com/2017/02/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/"/>
    <id>http://yoursite.com/2017/02/28/数据结构：树/</id>
    <published>2017-02-28T19:12:00.000Z</published>
    <updated>2017-02-28T20:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文是总结Tree这种结构的常用知识点，暂时总结Binary Tree。</p>
<h3 id="why-tree">Why Tree?</h3>
<p>因为树结合了其他数据结构的优势：</p>
<ul>
<li>顺序数组： 用Binary Search查找会很快。</li>
<li>链表：插入和删除会非常快，不需要shift值。</li>
</ul>
<h3 id="基本概念">基本概念：</h3>
<ul>
<li>根： 树的顶部。</li>
<li>父节点</li>
<li>子节点</li>
<li>叶节点：没有子节点的节点。</li>
<li>Leve（高度）：代表有几代。</li>
</ul>
<h3 id="平衡树和非平衡树">平衡树和非平衡树</h3>
<p>平衡树：
左右子树及其的高度相差&lt;=1，并且左右子树也是平衡树。
<img src="/Users/star/.atom/evnd/tmp/clipboard_20170228_144630.png" alt="Alt text" title="Optional title"></p>
<h3 id="full-tree-和-complete-tree">Full Tree 和 Complete Tree：</h3>
<ul>
<li>Full Tree:每个节点都有0/2个子节点。</li>
<li>Complete Tree:除了最右边的节点，其他节点都是满节点，并且都靠左。</li>
</ul>
<p><img src="/Users/star/.atom/evnd/tmp/clipboard_20170228_150254.png" alt="Alt text" title="Optional title"></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本文是总结Tree这种结构的常用知识点，暂时总结Binary Tree。&lt;/p&gt;
&lt;h3 id=&quot;why-tree&quot;&gt;Why Tree?&lt;/h3&gt;
&lt;p&gt;因为树结合了其他数据
    
    </summary>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 388. Longest Absolute File Path</title>
    <link href="http://yoursite.com/2017/02/28/Leetcode-388-Longest-Absolute-File-Path/"/>
    <id>http://yoursite.com/2017/02/28/Leetcode-388-Longest-Absolute-File-Path/</id>
    <published>2017-02-28T18:52:41.000Z</published>
    <updated>2017-02-28T19:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Suppose we abstract our file system by a string in the following manner:</p>
<p>The string &quot;dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext&quot; represents:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dir</div><div class="line">    subdir1</div><div class="line">    subdir2</div><div class="line">        file.ext</div></pre></td></tr></table></figure></p>
<p>The directory dir contains an empty sub-directory subdir1 and a sub-directory subdir2 containing a file file.ext.</p>
<p>The string &quot;dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext&quot; represents:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dir</div><div class="line">    subdir1</div><div class="line">        file1.ext</div><div class="line">        subsubdir1</div><div class="line">    subdir2</div><div class="line">        subsubdir2</div><div class="line">            file2.ext</div></pre></td></tr></table></figure></p>
<p>The directory dir contains two sub-directories subdir1 and subdir2. subdir1 contains a file file1.ext and an empty second-level sub-directory subsubdir1. subdir2 contains a second-level sub-directory subsubdir2 containing a file file2.ext.</p>
<p>We are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is &quot;dir/subdir2/subsubdir2/file2.ext&quot;, and its length is 32 (not including the double quotes).</p>
<p>Given a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return 0.</p>
<p>Note:
The name of a file contains at least a . and an extension.
The name of a directory or sub-directory will not contain a ..
Time complexity required: O(n) where n is the size of the input string.</p>
<p>Notice that a/aa/aaa/file1.txt is not the longest file path, if there is another path aaaaaaaaaaaaaaaaaaaaa/sth.png.</p>
<h3 id="explaination">Explaination:</h3>
<p>计算每个文件是第几level，记下到现在为止的文件path长度，和当前最长的比较。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int lengthLongestPath(String input) &#123;</div><div class="line">        String[] paths = input.split(&quot;\n&quot;);</div><div class="line">        int[] stack = new int[paths.length + 1];</div><div class="line">        int maxLen = 0;</div><div class="line">        int curLen = 0;</div><div class="line">        for(String s: paths) &#123;</div><div class="line">            // get level of the s</div><div class="line">            int lev = s.lastIndexOf(&apos;\t&apos;)+1;</div><div class="line">            // get curLen</div><div class="line">            curLen= stack[lev+1] = stack[lev]+s.length()-lev+1;</div><div class="line">            // if find file, get the file path length</div><div class="line">            if (s.contains(&quot;.&quot;)) &#123;</div><div class="line">                maxLen = Math.max(maxLen, curLen-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return maxLen;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Suppose we abstract our file system by a string in the
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>云计算Project：Twitter大数据分析</title>
    <link href="http://yoursite.com/2017/02/27/%E4%BA%91%E8%AE%A1%E7%AE%97Project%EF%BC%9ATwitter%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/02/27/云计算Project：Twitter大数据分析/</id>
    <published>2017-02-28T01:37:26.000Z</published>
    <updated>2017-02-28T04:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文是Twitter Analytics on the Cloud项目的介绍及分析总结。小组作业当时做的匆忙，现在再思考下可以优化的地方很多。感谢队友@shuangshuang 和 @烟酱。</p>
<h2 id="项目介绍">项目介绍</h2>
<p>目标：</p>
<ul>
<li>在云上建立一个高性能又可靠的web服务。</li>
<li>设计，开发和部署并优化服务器以能够处理每秒上万次请求的高负载。</li>
<li>在一个1TB的数据集上完成ETL并载入到Mysql和HBase中。</li>
<li>设计MySQL和HBase并优化配置，提高性能。</li>
<li>探索基于云的web服务存在瓶颈的方法，并提高性能。</li>
</ul>
<h2 id="基本结构">基本结构：</h2>
<p>￼￼￼￼￼
<img src="http://i.imgur.com/qMn31B4.png" alt=""></p>
<h3 id="前端">前端：</h3>
<ul>
<li>通过HTTP GET请求访问web服务，不同的请求有不同的地址，后面有不同参数。</li>
<li>返回相应的响应时，必须要在持续若干个小时的测试中正常运行。</li>
<li>web服务不能拒绝请求，要能承受高负载。</li>
</ul>
<h3 id="后端">后端：</h3>
<ul>
<li>保存用来查询的数据文件</li>
<li>比较SQL(MySQL)和NoSQL(HBase)</li>
<li>比较不同数据集不同查询类型的表现，来决定如何实现后端。</li>
</ul>
<h3 id="数据集">数据集：</h3>
<p>Twitter数据集，大于1T，JSON格式存储。</p>
<h2 id="项目实战">项目实战</h2>
<h3 id="搭建前端">搭建前端：</h3>
<p>在搭建前端之前，需要慎重选择框架。对比主流web框架，参考<a href="https://www.techempower.com/benchmarks/" target="_blank" rel="external">Techempower</a>,我们最终选择用vertx和undertow进行开发。
具体可以参考一些比较好的配置指南：</p>
<p>Vertx:</p>
<p><a href="http://vertx.io/docs/" target="_blank" rel="external">vertx Document</a>
<a href="http://vertx.io/blog/my-first-vert-x-3-application/index.html" target="_blank" rel="external">My first Vert.x 3 Application</a></p>
<h4 id="前端优化">前端优化：</h4>
<ul>
<li>运用Cache，每次得到请求先check是否有缓存。当缓存满了的时候，就把最不常用的缓存踢出去。</li>
</ul>
<h3 id="etl">ETL:</h3>
<p>根据request设计好数据库的schema以后，要好好设计ETL。因为我们这里用EMR把twitter数据集载入到数据仓库中，每次需要10-20个小时，而EMR特别贵，所以最好不要重复劳动。最初，用小数据及来测试。</p>
<p>这一阶段我们要处理两类请求，从存储系统中获取数据，搭建好的web service 需要能够连接到两个不同的后端存储系统(MySQL 和 HBase)，前端需要通过端口 80 接收 HTTP GET 请求。</p>
<h4 id="操作过程">操作过程：</h4>
<p>这里主要要写一个Map和一个Reduce文件来处理数据。原始数据的格式是JSON，我们需要处理成需要的数据格式：</p>
<p>请求格式
userid+hashtag
<code>GET /q2?userid=uid&amp;hashtag=hashtag</code></p>
<p>响应格式 (如果Tweet存在)</p>
<ul>
<li>tweet 的 sentiment density</li>
<li>tweet 的发布时间</li>
<li>tweet id</li>
<li>审查修改过的的 tweet 内容，这里有很多可能出问题的地方，比如 emoji 表情、反斜杠、其他语言的字符等等</li>
</ul>
<p><code>TEAMID,TEAM_AWS_ACCOUNT_ID\n Sentiment_density1:Tweet_time1:Tweet_id1:Cencored_text1\n Sentiment_density2:Tweet_time2:Tweet_id2:Cencored_text2\n Sentiment_density3:Tweet_time3:Tweet_id3:Cencored_text3\n</code></p>
<p>响应格式 (如果Tweet不存在)
<code>TEAMID,TEAM_AWS_ACCOUNT_ID\n \n</code></p>
<p>map和reduce程序写完后，到EMR上面跑，要注意：</p>
<ul>
<li>现用小数据集测试。</li>
<li>注意各种小细节</li>
<li>关于EMR的操作，步骤之后有空总结下之前云计算的EMR project。</li>
</ul>
<h3 id="query-文本清理和分析">Query 文本清理和分析</h3>
<p>目标吞吐量： 10000 rps
不允许用现用的缓存设备，可以自己写缓存。
会查询某个用户用指定的 hashtag 发的 tweet，主要考察如何设计一个高效的后端来处理大量的请求。</p>
<h3 id="后端数据库">后端数据库</h3>
<p>ETL结束以后，我们需要导入数据库。在这个过程中，我们纠结于replication和sharding的选择。
Replication是指将完整的数据库存在每一台机器上，而Sharding是指分成几个部分分别存在每一台机器上。最终，选择了Sharding模式。</p>
<h4 id="数据库设计">数据库设计：</h4>
<p>按照我们刚刚说过的请求格式和响应格式，我们对MySQL和HBase进行设计：</p>
<h5 id="mysql">MySQL：</h5>
<h6 id="设计模式">设计模式：</h6>
<p>（这里参照了Yuki组的赢家设计模式，非常简单粗暴）
原来的schema是每一列都很清晰，但是这样row相比后面的设计模式多了很多，导致数据库的读取速度慢了很多。
所以新的schema就选择只存取id，读取所有的tweets以后，让前端进行相应的解析。</p>
<p><img src="http://i.imgur.com/Zmk6QUp.png" alt=""></p>
<h6 id="优化方法">优化方法：</h6>
<ul>
<li>建立索引Index</li>
<li>mysql有两个存储引擎，MyISAM和InnoDB，MyISAM适用于大量查寻，对写并不是非常友好，updata时会整表锁住。而InnoDB使用的是“行锁&quot;。
设置Key_buffer_size以及Query_cache_size到更高的值，可以增加缓冲容量。</li>
<li>设置所有column为not null，这样mysql不用预留空间检查null值。会提高读取速度。</li>
</ul>
<h5 id="hbase">HBase:</h5>
<p>鉴于HBase是key-value存储模式，我们在这里只要考虑key里怎么放，剩下的数据全都放到column family里面就可以了。
我们采用tweet_id + user_id + hashtag作为rowkey。</p>
<h6 id="优化方法摘自小土刀博客">优化方法（摘自小土刀博客）：</h6>
<p>1.分配合适的内存给 RegionServer 服务:
例如在 HBase 的 conf 目录下的 hbase-env.sh 的最后添加 export HBASE_REGIONSERVER_OPTS=”-Xmx16000m $HBASE_REGIONSERVER_OPTS”
其中 16000m 为分配给 RegionServer 的内存大小。</p>
<p>2.RegionServer 的请求处理 IO 线程数:
较少的 IO 线程适用于处理单次请求内存消耗较高的 Big Put 场景 (大容量单次 Put 或设置了较大 cache 的 Scan，均属于 Big Put) 或 ReigonServer 的内存比较紧张的场景。
较多的 IO 线程，适用于单次请求内存消耗低，TPS 要求 (每秒事务处理量 (TransactionPerSecond)) 非常高的场景。设置该值的时候，以监控内存为主要参考。
在 hbase-site.xml 配置文件中配置项为 hbase.regionserver.handler.count 200</p>
<p>3.调整 Block Cache:
hfile.block.cache.size：RS的block cache的内存大小限制，默认值0.25，在偏向读的业务中，可以适当调大该值，具体配置时需试hbase集群服务的业务特征，结合memstore的内存占比进行综合考虑。</p>
<h2 id="总结">总结：</h2>
<p>Team Project过去挺久了，很多细节记不得了，清洗数据的部分有很多细节需要注意，并不像这里写的一两句话就讲清楚了。还有数据库优化是一条不归路，盲目优化会导致反向优化，其实根据后来赢家的报告来看，优化并起不到多少作用，好的schema设计才是提高performance的最根本。
云计算这门课的精华，都在这个Project，覆盖了大部分这门课的所实验的知识。从load balance到sharding和replication，再到SQL和NoSQL数据库，再到EMR的应用，就差并行并发那部分的内容了。
学习是不难的，有指导来做project也不难，真正到了实际应用中，没有人知道正确答案，靠的都是思考和经验了。</p>
<p><strong>References：</strong></p>
<ol>
<li><a href="http://wdxtub.com/" target="_blank" rel="external">小土刀云计算语料分析&amp;反思课</a></li>
<li>小Yuki的Report</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本文是Twitter Analytics on the Cloud项目的介绍及分析总结。小组作业当时做的匆忙，现在再思考下可以优化的地方很多。感谢队友@shuangshuan
    
    </summary>
    
      <category term="CMU课程" scheme="http://yoursite.com/categories/CMU%E8%AF%BE%E7%A8%8B/"/>
    
      <category term="Cloud Computing" scheme="http://yoursite.com/categories/CMU%E8%AF%BE%E7%A8%8B/Cloud-Computing/"/>
    
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="Cloud Computing" scheme="http://yoursite.com/tags/Cloud-Computing/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 325. Maximum Size Subarray Sum Equals k</title>
    <link href="http://yoursite.com/2017/02/25/Leetcode-325-Maximum-Size-Subarray-Sum-Equals-k/"/>
    <id>http://yoursite.com/2017/02/25/Leetcode-325-Maximum-Size-Subarray-Sum-Equals-k/</id>
    <published>2017-02-25T20:27:57.000Z</published>
    <updated>2017-02-25T20:35:47.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.</p>
<p>Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.</p>
<p>Example 1:
Given nums = [1, -1, 5, -2, 3], k = 3,
return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)</p>
<p>Example 2:
Given nums = [-2, -1, 2, 1], k = 1,
return 2. (because the subarray [-1, 2] sums to 1 and is the longest)</p>
<p>Follow Up:
Can you do it in O(n) time?</p>
<h3 id="explanation">Explanation:</h3>
<p>思路就是，算从第一个数到每一个数的sum，存在map里，如果之后有key和sum-k相等，就表示那段数字的和为k。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int maxSubArrayLen(int[] nums, int k) &#123;</div><div class="line">        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">        int sum = 0;</div><div class="line">        int result = 0;</div><div class="line"></div><div class="line">        for (int i=0; i&lt;nums.length; i++) &#123;</div><div class="line">            sum += nums[i];</div><div class="line">            if (sum == k) &#123;</div><div class="line">                result = i+1;</div><div class="line"></div><div class="line">            &#125; else if (map.containsKey(sum - k)) &#123;</div><div class="line">                result =Math.max(max, i - map.get(sum));</div><div class="line">            &#125;</div><div class="line">            if (!map.containsKey(sum)) &#123;</div><div class="line">                map.put(sum, i);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(map.toString());</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Given an array nums and a target value k, find the max
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Facebook" scheme="http://yoursite.com/tags/Facebook/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 277. Find the Celebrity</title>
    <link href="http://yoursite.com/2017/02/24/Leetcode-277-Find-the-Celebrity/"/>
    <id>http://yoursite.com/2017/02/24/Leetcode-277-Find-the-Celebrity/</id>
    <published>2017-02-25T03:07:05.000Z</published>
    <updated>2017-02-25T03:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Suppose you are at a party with n people (labeled from 0 to n - 1) and among them, there may exist one celebrity. The definition of a celebrity is that all the other n - 1 people know him/her but he/she does not know any of them.</p>
<p>Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: &quot;Hi, A. Do you know B?&quot; to get information of whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).</p>
<p>You are given a helper function bool knows(a, b) which tells you whether A knows B. Implement a function int findCelebrity(n), your function should minimize the number of calls to knows.</p>
<p>Note: There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return -1.</p>
<h3 id="explanation">Explanation:</h3>
<p>两次遍历。第一轮假设候选人，如果候选人认识i，就换到i。第二轮是验证候选人是否存在。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* The knows API is defined in the parent class Relation.</div><div class="line">      boolean knows(int a, int b); */</div><div class="line"></div><div class="line">public class Solution extends Relation &#123;</div><div class="line">    public int findCelebrity(int n) &#123;</div><div class="line">        int candidate = 0;</div><div class="line">        for (int i=1; i&lt;n; i++) &#123;</div><div class="line">            if (knows(candidate,i)) candidate =i;</div><div class="line">        &#125;</div><div class="line">        for (int i=0; i&lt;n; i++) &#123;</div><div class="line">            if (i != candidate &amp;&amp; (knows(candidate,i) || (!knows(i,candidate)))) return -1;</div><div class="line">        &#125;</div><div class="line">        return candidate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Suppose you are at a party with n people (labeled from
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Facebook" scheme="http://yoursite.com/tags/Facebook/"/>
    
  </entry>
  
  <entry>
    <title>云计算Project：基于多个后端的社交网络时间线的实现</title>
    <link href="http://yoursite.com/2017/02/23/%E4%BA%91%E8%AE%A1%E7%AE%97Project%EF%BC%9A%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%B8%AA%E5%90%8E%E7%AB%AF%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E7%BA%BF%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/02/23/云计算Project：基于多个后端的社交网络时间线的实现/</id>
    <published>2017-02-23T20:12:14.000Z</published>
    <updated>2017-02-23T22:55:10.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文是关于CMU15619Cloud Computing项目:<code>Social Networking Timeline with Heterogeneous Backends</code>的介绍以及总结反思。</p>
<p>项目主要目标：</p>
<ul>
<li>探索AWS的DBaas服务的申请、配置和管理</li>
<li>比较MySQL, HBase和MongoDB在使用Java API载入数据时的异同。</li>
<li>利用多个后端为同一个复杂的web应用提供数据。</li>
<li>比较不同数据库在实际应用中的特点。</li>
</ul>
<h2 id="背景介绍">背景介绍</h2>
<h3 id="dbaasdatabase-as-a-services">DBaas(Database-as-a-Services)：</h3>
<p>在AWS中，我们可以用其中的RDS的MySQL服务。</p>
<h3 id="mongodb">MongoDB：</h3>
<p>MongoDB是NoSQL数据库的典型，基于文档存储（Document-oriented），不支持事务和表连接，所以查询的编写、理解和优化比较容易。之后会写一篇关于NoSQL的总结（一个坑）。
和HBase的key-value存储模式不同，MongoDB基于文档存储模式的优势在于可以支持复杂的数据类型，并且也支持Index。
MongoDB使用BSON类型存储数据，据说就是把文本直接转成二进制表示，BSON用于以下三种目的：</p>
<ul>
<li>节省空间：BSON即使在最坏的情况下，也比普通的JSON占用空间少。</li>
<li>移动性</li>
<li>Performance：BSON对内容的编码和解码的速度快于很多编程语言。</li>
</ul>
<h3 id="数据结构-图">数据结构： 图</h3>
<h4 id="1邻接矩阵adjacent-matrix空间复杂度为on2">1.邻接矩阵Adjacent Matrix：空间复杂度为O（n^2)</h4>
<p>比如这个：
<img src="http://i.imgur.com/Qyrp0rL.png" alt="">
<img src="http://i.imgur.com/x2yyDEI.png" alt=""></p>
<h4 id="2邻接表adjacent-list-空间较少">2.邻接表Adjacent List 空间较少：</h4>
<p><img src="http://i.imgur.com/ofeLFxn.png" alt=""></p>
<h3 id="社交网络应用基础">社交网络应用基础：</h3>
<p>如今像Facebook, Twitter和Instagram都需要复杂和涉及良好的后端来处理多种类型的用户数据，提供持续的高性能低延迟的服务。同时还要通过实时数据分析为公司和广告商提供有价值的信息。</p>
<ul>
<li>不同的数据类型（Video，Text，Link，etc.)需要存在不同的数据库中）</li>
<li>一个简单的展示社交网络页面的HTTP请求会触发后端一系列的请求和数据库动作。可以参见下图：
<img src="http://i.imgur.com/r3gf00x.png" alt=""></li>
</ul>
<p>社交网络中的数据通常包括以下三种：</p>
<ul>
<li>用户信息：
<ul>
<li>身份验证系统</li>
<li>用户信息/简介</li>
<li>活动日志</li>
<li>社交关系图（在下面会进步介绍）</li>
</ul>
</li>
<li>用户活动：
<ul>
<li>用户产生的多媒体数据</li>
</ul>
</li>
<li>大数据分析系统：
<ul>
<li>搜索系统</li>
<li>推荐系统</li>
<li>用户行为分析（基于云数据仓库的OLAP，有机会单独更新这个部分）</li>
</ul>
</li>
</ul>
<p><img src="http://i.imgur.com/Qwd8z0q.png" alt=""></p>
<p>社交网络的前端已经做好，我们需要把四中不同的数据集存入三种数据库（MySQL, HBase, MongoDB),你完成的后端要能同时响应四中不同的request。</p>
<h2 id="项目操作">项目操作</h2>
<h3 id="通过rds的mysql实现基本登录">通过RDS的MySQL实现基本登录：</h3>
<p>在AWS RDS中配置MySQL并导入users.csv, userinfo.csv数据集。
连接AWS RDS中MySQL时注意：
远程登录需要导入数据时要加入 --local-infile得到授权。
<code>mysql -u username -p password -h hostname --port=portname --local-infile database</code></p>
<p>数据集格式:</p>
<ul>
<li>users.csv [UserID, Password]</li>
<li>userinfo.csv [UserID, Name, Profile Image URL]</li>
</ul>
<p>导入MySQL语句:
<code>LOAD DATA LOCAL INFILE 'filename' INTO TABLE tablename CHARACTER SET utf8mb4 FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n';</code></p>
<p>请求格式:
<code>GET /task1?id=[UserID]&amp;pwd=[Password]</code></p>
<p>响应格式:
<code>returnRes({&quot;name&quot;:&quot;my_name&quot;, &quot;profile&quot;:&quot;profile_image_url&quot;})</code></p>
<p>所以，之后在Java文件中连接数据库，再创建JSON相应的代码即可。
测试：</p>
<ol>
<li>启动前后端服务器，访问<code>http://&lt;your_front_end_dns&gt;:3000</code></li>
<li>输入正确或错误的账号密码登录测试</li>
</ol>
<p><img src="http://i.imgur.com/rv5LnYr.png" alt=""></p>
<h3 id="利用hbase存储社交图谱">利用HBase存储社交图谱：</h3>
<p>用HBase来保存用户间的follow关系，可以选择用之前在图中介绍的邻接矩阵和邻接表中选择一种，来保存数据。
原始数据格式：
<code>&lt;followee, follower&gt;</code></p>
<p>请求格式：
<code>GET /task2?id=[UserID]</code></p>
<p>响应格式:
<code>{&quot;followers&quot;:[{&quot;name&quot;:&quot;follower_name_1&quot;, &quot;profile&quot;:&quot;profile_image_url_1&quot;}, {&quot;name&quot;:&quot;follower_name_2&quot;, &quot;profile&quot;:&quot;profile_image_url_2&quot;}, ...]}</code></p>
<h4 id="思路">思路：</h4>
<ul>
<li>在HBase中存成followee： follower1， follower2， ...的格式</li>
<li>设计好HBase之后导入数据</li>
<li>启动前后端服务器后访问http://&lt;your_front_end_dns&gt;:3000</li>
<li>输入userid进行测试</li>
</ul>
<h3 id="用mongdb搭建主页">用MongDB搭建主页：</h3>
<p>如之前介绍的那样，对于各种形式的帖子，用MongoDB存储会是一个很好的选择。这里会查询一些特定的field，所以可以建立索引来加速查询。</p>
<p>帖子数据的形式：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;pid&quot;:xxx,                                      // PostID</div><div class="line">    &quot;uid&quot;:xxx,                                      // UserID of poster</div><div class="line">    &quot;name&quot;:&quot;xxx&quot;,                                   // User name of poster</div><div class="line">    &quot;profile&quot;:&quot;xxx&quot;,                                // Poster profile image URL</div><div class="line">    &quot;timestamp&quot;:&quot;YYYY-MM-DD HH:MM:SS&quot;,              // When post is posted</div><div class="line">    &quot;image&quot;:&quot;xxx&quot;,                                  // Post image</div><div class="line">    &quot;content&quot;:&quot;xxx&quot;,                                // Post text content</div><div class="line">    &quot;comments&quot;:[                                    // comments json array</div><div class="line">        &#123;</div><div class="line">            &quot;uid&quot;:xxx,                              // UserID of commenter</div><div class="line">            &quot;name&quot;:&quot;xxx&quot;,                           // User name of commenter</div><div class="line">            &quot;profile&quot;:&quot;xxx&quot;,                        // Commenter profile image URL</div><div class="line">            &quot;timestamp&quot;:&quot;YYYY-MM-DD HH:MM:SS&quot;,      // When comment is made</div><div class="line">            &quot;content&quot;:&quot;xxx&quot;                         // Comment text content</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            &quot;uid&quot;:xxx,</div><div class="line">            .......</div><div class="line">        &#125;,</div><div class="line">        ......</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于MongoDB建立索引，可以参考<a href="https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/" target="_blank" rel="external">这里</a></p>
<p>请求格式：
<code>GET /task3?id=[UserID]</code></p>
<p>响应格式：
<code>{&quot;posts&quot;:[{post1_json}, {post2_json}, ...]}</code></p>
<p>测试方法：</p>
<ul>
<li>启动前后端服务器，输入userid</li>
</ul>
<p><img src="http://i.imgur.com/8p2pep3.png" alt=""></p>
<h3 id="最终整合">最终整合</h3>
<p>之前三个部分分别实现了三个数据库的存储，现在我们希望实现输入一个userid就可以返回用户信息（MySQL),用户粉丝列表（HBase）以及用户关注的人最新三十条帖子（MongoDB）。</p>
<p>排序规则：</p>
<ul>
<li>对followers进行排序:
<ul>
<li>姓名升序排列</li>
<li>Profile image URL升序排列</li>
</ul>
</li>
<li>对最新30篇post排序：
<ul>
<li>按照timestamp升序排序</li>
<li>按照PostID升序排序</li>
</ul>
</li>
</ul>
<p>请求格式：
<code>GET /task4?id=[UserID]</code></p>
<p>响应格式:
<code>{&quot;name&quot;:&quot;my_name&quot;, &quot;profile&quot;:&quot;my_profile_image_url&quot;, &quot;followers&quot;:[{&quot;name&quot;:&quot;follower_name_1&quot;, &quot;profile&quot;:&quot;profile_image_url_1&quot;}, {&quot;name&quot;:&quot;follower_name_2&quot;, &quot;profile&quot;:&quot;profile_image_url_2&quot;}, ...], &quot;posts&quot;:[{post1_json, post2_json, ...}]}</code></p>
<p><img src="http://i.imgur.com/EpRB33c.png" alt=""></p>
<h3 id="简单推荐的实现">简单推荐的实现</h3>
<p>推荐系统的内容太多了，可以看看<a href="http://www.shuang0420.com/categories/Recommender-System/" target="_blank" rel="external">shaung的博客</a>（一个广告）
这次我们用协同过滤算法实现一个简单的推荐系统，利用“朋友的朋友”来推荐好友。</p>
<h4 id="graph-distance">Graph Distance：</h4>
<p>比如：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A follows &#123;B, C, D&#125;</div><div class="line">Followee B follows &#123;C, E, A&#125;</div><div class="line">followee C follows &#123;F, G&#125;</div><div class="line">followee D follows &#123;G, H&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://i.imgur.com/83cuJ8G.png" alt="">
我们可以得到与A的距离关系为：
<code>{A:1, C:1, E:1, F:1, G:2, H:1}</code>
其中去掉A本身，去掉A已经关注的C，剩下的就是
<code>{G: 2, E: 1, F: 1, H: 1}</code></p>
<h4 id="思路">思路：</h4>
<ul>
<li>找到userid的关注的人的集合</li>
<li>将关注的人的集合中的每个人关注的人添加到信集合中，第一次出现则为1，之后的为原来的加1</li>
<li>用优先队列存储，注意第一个关注的人集合中的元素都不应该在此队列中</li>
<li>返回前十个的name和url，并返回</li>
</ul>
<p>请求格式：
<code>http://backend-public-dns:8080/MiniSite/task5?id=&lt;user_id&gt;</code></p>
<p>响应格式：
<code>returnRes({&quot;recommendation&quot;:[{name:&lt;name1&gt;, profile:&lt;profile1&gt;},{name:&lt;name2&gt;, profile:&lt;profile2&gt;},...,{name:&lt;name10&gt;, profile:&lt;profile10&gt;]})</code></p>
<p>Done!</p>
<p><strong>Reference：</strong><br>
CMU15619课件：<code>Social Networking Timeline with Heterogeneous Backends</code>
小土刀博客：<code>http://wdxtub.com/vault/cc-17.html</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本文是关于CMU15619Cloud Computing项目:&lt;code&gt;Social Networking Timeline with Heterogeneous Back
    
    </summary>
    
      <category term="CMU课程" scheme="http://yoursite.com/categories/CMU%E8%AF%BE%E7%A8%8B/"/>
    
      <category term="Cloud Computing" scheme="http://yoursite.com/categories/CMU%E8%AF%BE%E7%A8%8B/Cloud-Computing/"/>
    
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="Cloud Computing" scheme="http://yoursite.com/tags/Cloud-Computing/"/>
    
  </entry>
  
  <entry>
    <title>到达之前</title>
    <link href="http://yoursite.com/2017/02/22/%E5%9C%A8%E6%88%91%E5%88%B0%E8%BE%BE%E4%B9%8B%E5%89%8D/"/>
    <id>http://yoursite.com/2017/02/22/在我到达之前/</id>
    <published>2017-02-22T21:09:21.000Z</published>
    <updated>2017-02-22T21:17:31.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&lt;center&gt;<strong>2017-02-22</strong>&lt;/center&gt;
<em>Key Words</em>: <code>Broker Genius HR面</code> <code>EXL HR面</code></p>
<p>&lt;center&gt;<strong>2017-02-21</strong>&lt;/center&gt;</p>
<p><em>Key Words</em>: <code>Facebook内推</code></p>
<p>今天大概是一个全新的日子。我不知道之后会不会保持这样的火力继续前进，又或者我会不停跌倒，但是没关系。</p>
<p>两周前，开始正式投出简历。悄无声息，没有人理睬。我无数次打开邮箱，就像是无数次和一个不愿意面对我的人说话。我抱怨，没有面试。</p>
<p>昨天发现linkedin上的frank来CMU招人，他在FB，求了一个内推。早上XD哥说他出差在南通，和我聊了一会儿。“你和我说说，工作找的怎样了。“
我把简历发给他，他说找找人。晚上给我推了一个Google。</p>
<p>下午收到两个面试电话。
明天，将有两场面试。</p>
<p>一切都开始了。我不能懈怠，不能放弃，不能随意。</p>
<p>这场战争，遍体鳞伤也要赢，也要赢得漂亮。</p>
<p>其实早上特别感动，XD哥无论什么时候都在support我，可是我却做不到support他，我知道那些时刻他是一个人挺过来的。他是条汉子，除了他我没见过这么汉子的人。我爱他。</p>
<p>生命里有这样一个人，真的很值得。</p>
<p>我有的时候，也想，自己能不能跳出自己的小世界，成为别人坚强的后盾，爸爸妈妈，外公外婆，我的朋友们，他们都需要我。</p>
<p>我来不及慢慢成长了。来不及了。我必须马上长大，快速地去未来。</p>
]]></content>
    
    <summary type="html">
    
      此文章需要密码访问
    
    </summary>
    
    
      <category term="Career" scheme="http://yoursite.com/tags/Career/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 252. Meeting Rooms I</title>
    <link href="http://yoursite.com/2017/02/20/Leetcode-252-Meeting-Rooms-I/"/>
    <id>http://yoursite.com/2017/02/20/Leetcode-252-Meeting-Rooms-I/</id>
    <published>2017-02-21T01:24:16.000Z</published>
    <updated>2017-02-22T21:08:10.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &lt; ei), determine if a person could attend all meetings.</p>
<p>For example,
Given [[0, 30],[5, 10],[15, 20]],
return false.</p>
<h3 id="explanation">Explanation:</h3>
<p>先按照start time排序，只要每一个end time都比下一个start time小，即可行。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">    public boolean canAttendMeetings(Interval[] intervals) &#123;</div><div class="line">       Arrays.sort(intervals, new Comparator&lt;Interval&gt;()&#123;</div><div class="line">            public int compare(Interval i1, Interval i2) &#123;</div><div class="line">                return i1.start - i2.start;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        for(int i=0; i&lt;intervals.length-1; i++) &#123;</div><div class="line">            if (intervals[i].end &gt; intervals[i+1].start) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Given an array of meeting time intervals consisting of
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Facebook" scheme="http://yoursite.com/tags/Facebook/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 253. Meeting Rooms II</title>
    <link href="http://yoursite.com/2017/02/20/Leetcode-253-Meeting-Rooms/"/>
    <id>http://yoursite.com/2017/02/20/Leetcode-253-Meeting-Rooms/</id>
    <published>2017-02-21T01:21:53.000Z</published>
    <updated>2017-02-21T03:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本题的简单版本是<a href="http://starllap.space/2017/02/20/Leetcode-252-Meeting-Rooms-I/" target="_blank" rel="external">Meeting Rooms I</a></p>
<h3 id="question">Question:</h3>
<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &lt; ei), find the minimum number of conference rooms required.</p>
<p>For example,
Given [[0, 30],[5, 10],[15, 20]],
return 2.</p>
<h3 id="explanation">Explanation:</h3>
<p>先对start sort，用heap存end，相当于按照end也sort一遍，之后与最快结束的meeting对比，如果start time比最快结束的要小，则另开一间房间。
先开始我用了两次循环，TLE了。用Heap是一个不错的选择，其实也可以用指针。直接贴一个<a href="https://discuss.leetcode.com/topic/20958/ac-java-solution-using-min-heap" target="_blank" rel="external">标准答案</a>。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">public int minMeetingRooms(Interval[] intervals) &#123;</div><div class="line">    if (intervals == null || intervals.length == 0)</div><div class="line">        return 0;</div><div class="line"></div><div class="line">    // Sort the intervals by start time</div><div class="line">    Arrays.sort(intervals, new Comparator&lt;Interval&gt;() &#123;</div><div class="line">        public int compare(Interval a, Interval b) &#123; return a.start - b.start; &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // Use a min heap to track the minimum end time of merged intervals</div><div class="line">    PriorityQueue&lt;Interval&gt; heap = new PriorityQueue&lt;Interval&gt;(intervals.length, new Comparator&lt;Interval&gt;() &#123;</div><div class="line">        public int compare(Interval a, Interval b) &#123; return a.end - b.end; &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // start with the first meeting, put it to a meeting room</div><div class="line">    heap.offer(intervals[0]);</div><div class="line"></div><div class="line">    for (int i = 1; i &lt; intervals.length; i++) &#123;</div><div class="line">        // get the meeting room that finishes earliest</div><div class="line">        Interval interval = heap.poll();</div><div class="line"></div><div class="line">        if (intervals[i].start &gt;= interval.end) &#123;</div><div class="line">            // if the current meeting starts right after</div><div class="line">            // there&apos;s no need for a new room, merge the interval</div><div class="line">            interval.end = intervals[i].end;</div><div class="line">        &#125; else &#123;</div><div class="line">            // otherwise, this meeting needs a new room</div><div class="line">            heap.offer(intervals[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // don&apos;t forget to put the meeting room back</div><div class="line">        heap.offer(interval);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return heap.size();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本题的简单版本是&lt;a href=&quot;http://starllap.space/2017/02/20/Leetcode-252-Meeting-Rooms-I/&quot; target
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 294. Flip GameII</title>
    <link href="http://yoursite.com/2017/02/20/Leetcode-294-Flip-GameII/"/>
    <id>http://yoursite.com/2017/02/20/Leetcode-294-Flip-GameII/</id>
    <published>2017-02-20T18:26:34.000Z</published>
    <updated>2017-02-20T20:07:14.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive &quot;++&quot; into &quot;--&quot;. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>
<p>Write a function to determine if the starting player can guarantee a win.</p>
<p>For example, given s = &quot;++++&quot;, return true. The starting player can guarantee a win by flipping the middle &quot;++&quot; to become &quot;+--+&quot;.</p>
<p>Follow up:
Derive your algorithm's runtime complexity.</p>
<h4 id="explanation">Explanation:</h4>
<p>本来想找规律，后来想想太天真了。用backtracking解，罗列所有的情况，如果下一局对手会输，就表示可以。现在我的算法是o(N!!)
discuss中有一个牛逼的game theory博弈论算法，看不懂。有机会可以研究一下，会将time complexity降低到O(N^2)</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public boolean canWin(String s) &#123;</div><div class="line">        if (s == null || s.length() &lt;2) return false;</div><div class="line">        char[] charString = s.toCharArray();</div><div class="line">        for (int i=0; i&lt;s.length()-1; i++) &#123;</div><div class="line"></div><div class="line">            if (charString[i] == &apos;+&apos; &amp;&amp; charString[i+1] == &apos;+&apos;) &#123;</div><div class="line">                charString[i] = &apos;-&apos;;</div><div class="line">                charString[i+1] = &apos;-&apos;;</div><div class="line">                if (!canWin(String.valueOf(charString))) &#123;</div><div class="line">                    return true;</div><div class="line">                &#125;</div><div class="line">                charString[i] = &apos;+&apos;; charString[i+1] = &apos;+&apos;;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question:&lt;/h4&gt;
&lt;p&gt;You are playing the following Flip Game with your frie
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 380. Insert Delete GetRandom O(1)</title>
    <link href="http://yoursite.com/2017/02/19/Leetcode-380-Insert-Delete-GetRandom-O-1/"/>
    <id>http://yoursite.com/2017/02/19/Leetcode-380-Insert-Delete-GetRandom-O-1/</id>
    <published>2017-02-19T20:57:07.000Z</published>
    <updated>2017-02-19T21:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Design a data structure that supports all following operations in average O(1) time.</p>
<p>insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// Init an empty set.</div><div class="line">RandomizedSet randomSet = new RandomizedSet();</div><div class="line"></div><div class="line">// Inserts 1 to the set. Returns true as 1 was inserted successfully.</div><div class="line">randomSet.insert(1);</div><div class="line"></div><div class="line">// Returns false as 2 does not exist in the set.</div><div class="line">randomSet.remove(2);</div><div class="line"></div><div class="line">// Inserts 2 to the set, returns true. Set now contains [1,2].</div><div class="line">randomSet.insert(2);</div><div class="line"></div><div class="line">// getRandom should return either 1 or 2 randomly.</div><div class="line">randomSet.getRandom();</div><div class="line"></div><div class="line">// Removes 1 from the set, returns true. Set now contains [2].</div><div class="line">randomSet.remove(1);</div><div class="line"></div><div class="line">// 2 was already in the set, so return false.</div><div class="line">randomSet.insert(2);</div><div class="line"></div><div class="line">// Since 2 is the only number in the set, getRandom always return 2.</div><div class="line">randomSet.getRandom();</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation:</h3>
<p>很神奇的一道题，因为需要每个操作的复杂度平均为O(1),最初我只用了一个Arraylist存也AC了，但是时间很久，因为remove的时候不是O(1).换了Hashmap存index，快一些。但是要注意，remove那边不能直接count--，需要和最后一个值调换，这样保证其他的index不变，只减少最后一个。A little tricky
总而言之，算法设计还是蛮有趣的，好好想想。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public class RandomizedSet &#123;</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    int count;</div><div class="line">    public RandomizedSet() &#123;</div><div class="line">        count = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</div><div class="line">    public boolean insert(int val) &#123;</div><div class="line">        if(map.containsKey(val)) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        map.put(val,count);</div><div class="line">        list.add(val);</div><div class="line">        count=map.size();</div><div class="line">        // System.out.println(list);</div><div class="line">        return true;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Removes a value from the set. Returns true if the set contained the specified element. */</div><div class="line">    public boolean remove(int val) &#123;</div><div class="line">        if (map.containsKey(val)) &#123;</div><div class="line">            int index = map.get(val);</div><div class="line">            // change the index with the last one if it is not the last one;</div><div class="line">            if (index &lt; list.size()-1) &#123;</div><div class="line">                int lastone = list.get(list.size()-1);</div><div class="line">                list.set(index, lastone);</div><div class="line">                map.put(lastone,index);</div><div class="line">            &#125;</div><div class="line">            map.remove(val);</div><div class="line">            list.remove(list.size()-1);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return false;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Get a random element from the set. */</div><div class="line">    public int getRandom() &#123;</div><div class="line">        int r =(int)(Math.random()*list.size());</div><div class="line">        // System.out.println(r);</div><div class="line">        return list.get(r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Your RandomizedSet object will be instantiated and called as such:</div><div class="line"> * RandomizedSet obj = new RandomizedSet();</div><div class="line"> * boolean param_1 = obj.insert(val);</div><div class="line"> * boolean param_2 = obj.remove(val);</div><div class="line"> * int param_3 = obj.getRandom();</div><div class="line"> */</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Design a data structure that supports all following op
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Design" scheme="http://yoursite.com/tags/Design/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 331. Verify Preorder Serialization of a Binary Tree</title>
    <link href="http://yoursite.com/2017/02/19/Leetcode-331-Verify-Preorder-Serialization-of-a-Binary-Tree/"/>
    <id>http://yoursite.com/2017/02/19/Leetcode-331-Verify-Preorder-Serialization-of-a-Binary-Tree/</id>
    <published>2017-02-19T19:04:07.000Z</published>
    <updated>2017-02-19T19:11:25.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">     _9_</div><div class="line">    /   \</div><div class="line">   3     2</div><div class="line">  / \   / \</div><div class="line"> 4   1  #  6</div><div class="line">/ \ / \   / \</div><div class="line"># # # #   # #</div></pre></td></tr></table></figure></p>
<p>For example, the above binary tree can be serialized to the string &quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;, where # represents a null node.</p>
<p>Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.</p>
<p>Each comma separated value in the string must be either an integer or a character '#' representing null pointer.</p>
<p>You may assume that the input format is always valid, for example it could never contain two consecutive commas such as &quot;1,,3&quot;.</p>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</div></pre></td></tr></table></figure></p>
<p>Return true</p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;1,#&quot;</div></pre></td></tr></table></figure></p>
<p>Return false</p>
<p>Example 3:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;9,#,#,1&quot;</div></pre></td></tr></table></figure></p>
<p>Return false</p>
<h3 id="explanation">Explanation:</h3>
<p>该怎么说呢，就是想破脑袋才想到stack做，再然后调了半天bug。如果遇到#，去检查是不是stack里面有一个#和一个阿拉伯数字，如果是的话，全部替换成一个“#”，表示一个子节点结束。最后判断是不是stack里只有一个“#”表示的根节点。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public boolean isValidSerialization(String preorder) &#123;</div><div class="line">        Stack&lt;String&gt; stack = new Stack&lt;&gt;();</div><div class="line">        String[] nodes = preorder.split(&quot;,&quot;);</div><div class="line">        for(String s: nodes) &#123;</div><div class="line">            while (!stack.isEmpty() &amp;&amp; stack.peek().equals(&quot;#&quot;)) &#123;</div><div class="line">                if (s.equals(&quot;#&quot;)) &#123;</div><div class="line">                    stack.pop();</div><div class="line">                    if (!stack.empty() &amp;&amp; !stack.peek().equals(&quot;#&quot;)) &#123;</div><div class="line">                        stack.pop();</div><div class="line">                    &#125;else &#123;</div><div class="line">                        stack.push(&quot;#&quot;);</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            stack.push(s);</div><div class="line">        &#125;</div><div class="line">        return stack.size() == 1 &amp;&amp; stack.peek().equals(&quot;#&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;One way to serialize a binary tree is to use pre-order
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 289. Game of Life</title>
    <link href="http://yoursite.com/2017/02/19/Leetcode-289-Game-of-Life/"/>
    <id>http://yoursite.com/2017/02/19/Leetcode-289-Game-of-Life/</id>
    <published>2017-02-19T17:33:41.000Z</published>
    <updated>2017-02-19T18:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>According to the Wikipedia's article: &quot;The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&quot;</p>
<p>Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p>
<p>Any live cell with fewer than two live neighbors dies, as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population..
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
Write a function to compute the next state (after one update) of the board given its current state.</p>
<p>Follow up:
Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</p>
<h4 id="explanation">Explanation:</h4>
<p>依次遍历matrix，判断周围八个方向总和，如果之后是live，就设置为3，否则设置为2。最后再遍历一次，改成0或者1。
感觉这道题的考点是in place，其他的比较简单，遍历没有讨巧的方法。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public void gameOfLife(int[][] board) &#123;</div><div class="line">        if (board == null || board.length == 0) return;</div><div class="line">        int m = board.length; int n = board[0].length;</div><div class="line">        for (int i=0; i&lt;board.length; ++i) &#123;</div><div class="line">            for (int j = 0; j &lt; board[0].length; ++j) &#123;</div><div class="line">                int sum = sumHelper(board, i, j, m, n);</div><div class="line">                if(board[i][j]==0 &amp;&amp; sum==3) board[i][j]=3;</div><div class="line">                if(board[i][j]==1 &amp;&amp; (sum&lt;2 || sum&gt;3)) board[i][j]=2;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (int i=0; i&lt;board.length; i++) &#123;</div><div class="line">            for (int j = 0; j &lt; board[0].length; j++) &#123;</div><div class="line">                board[i][j]%=2;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int sumHelper(int[][] board, int i, int j, int m, int n) &#123;</div><div class="line">        int sum = 0;</div><div class="line">        for (int x = Math.max(i-1, 0); x&lt;=Math.min(i+1, m-1); ++x) &#123;</div><div class="line">            for (int y = Math.max(j-1,0); y&lt;=Math.min(j+1,n-1); ++y) &#123;</div><div class="line">                if (board[x][y] == 2 || board[x][y] == 1) &#123;</div><div class="line">                    sum += 1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sum -= board[i][j];</div><div class="line">        return sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question:&lt;/h4&gt;
&lt;p&gt;According to the Wikipedia&#39;s article: &amp;quot;The Game o
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Matrix" scheme="http://yoursite.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 298. Binary Tree Longest Consecutive Sequence</title>
    <link href="http://yoursite.com/2017/02/18/LeetCode-298-Binary-Tree-Longest-Consecutive-Sequence/"/>
    <id>http://yoursite.com/2017/02/18/LeetCode-298-Binary-Tree-Longest-Consecutive-Sequence/</id>
    <published>2017-02-19T01:42:10.000Z</published>
    <updated>2017-02-19T01:45:13.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>Given a binary tree, find the length of the longest consecutive sequence path.</p>
<p>The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">For example,</div><div class="line">   1</div><div class="line">    \</div><div class="line">     3</div><div class="line">    / \</div><div class="line">   2   4</div><div class="line">        \</div><div class="line">         5</div><div class="line">Longest consecutive sequence path is 3-4-5, so return 3.</div><div class="line">   2</div><div class="line">    \</div><div class="line">     3</div><div class="line">    /</div><div class="line">   2</div><div class="line">  /</div><div class="line"> 1</div><div class="line">Longest consecutive sequence path is 2-3,not3-2-1, so return 2.</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>递归。想清楚base case和递归的模式即可。左右值，以及当前值，不要混淆。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int longestConsecutive(TreeNode root) &#123;</div><div class="line">        return (root==null)?0:Math.max(Helper(root.left,1,root.val), Helper(root.right, 1, root.val));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public int Helper(TreeNode root, int count, int val) &#123;</div><div class="line">        if (root == null) return count;</div><div class="line">        count = (root.val - val == 1) ? count+1:1;</div><div class="line">        int leftCount = Helper(root.left, count, root.val);</div><div class="line">        int rightCount = Helper(root.right, count, root.val);</div><div class="line">        return Math.max(count, Math.max(leftCount, rightCount));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question:&lt;/h4&gt;
&lt;p&gt;Given a binary tree, find the length of the longest co
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 2Sum/3sum/4sum及其各种变体</title>
    <link href="http://yoursite.com/2017/02/16/Leetcode-Two-Sum-Three-Sum-and-their-variations/"/>
    <id>http://yoursite.com/2017/02/16/Leetcode-Two-Sum-Three-Sum-and-their-variations/</id>
    <published>2017-02-17T03:13:10.000Z</published>
    <updated>2017-02-18T19:06:57.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>经典的2sum，3sum，4sum极其变体题目总结，需要熟记。</p>
<h3 id="leetcode-1-two-sum">Leetcode 1. Two Sum</h3>
<h4 id="question">Question:</h4>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<p>Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Given nums = [2, 7, 11, 15], target = 9,</div><div class="line"></div><div class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</div><div class="line">return [0, 1].</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>用HashMap存差值，如果之后找到了立即返回两个index。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int[] twoSum(int[] nums, int target) &#123;</div><div class="line">    int[] result = new int[2];</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    for (int i=0; i&lt;nums.length; i++) &#123;</div><div class="line">        int minus = target - nums[i];</div><div class="line">        if (map.containsKey(nums[i])) &#123;</div><div class="line">            result[1] = i;</div><div class="line">            result[0] = map.get(nums[i]);</div><div class="line">            break;</div><div class="line">        &#125; else &#123;</div><div class="line">            map.put(minus, i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-167-two-sum-ii-input-array-is-sorted">Leetcode 167. Two Sum II - Input array is sorted</h3>
<h4 id="question">Question:</h4>
<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>
<p>Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2</p>
<h4 id="explanation">Explanation:</h4>
<p>Array是sorted，所以用两指针，找到符合条件的两个index。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public int[] twoSum(int[] num, int target) &#123;</div><div class="line">    int[] result = new int[2];</div><div class="line">    int left = 0;</div><div class="line">    int right = num.length - 1;</div><div class="line">    while (left &lt; right) &#123;</div><div class="line">        int sum = num[left]+num[right];</div><div class="line">        if (sum == target) &#123;</div><div class="line">            result[0] = left + 1;</div><div class="line">            result[1] = right + 1;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        else if (sum &lt; target) &#123;</div><div class="line">            left++;</div><div class="line">        &#125; else &#123;</div><div class="line">            right--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-170-two-sum-iii-data-structure-design">Leetcode 170. Two Sum III - Data structure design</h3>
<h4 id="question">Question:</h4>
<p>Design and implement a TwoSum class. It should support the following operations: add and find.</p>
<p>add - Add the number to an internal data structure.
find - Find if there exists any pair of numbers which sum is equal to the value.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">For example,</div><div class="line">add(1); add(3); add(5);</div><div class="line">find(4) -&gt; true</div><div class="line">find(7) -&gt; false</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>一道典型的Trade off， 如果要add为O(n), 则find为 o(1),反之。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class TwoSum &#123;</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    public TwoSum() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Add the number to an internal data structure.. */</div><div class="line">    public void add(int number) &#123;</div><div class="line">        if (map.containsKey(number)) &#123;</div><div class="line">            map.put(number, map.get(number)+1);</div><div class="line">        &#125; else &#123;</div><div class="line">            map.put(number, 1);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Find if there exists any pair of numbers which sum is equal to the value. */</div><div class="line">    public boolean find(int value) &#123;</div><div class="line">        for (int n:map.keySet()) &#123;</div><div class="line">            int minus = value -n;</div><div class="line">            if (map.containsKey(minus)) &#123;</div><div class="line">                if (minus == n &amp;&amp; map.get(n) &gt; 1) return true;</div><div class="line">                if (minus != n) return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-15-3sum">Leetcode 15. 3Sum</h3>
<h4 id="question">Question:</h4>
<p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>
<p>Note: The solution set must not contain duplicate triplets.</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">For example, given array S = [-1, 0, 1, 2, -1, -4],</div><div class="line"></div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>先排序，遍历其中每个值，找到target减去后的值，按照two sum in sorted来做就行了。要注意skip相同值，不能重复放。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) &#123;</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();</div><div class="line">    Arrays.sort(nums);</div><div class="line">    for (int i=0; i&lt;nums.length-2; i++) &#123;</div><div class="line">        if (i&gt;0 &amp;&amp; nums[i] == nums[i-1]) continue;</div><div class="line">        int twoSum = 0 - nums[i];</div><div class="line">        int left = i+1;</div><div class="line">        int right = nums.length-1;</div><div class="line">        while (left &lt; right) &#123;</div><div class="line">            if (nums[left] + nums[right] == twoSum) &#123;</div><div class="line">                result.add(Arrays.asList(nums[i], nums[left], nums[right]));</div><div class="line">                // skip the same ones</div><div class="line">                while (left &lt; right &amp;&amp; nums[left] == nums[left+1]) left ++;</div><div class="line">                while (left &lt; right &amp;&amp; nums[right] == nums[right-1]) right --;</div><div class="line">                left++; right--;</div><div class="line">            &#125;</div><div class="line">            else if (nums[left] + nums[right] &lt; twoSum) &#123;</div><div class="line">                left ++;</div><div class="line">            &#125; else &#123;</div><div class="line">                right --;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-16-3sum-closest">Leetcode 16. 3Sum Closest</h3>
<h4 id="question">Question:</h4>
<p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">For example, given array S = &#123;-1 2 1 -4&#125;, and target = 1.</div><div class="line"></div><div class="line">The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>同样的用3sum的方法做，只不过要多一个值来存储最小的diff和最靠近的sum。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int threeSumClosest(int[] nums, int target) &#123;</div><div class="line">        int closest = target;</div><div class="line">        int minDiff = Integer.MAX_VALUE;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        for (int i=0; i&lt;nums.length-2; i++) &#123;</div><div class="line">            int left = i+1; int right = nums.length-1;</div><div class="line">            int twoSum = target - nums[i];</div><div class="line">            System.out.println(closest);</div><div class="line">            while (left &lt; right) &#123;</div><div class="line">                int sum = nums[left] + nums[right];</div><div class="line">                // if equal target, just return. Else find out the closest sum.</div><div class="line">                if (twoSum == sum) &#123;</div><div class="line">                    return target;</div><div class="line">                &#125; else&#123;</div><div class="line">                    if (Math.abs(twoSum - sum) &lt; minDiff) &#123;</div><div class="line">                        minDiff = Math.abs(twoSum - sum);</div><div class="line">                        closest = sum+nums[i];</div><div class="line">                    &#125;</div><div class="line">                    if (twoSum &lt; sum) right--;</div><div class="line">                    else left++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return closest;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-259-3sum-smaller">Leetcode 259. 3Sum Smaller</h3>
<h4 id="question">Question:</h4>
<p>Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 &lt;= i &lt; j &lt; k &lt; n that satisfy the condition nums[i] + nums[j] + nums[k] &lt; target.</p>
<p>For example, given nums = [-2, 0, 1, 3], and target = 2.</p>
<p>Return 2. Because there are two triplets which sums are less than 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[-2, 0, 1]</div><div class="line">[-2, 0, 3]</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>先排序，遍历其中每个值，找到target减去后的值，按照two sum in sorted来做就行了，但是要注意，因为只要算比它小的个数，所以注意指针如何移动，并且如何count。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public int threeSumSmaller(int[] nums, int target) &#123;</div><div class="line">    int count = 0;</div><div class="line">    Arrays.sort(nums);</div><div class="line">    if (nums.length &lt; 3) return 0;</div><div class="line">    for (int i=0; i&lt;nums.length; i++) &#123;</div><div class="line">        int twoSum = target - nums[i];</div><div class="line">        int left = i+1; int right = nums.length - 1;</div><div class="line">        while (left &lt; right) &#123;</div><div class="line">            if (nums[left] + nums[right] &gt;= twoSum) &#123;</div><div class="line">                right --;</div><div class="line">            &#125; else &#123;</div><div class="line">                count += right - left;</div><div class="line">                left ++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-18-4sum">Leetcode 18. 4Sum</h3>
<h4 id="question">Question:</h4>
<p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>
<p>Note: The solution set must not contain duplicate quadruplets.</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.</div><div class="line"></div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1,  0, 0, 1],</div><div class="line">  [-2, -1, 1, 2],</div><div class="line">  [-2,  0, 0, 2]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>在3Sum上面套一层就行了。吐槽无力。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) &#123;</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    if (nums.length &lt; 4) return list;</div><div class="line">    Arrays.sort(nums);</div><div class="line">    for (int i=0; i&lt;nums.length - 3; i++) &#123;</div><div class="line">        if (i &gt; 0 &amp;&amp; nums[i] == nums[i-1]) continue;</div><div class="line">        for (int j=i+1; j&lt;nums.length-2; j++) &#123;</div><div class="line">            if (j &gt; i+1 &amp;&amp; nums[j] == nums[j-1]) continue;</div><div class="line">            int left = j+1; int right = nums.length-1;</div><div class="line">            while (left &lt;right) &#123;</div><div class="line">                if (nums[left] + nums[right] == target - nums[i] - nums[j]) &#123;</div><div class="line">                    list.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));</div><div class="line">                    while (left &lt; right &amp;&amp; nums[left] == nums[left+1]) left ++;</div><div class="line">                    while (left &lt; right &amp;&amp; nums[right] == nums[right-1]) right --;</div><div class="line">                    left ++; right --;</div><div class="line">                &#125; else if (nums[left] + nums[right]&lt; target - nums[i] - nums[j]) &#123;</div><div class="line">                    left++;</div><div class="line">                &#125; else &#123;</div><div class="line">                    right--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return list;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-454-4sum-ii">Leetcode 454. 4Sum II</h3>
<h4 id="question">Question:</h4>
<p>Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.</p>
<p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line"></div><div class="line">Input:</div><div class="line">A = [ 1, 2]</div><div class="line">B = [-2,-1]</div><div class="line">C = [-1, 2]</div><div class="line">D = [ 0, 2]</div><div class="line"></div><div class="line">Output:</div><div class="line">2</div><div class="line"></div><div class="line">Explanation:</div><div class="line">The two tuples are:</div><div class="line">1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0</div><div class="line">2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation：</h4>
<p>O(N^2)+Hashmap. Boring，下一题。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public int fourSumCount(int[] A, int[] B, int[] C, int[] D) &#123;</div><div class="line">    HashMap&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    int count = 0;</div><div class="line">    for (int i=0; i&lt;A.length; i++) &#123;</div><div class="line">        for (int j=0; j&lt;B.length; j++) &#123;</div><div class="line">            int sumAB = A[i] + B[j];</div><div class="line">            if (!map.containsKey(0-sumAB)) map.put(0-sumAB, 1);</div><div class="line">            else map.put(0-sumAB, map.get(0-sumAB)+1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    for (int ii = 0; ii&lt;C.length; ii++) &#123;</div><div class="line">        for (int jj=0; jj&lt;D.length; jj++) &#123;</div><div class="line">            int sumCD = C[ii] + D[jj];</div><div class="line">            if (map.containsKey(sumCD)) count+= map.get(sumCD);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;经典的2sum，3sum，4sum极其变体题目总结，需要熟记。&lt;/p&gt;
&lt;h3 id=&quot;leetcode-1-two-sum&quot;&gt;Leetcode 1. Two Sum&lt;/h3
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Two pointers" scheme="http://yoursite.com/tags/Two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 359. Logger Rate Limiter</title>
    <link href="http://yoursite.com/2017/02/15/Leetcode-359-Logger-Rate-Limiter/"/>
    <id>http://yoursite.com/2017/02/15/Leetcode-359-Logger-Rate-Limiter/</id>
    <published>2017-02-15T16:40:33.000Z</published>
    <updated>2017-02-15T17:03:19.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is not printed in the last 10 seconds.</p>
<p>Given a message and a timestamp (in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.</p>
<p>It is possible that several messages arrive roughly at the same time.</p>
<p>Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Logger logger = new Logger();</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 1</div><div class="line">logger.shouldPrintMessage(1, &quot;foo&quot;); returns true;</div><div class="line"></div><div class="line">// logging string &quot;bar&quot; at timestamp 2</div><div class="line">logger.shouldPrintMessage(2,&quot;bar&quot;); returns true;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 3</div><div class="line">logger.shouldPrintMessage(3,&quot;foo&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;bar&quot; at timestamp 8</div><div class="line">logger.shouldPrintMessage(8,&quot;bar&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 10</div><div class="line">logger.shouldPrintMessage(10,&quot;foo&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 11</div><div class="line">logger.shouldPrintMessage(11,&quot;foo&quot;); returns true;</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation:</h3>
<p>按照普通的hashmap存下所有值，然后更新timestamp是一种办法。但是实际中会浪费很多空间，所以比较好的方式其实是用queue存下最近timestamp在10以内的值，保持一个size最多为10的窗口就行。但是跑出来时间挺久的，用的空间少。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">class Log&#123;</div><div class="line">    int timestamp;</div><div class="line">    String message;</div><div class="line">    public Log(int Timestamp, String Message) &#123;</div><div class="line">        timestamp = Timestamp;</div><div class="line">        message = Message;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class Logger &#123;</div><div class="line"></div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    PriorityQueue&lt;Log&gt; queue;</div><div class="line">    Set&lt;String&gt; set;</div><div class="line">    public Logger() &#123;</div><div class="line">        queue = new PriorityQueue&lt;&gt;(10, new Comparator&lt;Log&gt;()&#123;</div><div class="line">            public int compare(Log l1, Log l2)&#123;</div><div class="line">                return l1.timestamp - l2.timestamp;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        set = new HashSet&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.</div><div class="line">        If this method returns false, the message will not be printed.</div><div class="line">        The timestamp is in seconds granularity. */</div><div class="line">    public boolean shouldPrintMessage(int timestamp, String message) &#123;</div><div class="line">        while (queue.size() &gt; 0) &#123;</div><div class="line">            Log log = queue.peek();</div><div class="line">            if (timestamp - log.timestamp &gt;= 10) &#123;</div><div class="line">                Log pollLog = queue.poll();</div><div class="line">                set.remove(pollLog.message);</div><div class="line">            &#125; else &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        boolean result = !set.contains(message);</div><div class="line">        if ( !set.contains(message)) &#123;</div><div class="line">            queue.add(new Log(timestamp, message));</div><div class="line">            set.add(message);</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Your Logger object will be instantiated and called as such:</div><div class="line"> * Logger obj = new Logger();</div><div class="line"> * boolean param_1 = obj.shouldPrintMessage(timestamp,message);</div><div class="line"> */</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Design a logger system that receive stream of messages
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 459. Repeated Substring Pattern</title>
    <link href="http://yoursite.com/2017/02/12/Leetcode-459-Repeated-Substring-Pattern/"/>
    <id>http://yoursite.com/2017/02/12/Leetcode-459-Repeated-Substring-Pattern/</id>
    <published>2017-02-13T02:52:36.000Z</published>
    <updated>2017-02-13T03:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>一道很简单的题。但是一直在调corner case，好不容易写完了再感受下速度和别人写的代码，差距太大了。心疼三秒钟。</p>
<h4 id="question">Question:</h4>
<p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.</p>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: &quot;abab&quot;</div><div class="line"></div><div class="line">Output: True</div><div class="line"></div><div class="line">Explanation: It&apos;s the substring &quot;ab&quot; twice.</div></pre></td></tr></table></figure></p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: &quot;aba&quot;</div><div class="line"></div><div class="line">Output: False</div></pre></td></tr></table></figure></p>
<p>Example 3:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: &quot;abcabcabcabc&quot;</div><div class="line"></div><div class="line">Output: True</div><div class="line"></div><div class="line">Explanation: It&apos;s the substring &quot;abc&quot; four times. (And the substring &quot;abcabc&quot; twice.)</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>原理很简单，就是每次得到一个substring，往后检查相同长度的下一段string。要注意的是，遍历的index只要到length/2就行了，毕竟至少也要重复两遍的。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public boolean repeatedSubstringPattern(String str) &#123;</div><div class="line">        if(str == null || str.length() &lt;= 1) return false;</div><div class="line">        int len = str.length();</div><div class="line">        for ( int i=0; i&lt;=len/2; i++) &#123;</div><div class="line">            boolean flag = true;</div><div class="line">            if (len%(i+1) != 0 || len == i+1) continue;</div><div class="line">            String subString = str.substring(0,(i+1));</div><div class="line">            int start = i+1;</div><div class="line">            int end = start * 2;</div><div class="line">            while (end&lt;=len) &#123;</div><div class="line">                if (!subString.equals(str.substring(start,end)))&#123;</div><div class="line">                    flag = false; break;</div><div class="line">                &#125;</div><div class="line">                start = start + i+1;</div><div class="line">                end = end + i+1;</div><div class="line">            &#125;</div><div class="line">            // System.out.println(flag);</div><div class="line">            if (flag) return true;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;一道很简单的题。但是一直在调corner case，好不容易写完了再感受下速度和别人写的代码，差距太大了。心疼三秒钟。&lt;/p&gt;
&lt;h4 id=&quot;question&quot;&gt;Quest
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 475. Heaters</title>
    <link href="http://yoursite.com/2017/02/12/Leetcode-475-Heaters/"/>
    <id>http://yoursite.com/2017/02/12/Leetcode-475-Heaters/</id>
    <published>2017-02-13T01:21:08.000Z</published>
    <updated>2017-02-13T01:31:42.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.</p>
<p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p>
<p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p>
<p>Note:</p>
<ol>
<li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>
<li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>
<li>As long as a house is in the heaters' warm radius range, it can be warmed.</li>
<li>All the heaters follow your radius standard and the warm radius will the same.</li>
</ol>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,3],[2]</div><div class="line">Output: 1</div><div class="line">Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.</div></pre></td></tr></table></figure></p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,3,4],[1,4]</div><div class="line">Output: 1</div><div class="line">Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.</div></pre></td></tr></table></figure></p>
<h4 id="solution-1-binary-search-slow">Solution 1: Binary Search (slow)</h4>
<h5 id="explanation">Explanation:</h5>
<p>heaters排序，对每个house用binary Search找到最靠近的那个值。</p>
<h5 id="code">Code:</h5>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public int findRadius(int[] houses, int[] heaters) &#123;</div><div class="line">    Arrays.sort(heaters);</div><div class="line">    int radius = 0;</div><div class="line">    for ( int h : houses) &#123;</div><div class="line">        radius = Math.max(radius, binarySearch(h, heaters));</div><div class="line">    &#125;</div><div class="line">    return radius;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public int binarySearch(int val, int[] heaters) &#123;</div><div class="line">    int start = 0;</div><div class="line">    int end = heaters.length - 1;</div><div class="line">    int diff =Integer.MAX_VALUE;</div><div class="line">    while (start &lt; end) &#123;</div><div class="line">        int mid = (start + (end-start)/2);</div><div class="line">        if (val &lt; heaters[mid]) &#123;</div><div class="line">            end = mid;</div><div class="line">        &#125; else &#123;</div><div class="line">            start = mid+1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (start &gt; 0) &#123;</div><div class="line">        diff = Math.min(Math.abs(val - heaters[start]), Math.abs(val - heaters[start-1]));</div><div class="line">    &#125;</div><div class="line">    if (start &lt; heaters.length - 1) &#123;</div><div class="line">        diff = Math.min(diff, Math.abs(val - heaters[start+1]));</div><div class="line">    &#125;</div><div class="line">    diff = Math.min(diff, Math.abs(val - heaters[start]));</div><div class="line">    return diff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="solution-2-two-pointersquicker">Solution 2: Two pointers(quicker)</h4>
<h5 id="explanation">Explanation:</h5>
<p>heaters, houses排序，用两个指针分别遍历一遍，主体部分的复杂度是O（m+n）</p>
<h5 id="code">Code:</h5>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int findRadius(int[] houses, int[] heaters) &#123;</div><div class="line">    // O(mlogm)</div><div class="line">    Arrays.sort(houses);</div><div class="line">    // O(nlogn)</div><div class="line">    Arrays.sort(heaters);</div><div class="line">    int i = 0, res = 0;</div><div class="line">    // O(m+n)</div><div class="line">    for (int house : houses) &#123;</div><div class="line">        while (i &lt; heaters.length - 1 &amp;&amp; heaters[i] + heaters[i + 1] &lt;= house * 2) &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        res = Math.max(res, Math.abs(heaters[i] - house));</div><div class="line">    &#125;</div><div class="line">    return res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question:&lt;/h4&gt;
&lt;p&gt;Winter is coming! Your first job during the contest is
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
      <category term="Two pointers" scheme="http://yoursite.com/tags/Two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 356. Line Reflection</title>
    <link href="http://yoursite.com/2017/02/12/Leetcode-356-Line-Reflection/"/>
    <id>http://yoursite.com/2017/02/12/Leetcode-356-Line-Reflection/</id>
    <published>2017-02-13T00:10:02.000Z</published>
    <updated>2017-02-13T00:18:27.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points.</p>
<p><strong>Example 1:</strong>
Given points = [[1,1],[-1,1]], return true.</p>
<p><strong>Example 2:</strong>
Given points = [[1,1],[-1,-1]], return false.</p>
<p><strong>Follow up:</strong>
Could you do better than O(n2)?</p>
<p><strong>Hint:</strong></p>
<blockquote>
<p>Find the smallest and largest x-value for all points.
If there is a line then it should be at y = (minX + maxX) / 2.
For each point, make sure that it has a reflected point in the opposite side.</p>
</blockquote>
<h4 id="explanation">Explanation:</h4>
<p>刚开始的思路是， 用一个map存{y值:[所有相应x值]}。
对于每一个y值，将其对应的x值的list排序。用two pointers检查是不是对称。
这样的复杂度超过O(n^2)了，sort就已经O(nlogn)了。
于是，按照了hint写，先遍历一遍，得到x最大值和最小值，从而得到x中间值。再遍历一遍，存下每个点的对称点。最后遍历一遍，如果有哪个坐标不在set里面，说明没有对称点。（和two sum一样的思路）</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public boolean isReflected(int[][] points) &#123;</div><div class="line">    if(points == null || points.length == 0) return true;</div><div class="line">    int minX = Integer.MAX_VALUE;</div><div class="line">    int maxX = Integer.MIN_VALUE;</div><div class="line">    double midX = 0.0;</div><div class="line">    for( int i=0; i&lt;points.length; i++) &#123;</div><div class="line">        int[] point = points[i];</div><div class="line">        int x = point[0]; int y = point[1];</div><div class="line">        minX = Math.min(minX, x);</div><div class="line">        maxX = Math.max(maxX, x);</div><div class="line">    &#125;</div><div class="line">    midX = (minX + maxX) / 2.0;</div><div class="line">    HashSet&lt;Integer&gt; set = new HashSet&lt;&gt;();</div><div class="line">    for( int i=0; i&lt;points.length; i++) &#123;</div><div class="line">        int[] point = points[i];</div><div class="line">        int x = point[0]; int y = point[1];</div><div class="line">        int[] reflect = new int[2];</div><div class="line">        reflect[0] = (int)(2*midX- x);</div><div class="line">        reflect[1] = y;</div><div class="line">        set.add(Arrays.hashCode(reflect));</div><div class="line">    &#125;</div><div class="line">    for( int i=0; i&lt;points.length; i++) &#123;</div><div class="line">        int[] point = points[i];</div><div class="line">        if (!set.contains(Arrays.hashCode(point))) return false;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question:&lt;/h4&gt;
&lt;p&gt;Given n points on a 2D plane, find if there is such a 
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 409. Longest Palindrome</title>
    <link href="http://yoursite.com/2017/02/12/Leetcode-409-Longest-Palindrome/"/>
    <id>http://yoursite.com/2017/02/12/Leetcode-409-Longest-Palindrome/</id>
    <published>2017-02-12T21:42:32.000Z</published>
    <updated>2017-02-13T00:09:11.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>
<p>This is case sensitive, for example &quot;Aa&quot; is not considered a palindrome here.</p>
<p>Note:
Assume the length of given string will not exceed 1,010.</p>
<p>Example:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;abccccdd&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">7</div><div class="line"></div><div class="line">Explanation:</div><div class="line">One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>超简单的题。
Solution 1:
可以用数组存储每个字母的次数，但是需要考虑大小写字母，分开根据ascii计算index。
Solution 2:
用Hashmap存储每个字符出现的次数，加和所有even次数，再加和odd/2*2，如果出现过odd，最后加上1，否则不加。
Solution 3:<br>
用HashSet，如果出现过，就加2，去掉。再出现，再加入。最后如果set是空的，说明没有odd，否则加上1。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public int longestPalindrome(String s) &#123;</div><div class="line">    HashSet&lt;Character&gt; set = new HashSet&lt;&gt;();</div><div class="line">    int count = 0;</div><div class="line">    for (Character c: s.toCharArray()) &#123;</div><div class="line">        if (set.contains(c)) &#123;</div><div class="line">            count += 2;</div><div class="line">            set.remove(c);</div><div class="line">        &#125; else set.add(c);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    if (!set.isEmpty()) count++;</div><div class="line">    return count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question:&lt;/h4&gt;
&lt;p&gt;Given a string which consists of lowercase or uppercas
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
</feed>

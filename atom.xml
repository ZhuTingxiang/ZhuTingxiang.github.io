<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Star</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-30T18:15:38.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Star</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>论文笔记：Facebook可扩展架构概览</title>
    <link href="http://yoursite.com/2017/03/29/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%EF%BC%9AFacebook%E5%8F%AF%E6%8B%93%E5%B1%95%E6%9E%B6%E6%9E%84%E6%A6%82%E8%A7%88/"/>
    <id>http://yoursite.com/2017/03/29/论文笔记：Facebook可拓展架构概览/</id>
    <published>2017-03-30T01:43:57.000Z</published>
    <updated>2017-03-30T18:15:38.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文是论文《Overview of Facebook Scalable Architecture》的阅读笔记，作者Hugo Barrigas, Daniel Barrigas, Melyssa Barata, Pedro Furtado, Jorge Bernardina。技术细节很少，只是一个粗略的大框架。其实根本也没有讲什么细节，所以以后有更多补充再往里写。感觉最大的亮点就是<strong>MySQL+Memcached</strong>。</p>
<hr>
<p>这篇文章主要是介绍Facebook的网站架构，讲述在扩展方面遇到的困难和解决的方式，从而更好了解Facebook是如何运行的。
对于大型分布式系统来说，可拓展性是网络、系统和进程中非常重要的指标。它标志着是否有成长的能力，是否能处理增长的工作量。
规模只是拓展需要考虑的一个方面。可拓展性包含如下几个方面：<br>
a. 是否能轻松增加存储能力<br>
b. 能处理多少增加的traffic<br>
c. 能多运行多少事务</p>
<h3 id="facebook网站架构">Facebook网站架构</h3>
<h4 id="facebook如何运作">Facebook如何运作</h4>
<p>随着用户增加，Facebook做了一些改动，但依旧使用LAMP（Linux-Apache-Memcached-PHP）模式：
a. 依旧使用PHP，但写了一个将PHP转成C++的编译器来提高服务器的性能。
b. 依旧使用Linux但进行了一些优化。
c. 最具有争议的事情是使用MySQL，它依旧是最主要的数据库。
另外Facebook还有两个自己系统：</p>
<ol>
<li>Haystack：高拓展，用来存储大量的图片。</li>
<li>Scribe：一个可拓展的登录系统。</li>
</ol>
<h4 id="facebook前端">Facebook前端</h4>
<p>前端是把LAMP服务器运行在Memcache上。</p>
<h5 id="linux-amp-apache">Linux &amp; Apache</h5>
<p>Facebook使用Linux和Apache HTTP Server</p>
<h5 id="php-amp-bigpipe">PHP &amp; BigPipe</h5>
<p>BigPipe是Facebook开发的动态网页系统。主要就是把各个部分通过不同的步骤在浏览器和服务器中完成。
比如：</p>
<p>￼￼￼<img src="http://i.imgur.com/QpgOhQI.png" alt=""></p>
<h5 id="hiphop">HipHop</h5>
<p>将PHP编译成C++的编译器。一些关键点：</p>
<ul>
<li>是PHP编译器</li>
<li>容易增加插件</li>
<li>极大减少了CPU和内存的使用量</li>
</ul>
<p><img src="http://i.imgur.com/SH8jSfb.png" alt=""></p>
<h4 id="facebook后端">Facebook后端</h4>
<h5 id="mysql">MySQL</h5>
<p>Facebook在MySQL的使用上运用了sharding和caching的技术。
为了让MySQL可拓展，主要的解决方案就是sharding。也就是数据库被分为几个部分，而且90%的query都存在缓存里，并不需要去数据库里取。Facebook非常依赖Memcached，并且值得一提的是Facebook在多个数据中心中有好几千个MySQL的服务器。另外，Facebook一些复杂的Join操作都是在服务器层面跑的，而不是直接在表上跑。（怎么做到的...不清楚技术细节）</p>
<h5 id="scribe">Scribe</h5>
<p>Scribe是Facebook的登录系统。Scribe主要做的就是从多个服务器端读取整合数据，然后把信息传送给Hadoop：
<img src="http://i.imgur.com/NkAvOBJ.png" alt=""></p>
<h5 id="thrift">Thrift</h5>
<p>Thrift协议提供不同语言之间的序列化，从而使Facebook支持不同语言共同开发应用。</p>
<h4 id="memcached">Memcached</h4>
<p>Memcache是键值对内存存储缓存系统。</p>
<p><img src="http://i.imgur.com/KEljkA5.png" alt=""></p>
<h4 id="hadoop-amp-hive">Hadoop &amp; Hive</h4>
<p><img src="http://i.imgur.com/Zko5phE.png" alt=""></p>
<h4 id="haystack">Haystack</h4>
<p>Haystack是在主内存中加入了可拓展的缓存：</p>
<p><img src="http://i.imgur.com/XT5VIhG.png" alt=""></p>
<h3 id="主体架构">主体架构</h3>
<p><img src="http://i.imgur.com/HWAy2UQ.png" alt=""></p>
<hr>
<p><em>REFERENCES：</em></p>
<p>[1] Building Scalable Web Architecture and Distributed Systems http://www.drdobbs.com/web-development/building-scalable-web-architecture-and-d/240142422, (Accessed 26 January , 2014)</p>
<p>[2] How Does Facebook Work? The Nuts and Bolts [Technology Explained] http://www.makeuseof.com/tag/facebook-work-nuts-bolts-technology-explained/ (Accessed 25 February 2014)</p>
<p>[3] Lloys G. W. Lloyd and Connie U. S. 2008. Scalable Query Result Caching for Web Applications. PVLDB vol. 1 no. 1 pp. 550-561, 2008</p>
<p>[4] Parris I., Abdesslem F. B., and Henderson T. 2012. Facebook or Fakebook? The effect of simulation on location privacy user studies. Ad Hoc Networks vol. 12 pp. 35-49</p>
<p>[5] Performance and scalability techniques 101 http://www.webforefront.com/performance/scaling101.html , (Accessed 30 January 2014)</p>
<p>[6] Scaling the Messages Application Back End
https://www.facebook.com/note.php?note_id=10150148835363920 (Accessed 25 February 2014)</p>
<p>[7] The effects of teacher self-disclosure via Facebook on
teacher credibility
http://www.gtaan.gatech.edu/meetings/handouts/MazerFacebook.pdf (Accessed 25 February 2014)</p>
<p>￼</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本文是论文《Overview of Facebook Scalable Architecture》的阅读笔记，作者Hugo Barrigas, Daniel Barrigas
    
    </summary>
    
      <category term="Cloud Computing" scheme="http://yoursite.com/categories/Cloud-Computing/"/>
    
    
      <category term="Scalability" scheme="http://yoursite.com/tags/Scalability/"/>
    
      <category term="Facebook" scheme="http://yoursite.com/tags/Facebook/"/>
    
      <category term="Architecture" scheme="http://yoursite.com/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>分布式系统知识整理：二阶段提交协议、三阶段提交协议</title>
    <link href="http://yoursite.com/2017/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    <id>http://yoursite.com/2017/03/29/分布式一致性/</id>
    <published>2017-03-29T23:19:56.000Z</published>
    <updated>2017-03-30T01:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文梳理分布式系统中的常见概念：二阶段提交协议和三阶段提交协议。</p>
<h2 id="二阶段提交协议two-phase-commit-protocol">二阶段提交协议(Two-phase Commit Protocol)</h2>
<p>TPC是基于分布式系统架构下所有节点进行事务提交时保持<strong>一致性</strong>而设计的一种算法。在分布式系统中，每个节点虽然可以知晓自己操作的成功或失败，但无法知道其他节点的情况。需要一个协调者来组织所有节点的操作结果并最终指示他们是否进行真正的提交。</p>
<h3 id="第一阶段投票阶段">第一阶段：投票阶段</h3>
<p>1）协调者给参与者发送信息，询问是否vote，等待响应。<br>
2）参与者节点执行事务操作，写本地的redo和undo日志，但不提交。<br>
3）参与者回复协调者，如果实务操作执行成功，返回“同意”。否则，返回“中止”。</p>
<h3 id="第二阶段提交阶段">第二阶段：提交阶段</h3>
<p>a.如果第一阶段所有参与者提交都为“同意”：<br>
1）协调者给参与者发送“是否正式提交”的询问。<br>
2）参与者正式完成操作，释放资源。<br>
3）参与者返回“完成”信息。<br>
4）协调者收到所有“完成”信息，完成事务。</p>
<p>b.如果第一阶段有参与者提交“中止”：<br>
1）协调者向所有参与者节点发出“回滚”的请求。<br>
2）参与者利用undo信息执行回滚，释放在整个事务占用的资源。<br>
3）参与者返回“回滚完成”信息。<br>
4）协调者收到所有参与者的“回滚完成”后，取消事务。</p>
<p>整个过程如图所示：</p>
<p><img src="http://i.imgur.com/J1kzk7I.png" alt=""></p>
<h3 id="存在的问题">存在的问题</h3>
<ol>
<li>节点在等待消息处于阻塞的状态，节点中的其他进程需要等待阻塞进程释放资源。</li>
<li>如果参与者故障，协调者需要给每个参与者制定超时机制，超时后整个事务失败。TPC没有容错机制，一个节点故障整个事务都要回滚，代价很大。</li>
<li>如果协调器发生故障，参与者无法完成事务，就会一直阻塞下去。</li>
<li>如果协调者发出commit消息之后宕机，唯一接收到消息的参与者也同时宕机了，即使协调者通过选举产生了新协调者，这条事务的状态是无人知晓的。</li>
</ol>
<p>因此，后来产生了三阶段提交协议。</p>
<h2 id="三阶段提交协议three-phase-commit-protocol">三阶段提交协议(Three-phase Commit Protocol)</h2>
<p>非阻塞协议。</p>
<p>两方面的改动：</p>
<ol>
<li>引入超时机制，协调者和参与者都引入超时机制。</li>
<li>在TPC的第一阶段和第二阶段之间插入了一个准备阶段，保证在最后提交阶段之前各参与节点的状态是一致的。</li>
</ol>
<p><img src="http://i.imgur.com/YLxLPqR.png" alt=""></p>
<hr>
<p><em>References:</em></p>
<ol>
<li>3.1.4 Two-phase commit: http://itdoc.hitachi.co.jp/manuals/3000/30003D5030e/DESC0050.HTM</li>
<li>Wikipedia:<br>
https://zh.wikipedia.org/zh-hans/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4</li>
<li>分布式协议之两阶段提交协议（2PC）和改进三阶段提交协议（3PC）:     http://www.mamicode.com/info-detail-890945.html</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本文梳理分布式系统中的常见概念：二阶段提交协议和三阶段提交协议。&lt;/p&gt;
&lt;h2 id=&quot;二阶段提交协议two-phase-commit-protocol&quot;&gt;二阶段提交协议(
    
    </summary>
    
      <category term="Distributed System" scheme="http://yoursite.com/categories/Distributed-System/"/>
    
    
      <category term="Distributed System" scheme="http://yoursite.com/tags/Distributed-System/"/>
    
      <category term="2PC" scheme="http://yoursite.com/tags/2PC/"/>
    
      <category term="3PC" scheme="http://yoursite.com/tags/3PC/"/>
    
  </entry>
  
  <entry>
    <title>云计算知识整理：使用Apache Kafka和Samza进行流处理</title>
    <link href="http://yoursite.com/2017/03/25/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%9A%E4%BD%BF%E7%94%A8Apache-Kafka%E5%92%8CSamza%E8%BF%9B%E8%A1%8C%E6%B5%81%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/03/25/云计算知识整理：使用Apache-Kafka和Samza进行流处理/</id>
    <published>2017-03-25T19:48:14.000Z</published>
    <updated>2017-03-30T01:47:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文是关于Stream Processing with Kafka and Samza的介绍以及总结反思。</p>
<h3 id="流处理">流处理</h3>
<p>如今实时数据处理的需求越来越高，实时数据的来源包括传感器数据（比如物联网设备），社交网络交互，实时商业数据等。这些情况下需要极其的延迟率。比如LinkedIn就需要用实时的广告点击数据来不断扩充广告架构。类似Hadoop和Spark这种数据获取和数据处理分离的方式无法达到低延迟的实时处理需求。所以在这里就介绍一写管理和处理大量实时数据的流处理框架。</p>
<h3 id="apache-kafka">Apache Kafka</h3>
<p>Kafka是分布式发布-订阅消息系统。由linkedin开发，后来成为Apache项目的一部分。发布者把消息放在不同的classes里，并不知道订阅者会如何使用这些数据。而订阅者可以订阅特定的消息并且只能收到相应的消息。Kafka使用commit log来保持数据，commit log是按顺序的，不可修改的，只能添加的数据结构。Kafka最大的优势是它提供完整的数据结构，所有的组织里的系统能够独立和可靠地获取数据。可以认为Kafka是流数据源。以下为一些主要Kafka术语：</p>
<ul>
<li>
<p>Topic:
表示一个用户定义的类型，消息会在这个类别下发布。主要用partitioned log来维护。</p>
</li>
<li>
<p>Producers:
用来向Kafka集群中发布一个或多个topic信息的进程。</p>
</li>
<li>
<p>Consumers：
用来向Kafka集群中读取消息的进程。</p>
</li>
<li>
<p>Partitions：
topics被分为多个partitions。一个partition代表一个并行单位。总的来说，partition越多，吞吐量越多。每个partition中的每个信息都有特定的偏移量，这样数据消费者能借此定位。简单来说，我们认为Kafka会根据key来给数据排序并提供，类似于MapReduce中的Map和Shuffle的阶段。</p>
</li>
<li>
<p>Brokers：
Brokers用来负责数据持久化和复制。brokers会和producers交流来发布信息给Kafka集群，和consumers交谈来获取信息。</p>
</li>
</ul>
<p><img src="http://i.imgur.com/sVrZDbo.png" alt=""></p>
<p>值得注意的是，kafka不会运行处理数据，只是一种存储和分类流数据的一种方式。在这个Project里，你需要用Samza来处理Kafka提供的数据流。</p>
<p>可以看下这个视频（通常搞不懂一个概念的时候我都是查youtube_(:зゝ∠)_ ）<a href="https://www.youtube.com/watch?v=Q5wOegcVa8E" target="_blank" rel="external">Understanding Kafka with Legos</a></p>
<h3 id="apache-samza">Apache Samza</h3>
<p>Samza是由Linkedin开发的分布式流处理框架，以下为三层流处理框架中的关键组件：</p>
<ul>
<li>Streaming：这一层是用partitioned stream的方式提供输入，这里也就是Kafka</li>
<li>Execution:在不同的机器间调度协调任务，这里使用YARN</li>
<li>Processing：负责具体的数据处理，这里使用Samza</li>
</ul>
<p>Samza相关的术语包括：</p>
<ul>
<li>Streams：等同于Kafka的topics</li>
<li>Jobs：使用Samza API来从一个或多个流读取和处理数据。一个Job可能被分割成不同的task，每个task可能会使用输入流中的一个或多个partition</li>
<li>Stateful Stream Processing：流处理可以分为有状态和无状态。</li>
</ul>
<p><img src="http://i.imgur.com/8497uxN.png" alt="">
<img src="http://i.imgur.com/TJSfPwq.png" alt=""></p>
<p>Samza结构：
<img src="http://i.imgur.com/53TilKn.png" alt=""></p>
<h3 id="samza-api">Samza API</h3>
<p>Samza API简单抽象，以一个ExampleCode为例，看Twitter类似的实时信息如何展示：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">￼public class FanOutTask implements StreamTask, InitableTask, WindowableTask &#123;</div><div class="line">   private KeyValueStore&lt;String, String&gt; socialGraph;</div><div class="line">   private KeyValueStore&lt;String, Map&lt;String, Object&gt;&gt; userTimeline;</div><div class="line">   private long numMessages = 0;</div><div class="line">   @Override</div><div class="line">   @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">   public void init(Config config, TaskContext context) throws Exception &#123;</div><div class="line">     socialGraph = (KeyValueStore&lt;String, String&gt;) context.getStore(&quot;social-graph&quot;);</div><div class="line">     userTimeline = (KeyValueStore&lt;String, Map&lt;String, Object&gt;&gt;) context.getStore(&quot;user-timelin</div><div class="line"> e&quot;);</div><div class="line">&#125;</div><div class="line">   @Override</div><div class="line">   @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">   public void process(IncomingMessageEnvelope envelope, MessageCollector collector, TaskCoordin</div><div class="line"> ator coordinator) &#123;</div><div class="line">     String incomingStream = envelope.getSystemStreamPartition().getStream();</div><div class="line">     if (incomingStream.equals(NewsfeedConfig.FOLLOWS_STREAM.getStream())) &#123;</div><div class="line">       processFollowsEvent((Map&lt;String, Object&gt;) envelope.getMessage());</div><div class="line">     &#125; else if (incomingStream.equals(NewsfeedConfig.MESSAGES_STREAM.getStream())) &#123;</div><div class="line">       processMessageEvent((Map&lt;String, Object&gt;) envelope.getMessage(), collector);</div><div class="line">     &#125; else &#123;</div><div class="line">       throw new I</div></pre></td></tr></table></figure></p>
<p>所有的Samza Jobs都要完成 StreamTask接口，有的时候还需要完成InitableTask和WindowableTask接口。</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本文是关于Stream Processing with Kafka and Samza的介绍以及总结反思。&lt;/p&gt;
&lt;h3 id=&quot;流处理&quot;&gt;流处理&lt;/h3&gt;
&lt;p&gt;如今实时
    
    </summary>
    
      <category term="Cloud Computing" scheme="http://yoursite.com/categories/Cloud-Computing/"/>
    
    
      <category term="Cloud Computing" scheme="http://yoursite.com/tags/Cloud-Computing/"/>
    
      <category term="Stream Processing" scheme="http://yoursite.com/tags/Stream-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 111. Minimum Depth of Binary Tree</title>
    <link href="http://yoursite.com/2017/03/09/Leetcode-111-Minimum-Depth-of-Binary-Tree/"/>
    <id>http://yoursite.com/2017/03/09/Leetcode-111-Minimum-Depth-of-Binary-Tree/</id>
    <published>2017-03-09T23:02:18.000Z</published>
    <updated>2017-03-10T00:28:46.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given a binary tree, find its minimum depth.</p>
<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
<h3 id="explanation">Explanation</h3>
<p>本题的问题是求根节点到最近的叶节点的距离，叶节点不能是空的。所以考虑的时候，要考虑如果有一边是空的，就只能以另外一边的最短路径长度为准。</p>
<p>比如这个：</p>
<p><img src="http://i.imgur.com/fqxoG0c.png" alt=""></p>
<p>返回值为2，而不是1。因为“1”不是叶节点，所以最短路径是从1到2。</p>
<h3 id="code">Code</h3>
<h4 id="dfs1">DFS1</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public int minDepth(TreeNode root) &#123;</div><div class="line">    if (root == null) return 0;</div><div class="line">    if (root.left == null &amp;&amp; root.right == null) return 1;</div><div class="line">    int minLeft = minDepth(root.left); int minRight = minDepth(root.right);</div><div class="line">    return 1 + (Math.min(minLeft, minRight) &gt; 0 ? Math.min(minLeft, minRight) : Math.max(minLeft, minRight));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="dfs2">DFS2</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public int minDepth(TreeNode root) &#123;</div><div class="line">    if (root == null) return 0;</div><div class="line">    if (root.left != null &amp;&amp; root.right != null) return  1+Math.min(minDepth(root.left), minDepth(root.right));</div><div class="line">    if (root.left == null) return 1+minDepth(root.right);</div><div class="line">    else return 1+minDepth(root.left);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="bfs">BFS</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public int minDepth(TreeNode root) &#123;</div><div class="line">    if (root == null) return 0;</div><div class="line">    Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</div><div class="line">    queue.offer(root);</div><div class="line">    int i=0;</div><div class="line">    while (queue.peek()!=null) &#123;</div><div class="line">        int size = queue.size();</div><div class="line">        i ++;</div><div class="line">        for (int j=0; j&lt;size; j++) &#123;</div><div class="line">            TreeNode cur = queue.peek();</div><div class="line">            if (cur.left == null &amp;&amp; cur.right == null) return i;</div><div class="line">            if (cur.left != null) queue.offer(cur.left);</div><div class="line">            if (cur.right != null) queue.offer(cur.right);</div><div class="line">            queue.poll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given a binary tree, find its minimum depth.&lt;/p&gt;
&lt;p&gt;The
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>云计算应用实例：OFA/Start-ups/Data Analytics/Cloud Migration Exercise</title>
    <link href="http://yoursite.com/2017/03/06/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B%EF%BC%9AObama-For-America/"/>
    <id>http://yoursite.com/2017/03/06/云计算应用实例：Obama-For-America/</id>
    <published>2017-03-06T19:41:09.000Z</published>
    <updated>2017-03-30T01:47:17.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文主要是总结一些云计算的应用实例，是否要用云计算这个问题是个很复杂的问题，大多数时候需要根据需求和预算才能得到确切的答案，云计算是趋势，但如何利用是个值得仔细考虑的问题。</p>
<h1 id="云计算应用实例obama-for-america">云计算应用实例：Obama For America</h1>
<blockquote>
<p>Obama For America（OFA）是云计算一个经典实例，云计算被运用在筹集竞选资金、分析竞争对手、有效使用竞选资金等都为奥巴马的连任成功提供了极大的保障。</p>
</blockquote>
<h2 id="ofa是什么">OFA是什么？</h2>
<p>OFA利用数据集成和预测分析使奥巴马赢得了选举，主要通过数据挖掘来确定及影响摇摆州的投票目标。OFA的数据来源包含：人口数据，投票历史数据，筹款数据，志愿者数据，社交网络数据以及投票数据，得到相关数据后，通过上门拜访，打电话，邮件，信件，网络广告，社交媒体，付费电视和网站等方式来影响投票人的决定。</p>
<h2 id="ofa的一些数据">OFA的一些数据</h2>
<p>根据DevOps的负责人透露，OFA的一些关键数据包括：</p>
<ul>
<li>4Gbps带宽</li>
<li>每秒10,000条请求</li>
<li>2,000个数据节点</li>
<li>3个数据中心</li>
<li>180TB数据量</li>
<li>共约85亿条请求</li>
<li>从设计到部署到应用共用了583天</li>
<li>最多30分钟的宕机时间</li>
<li>技术团队共40人</li>
</ul>
<h2 id="核心应用">核心应用</h2>
<p>Obama For America团队一共构建了200个应用，包括：</p>
<h3 id="narwhal">Narwhal</h3>
<p>Narwhal是一个python写的REST API，可调用存放的所有数据。在OFA中，大多数数据存放在MySQL为主的关系型数据库中，但也使用了PostgresDB, MS SQL Server, MongoDB, Vertica, LevelDB, S3, DynamoDB, SimpleDB数据库。除数据存储之外，主要应用了AWS EMR(Elastic MapReduce service)和Vertica来处理大量的数据建模和分析的工作。</p>
<h3 id="calltool">CallTool</h3>
<p>CallTool可以用来让志愿者给投票人打电话。在选举的最后四天里，这个工具被1000多个志愿者给超过百万的投票人打了电话。工具可以将志愿者和投票人进行配对。团队在其中应用了AWS的auto-scalling功能在需求高峰能够快速增加云资源。</p>
<h3 id="dashboard">DashBoard</h3>
<p>一个用来登记志愿者信息，并允许志愿者查看相应进度和收集到的信息的Rails线上应用工具。</p>
<h3 id="dreamcatcher">Dreamcatcher</h3>
<p>Dreamcatcher可以通过处理社交网络上的政治舆情，精确确定目标投票人，并赢得投票人。</p>
<h3 id="gotv">GOTV</h3>
<p>GOTV即Get out the vote，这个应用用来动员支持者将支持转化为投票。</p>
<h2 id="aws如何帮助了ofa">AWS如何帮助了OFA?</h2>
<p>OFA所有的应用几乎都部署在AWS云端，他们应用了分布消息队列，NoSQL和SQL数据库，虚拟私有云服务，负载均衡，内容传输网络等服务。
除了能够应对大规模数据处理需求之外，还能够在需求高峰通过自动增加云计算资源保证响应速度。另外，团队在数据备份上也充分利用了云计算的优势。</p>
<p><img src="http://i.imgur.com/LZfspfL.png" alt=""></p>
<p><img src="http://i.imgur.com/6DnWTB5.png" alt=""></p>
<p><img src="http://i.imgur.com/TJaoYcR.png" alt=""></p>
<p><img src="http://i.imgur.com/vE7R4Ui.png" alt=""></p>
<hr>
<p><strong>Reference:</strong></p>
<blockquote>
<ol>
<li><a href="https://gigaom.com/2012/11/12/how-obamas-tech-team-helped-deliver-the-2012-election/" target="_blank" rel="external">How Obama’s tech team helped deliver the 2012 election</a></li>
<li>Wikipedia:<a href="https://en.wikipedia.org/wiki/Organizing_for_America" target="_blank" rel="external">Organizing for America</a></li>
<li>CMU 15719 slides</li>
<li><a href="http://www.informationweek.com/cloud/6-ways-amazon-cloud-helped-obama-win/d/d-id/1107433" target="_blank" rel="external">6 Ways Amazon Cloud Helped Obama Win</a></li>
</ol>
</blockquote>
<h1 id="云计算应用实例start-ups">云计算应用实例：Start-ups</h1>
<h2 id="背景">背景</h2>
<p>对于Start-up来说，计算要求往往各种各样，需求量不大，变化却很快。在有限的预算下，还存在着硬件采购周期长，部署周期长，负担不起系统管理，数据中心能量供应，利用率低，灾难响应速度低等问题。</p>
<p>所以，云计算成为了Start-up的一种选择。举个栗子：</p>
<h3 id="gosquared">GoSquared</h3>
<p>GoSquared是一家提供线上实时数据网站分析的企业，被TechCrunch报道后，使用量忽然增加，没有足够的资源应对增长，最终把网站搬到了AWS上，可以迅速得到更多资源，快速拓展。</p>
<p><strong>Reference</strong></p>
<blockquote>
<p><a href="https://aws.amazon.com/solutions/case-studies/gosquared/" target="_blank" rel="external">AWS case study: GoSquared</a></p>
</blockquote>
<h1 id="云计算应用实例data-analytics">云计算应用实例：Data Analytics</h1>
<p>如今企业决策都讲究数据驱动，层出不穷的多媒体数据往往有不同的数据来源，从text到图片到音频和视频。数据处理还分为批处理和流处理。如今，传统的数据处理流程也慢慢转向了云端。</p>
<h2 id="数据处理流程图">数据处理流程图</h2>
<p><img src="http://i.imgur.com/7OTudIS.png" alt=""></p>
<h2 id="lambda架构">Lambda架构</h2>
<p>Lambda架构定义了一套明确的架构原则，同时利用批处理和流处理对大规模的数据进行处理。此框架的提出主要是为了解决这样的一个问题：如何实时地在任意大数据集上进行查询？</p>
<p>Lambda架构包含三层layer：</p>
<ul>
<li><strong>批处理层：写一次，批量读取多次</strong><br>
主要有Hadoop实现，负责数据存储和产生试图数据。当新数据到达时，会用MapReduce迭代地讲数据聚集到视图中。根据数据大小和集群的规模，迭代转换计算时间大约需要几小时。</li>
<li><strong>服务层：随机读取，不支持随机写入，批量计算和批量写入</strong><br>
这层由Cloudera Impala实现，对于上一层输出的一些列包含预计算视图的原始文件，服务层在Hive元数据层中创建一个表，元数据都指向HDFS中的文件，随后用户可以通过Impala查询到视图。这里服务层用Impala就是为了快速而且交互地查询到Hadoop存储和处理的数据。但是由于MapReduce在实时数据处理中的高延迟，我们还需要加速层。
在这一层中，需要合并处理Batch views和Real-time views得到最终user需要的query结果。</li>
<li><strong>加速层：随机读取，随机写入，增量计算</strong><br>
本层利用Strom框架计算实时视图，使用增量模型，将实时视图作为临时量，只要数据被传送到批处理层中，服务层相应的实时视图就会被丢掉。由于应用了增量模型，往往会比较复杂。</li>
</ul>
<p>所以，整个流程为，当数据进来时，会并行地进入到批处理层与加速层，当两者查询都完成在服务层整合好后，才算完成一次完整的查询。</p>
<p><img src="http://i.imgur.com/E2LbtPy.png" alt=""></p>
<p>但是这样令人激动的模型，还存在着一些争议，比如</p>
<ul>
<li>代码维护需要在两个复杂的分布式系统中进行，需要对不同的框架进行不同的编程。</li>
<li>在两个分布式系统中运行和维护程序任然很难，比如跨数据库系统中进行ORM（对象关系映射）就会比较难。</li>
</ul>
<p>关于Lambda框架的具体细节可参考这本书：<a href="https://www.manning.com/books/big-data" target="_blank" rel="external">《Big data: Principles and best practices of scalable realtime data systems》
</a>
其中除了介绍Lambda框架外，还重点放在了一些重要的地方：</p>
<ul>
<li>分布式思想</li>
<li>避免增量架构</li>
<li>创建再计算算法</li>
<li>数据相关性</li>
<li>关注数据不可变</li>
</ul>
<p>这张图很好诠释了Lambda是如何处理query的：
<img src="http://i.imgur.com/qcUMzoL.png" alt=""></p>
<p>随着发展，后来，Spark被认为是Lambda框架的合理实现。所以在这一部分，感觉写Lambda框架有点过时呢，但老师提到了就再理解一下。时代发展就是这样的，Lambda框架这种临时解决方案，会被更完美的方案取代。不过，不管怎样，人类的进步是令人欣喜的。关于Spark有空可以再写一篇具体一点的，amazing。</p>
<p><strong>References：</strong></p>
<blockquote>
<ol>
<li><a href="http://blog.csdn.net/john_f_lau/article/details/25502203" target="_blank" rel="external">大数据Lambda架构</a></li>
<li><a href="https://en.wikipedia.org/wiki/Lambda_architecture" target="_blank" rel="external">Wikipedia Lambda Architecture</a></li>
<li><a href="https://dzone.com/articles/lambda-architecture-with-apache-spark" target="_blank" rel="external">Lambda Architecture with Apache Spark</a></li>
</ol>
</blockquote>
<h1 id="云计算应用实例云迁移-究竟是否应该选择cloud">云计算应用实例：云迁移 （究竟是否应该选择Cloud？）</h1>
<p>对研究室来说，是应该使用预置的硬件，还是迁移到云端？
回答当然是，“It depends.”。</p>
<p>比如需求是这样：</p>
<p><img src="http://i.imgur.com/I3rZUZ1.png" alt=""></p>
<p>如果我们选择预置的机器，按照五年来算：
<img src="http://i.imgur.com/03678Pu.png" alt=""></p>
<p>有以下两种云计算的方案：
方案1：
<img src="http://i.imgur.com/9umJ84S.png" alt="">
方案2：
<img src="http://i.imgur.com/0yWhXho.png" alt=""></p>
<p>所以我们可以针对不同的需求、不同的云计算选择、不同的费用模型、不同的权限要求等来选择是否迁移到云端。</p>
<p>另外，在对比时，我们还需要考虑：</p>
<ul>
<li>对于本地预置机器：供电、散热、安全性等</li>
<li>对于云端：迁移到/迁出云端的成本等</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本文主要是总结一些云计算的应用实例，是否要用云计算这个问题是个很复杂的问题，大多数时候需要根据需求和预算才能得到确切的答案，云计算是趋势，但如何利用是个值得仔细考虑的问题。&lt;
    
    </summary>
    
      <category term="Cloud Computing" scheme="http://yoursite.com/categories/Cloud-Computing/"/>
    
    
      <category term="Cloud Computing" scheme="http://yoursite.com/tags/Cloud-Computing/"/>
    
      <category term="OFA" scheme="http://yoursite.com/tags/OFA/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 530. Minimum Absolute Difference in BST</title>
    <link href="http://yoursite.com/2017/03/03/Leetcode-530-Minimum-Absolute-Difference-in-BST/"/>
    <id>http://yoursite.com/2017/03/03/Leetcode-530-Minimum-Absolute-Difference-in-BST/</id>
    <published>2017-03-03T05:44:39.000Z</published>
    <updated>2017-03-03T05:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.</p>
<p>Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line"></div><div class="line">   1</div><div class="line">    \</div><div class="line">     3</div><div class="line">    /</div><div class="line">   2</div><div class="line"></div><div class="line">Output:</div><div class="line">1</div></pre></td></tr></table></figure></p>
<p>Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
Note: There are at least two nodes in this BST</p>
<h3 id="explanation">Explanation</h3>
<p>按照之前<a href="http://starllap.space/2017/02/28/Leetcode-94-Binary-Tree-Inorder-Traversal/" target="_blank" rel="external">Leetcode 94.Binary Tree Inorder Traversal</a>的思路，可用递归来做。但是如果不是BST的话，我们也可以用Treeset来存值，同样用递归。
两种方法如下，第一种Time complexity O(N), space complexity O(1)，第二种的话Time complexity O(NlgN), space complexity O(N).</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">    // Recursive:</div><div class="line">    Time complexity O(N), space complexity O(1).</div><div class="line">    int min = Integer.MAX_VALUE;</div><div class="line">    TreeNode pre = null;</div><div class="line">    public int getMinimumDifference(TreeNode root) &#123;</div><div class="line">        if (root == null) return 0;</div><div class="line">        getMinimumDifference(root.left);</div><div class="line">        if (pre != null) &#123;</div><div class="line">            min = Math.min(min, root.val - pre.val);</div><div class="line">        &#125;</div><div class="line">        pre = root;</div><div class="line">        getMinimumDifference(root.right);</div><div class="line">        return min;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Another Recursive</div><div class="line">    // If the tree is not BST, we can just use TreeSet to store all the nodes</div><div class="line">    TreeSet&lt;Integer&gt; set = new TreeSet&lt;&gt;();</div><div class="line">    int min = Integer.MAX_VALUE;</div><div class="line">    public int getMinimumDifference(TreeNode root) &#123;</div><div class="line">        if (root == null) return 0;</div><div class="line">        if (!set.isEmpty()) &#123;</div><div class="line">            if (set.ceiling(root.val)!=null) &#123;</div><div class="line">                min = Math.min(min, Math.abs(root.val - set.ceiling(root.val)));</div><div class="line">            &#125;</div><div class="line">            if (set.floor(root.val)!=null) &#123;</div><div class="line">                min = Math.min(min, Math.abs(root.val - set.floor(root.val)));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        set.add(root.val);</div><div class="line">        getMinimumDifference(root.left);</div><div class="line">        getMinimumDifference(root.right);</div><div class="line">        return min;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given a binary search tree with non-negative values, fi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 94.Binary Tree Inorder Traversal</title>
    <link href="http://yoursite.com/2017/02/28/Leetcode-94-Binary-Tree-Inorder-Traversal/"/>
    <id>http://yoursite.com/2017/02/28/Leetcode-94-Binary-Tree-Inorder-Traversal/</id>
    <published>2017-02-28T22:05:02.000Z</published>
    <updated>2017-02-28T22:23:49.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given a binary tree, return the inorder traversal of its nodes' values.</p>
<p>For example:
Given binary tree [1,null,2,3],
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> \</div><div class="line">  2</div><div class="line"> /</div><div class="line">3</div></pre></td></tr></table></figure></p>
<p>return [1,3,2].</p>
<h3 id="explaination">Explaination</h3>
<p>方法1：递归。(参考：<a href="http://starllap.space/2017/02/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91/" target="_blank" rel="external">数据结构：二叉树</a>)
base case： root为null返回一个空list。
之后按中序遍历来遍历左边，中间和右边的节点。</p>
<p>方法2：循环。
用stack存起来，先遍历左边，然后对每一个节点进行中序遍历。弹出Stack的同时，把值存在list里。</p>
<h3 id="code">Code</h3>
<h4 id="recursive">Recursive</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</div><div class="line">    // Recursive:</div><div class="line">    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    if (root == null) return list;</div><div class="line">    list = inorderTraversal(root.left);</div><div class="line">    list.add(root.val);</div><div class="line">    list.addAll(inorderTraversal(root.right));</div><div class="line">    return list;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="iterative">Iterative</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</div><div class="line">    // Iterative:</div><div class="line">    Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</div><div class="line">    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    TreeNode curt = root;</div><div class="line">    while(curt != null || !stack.empty()) &#123;</div><div class="line">        while(curt != null) &#123;</div><div class="line">            stack.add(curt);</div><div class="line">            curt = curt.left;</div><div class="line">        &#125;</div><div class="line">        curt = stack.pop();</div><div class="line">        list.add(curt.val);</div><div class="line">        curt = curt.right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return list;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given a binary tree, return the inorder traversal of it
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Binary Tree" scheme="http://yoursite.com/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>数据结构：二叉树</title>
    <link href="http://yoursite.com/2017/02/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2017/02/28/数据结构：二叉树/</id>
    <published>2017-02-28T19:12:00.000Z</published>
    <updated>2017-03-06T21:07:05.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文是总结Tree这种结构的常用知识点，暂时总结Binary Tree。</p>
<h2 id="binary-tree二叉树">Binary Tree二叉树</h2>
<h3 id="why-tree">Why Tree?</h3>
<p>因为树结合了其他数据结构的优势：</p>
<ul>
<li>顺序数组： 用Binary Search查找会很快。</li>
<li>链表：插入和删除会非常快，不需要shift值。</li>
</ul>
<h3 id="基本概念">基本概念：</h3>
<ul>
<li>根： 树的顶部。</li>
<li>父节点</li>
<li>子节点</li>
<li>叶节点：没有子节点的节点。</li>
<li>Leve（高度）：代表有几代。</li>
</ul>
<h3 id="平衡树和非平衡树">平衡树和非平衡树</h3>
<p>平衡树：
左右子树及其的高度相差&lt;=1，并且左右子树也是平衡树。
<img src="http://i.imgur.com/8XBVd4y.png" alt=""></p>
<h3 id="full-tree-和-complete-tree">Full Tree 和 Complete Tree：</h3>
<ul>
<li>Full Tree:每个节点都有0/2个子节点。</li>
<li>Complete Tree:除了最右边的节点，其他节点都是满节点，并且都靠左。
<img src="http://i.imgur.com/Tp3azOo.png" alt=""></li>
</ul>
<h3 id="binary-tree代码实现">Binary Tree代码实现</h3>
<h4 id="binary-tree-interface">Binary Tree Interface</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public interface BSTInterface &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Searches for the specified key in the tree.</div><div class="line">     * @param key key of the element to search</div><div class="line">     * @return boolean value indication of success or failure</div><div class="line">     */</div><div class="line">    boolean find(int key);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Inserts a new element into the tree.</div><div class="line">     * @param key key of the element</div><div class="line">     * @param value value of the element</div><div class="line">     */</div><div class="line">    void insert(int key, double value);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Deletes an element from the tree using the specified key.</div><div class="line">     * @param key key of the element to delete</div><div class="line">     */</div><div class="line">    void delete(int key);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Traverses and prints values of the tree in ascending order based on key.</div><div class="line">     */</div><div class="line">    void traverse();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="binary-tree功能实现">Binary Tree功能实现</h4>
<ol>
<li>
<p>Find:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public boolean find(int key) &#123;</div><div class="line">    // tree is empty</div><div class="line">    if (root == null) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node curr = root;</div><div class="line">    // while not found</div><div class="line">    while (curr.key != key) &#123;</div><div class="line">        if (curr.key &lt; key) &#123;</div><div class="line">            // go right</div><div class="line">            curr = curr.right;</div><div class="line">        &#125; else &#123;</div><div class="line">            // go left</div><div class="line">            curr = curr.left;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // not found</div><div class="line">        if (curr == null) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return true; // found</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Insert
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public void insert(int key, double value) &#123;</div><div class="line">    Node newNode = new Node(key, value);</div><div class="line">    // empty tree</div><div class="line">    if (root == null) &#123;</div><div class="line">        root = newNode;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node parent = root; // keep track of parent</div><div class="line">    Node curr = root;</div><div class="line">    while (true) &#123;</div><div class="line">        // no duplicate keys allowed</div><div class="line">        // simply keep the existing one here</div><div class="line">        if (curr.key == key) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        parent = curr; // update parent</div><div class="line">        if (curr.key &lt; key) &#123;</div><div class="line">            // go right</div><div class="line">            curr = curr.right;</div><div class="line">            if (curr == null) &#123;</div><div class="line">                // found a spot</div><div class="line">                parent.right = newNode;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            // go left</div><div class="line">            curr = curr.left;</div><div class="line">            if (curr == null) &#123;</div><div class="line">                // found a spot</div><div class="line">                parent.left = newNode;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125; // end of if-else to go right or left</div><div class="line">    &#125; // end of while</div><div class="line">&#125; // end of insert method</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Delete
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">public void delete(int key) &#123;</div><div class="line">    // empty tree</div><div class="line">    if (root == null) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node parent = root;</div><div class="line">    Node curr = root;</div><div class="line">    /*</div><div class="line">     * flag to check left child</div><div class="line">     *</div><div class="line">     * need this flag because actual deletion process happens after the</div><div class="line">     * while loop that is to find the key to delete</div><div class="line">     */</div><div class="line">    boolean isLeftChild = true;</div><div class="line"></div><div class="line">    while (curr.key != key) &#123;</div><div class="line">        parent = curr; // update parent first</div><div class="line">        if (curr.key &lt; key) &#123; // go right</div><div class="line">            isLeftChild = false;</div><div class="line">            curr = curr.right;</div><div class="line">        &#125; else &#123; // go left</div><div class="line">            isLeftChild = true;</div><div class="line">            curr = curr.left;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // case 1: not found</div><div class="line">        if (curr == null) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (curr.left == null &amp;&amp; curr.right == null) &#123;</div><div class="line">        // case 2: leaf</div><div class="line">        if (curr == root) &#123;</div><div class="line">            root = null;</div><div class="line">        &#125; else if (isLeftChild) &#123;</div><div class="line">            parent.left = null;</div><div class="line">        &#125; else &#123;</div><div class="line">            parent.right = null;</div><div class="line">        &#125;</div><div class="line">    &#125; else if (curr.right == null) &#123;</div><div class="line">        // case 3: no right child</div><div class="line">        if (curr == root) &#123;</div><div class="line">            root = curr.left;</div><div class="line">        &#125; else if (isLeftChild) &#123;</div><div class="line">            parent.left = curr.left;</div><div class="line">        &#125; else &#123;</div><div class="line">            parent.right = curr.left;</div><div class="line">        &#125;</div><div class="line">    &#125; else if (curr.left == null) &#123;</div><div class="line">        // case 3: no left child</div><div class="line">        if (curr == root) &#123;</div><div class="line">            root = curr.right;</div><div class="line">        &#125; else if (isLeftChild) &#123;</div><div class="line">            parent.left = curr.right;</div><div class="line">        &#125; else &#123;</div><div class="line">            parent.right = curr.right;</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        // case 4: with two children</div><div class="line">        // here we use successor but using predecessor is also an option</div><div class="line">        Node successor = getSuccessor(curr);</div><div class="line"></div><div class="line">        if(curr == root) &#123;</div><div class="line">            root = successor;</div><div class="line">        &#125; else if(isLeftChild) &#123;</div><div class="line">            parent.left = successor;</div><div class="line">        &#125; else &#123;</div><div class="line">            parent.right = successor;</div><div class="line">        &#125;</div><div class="line">        successor.left = curr.left;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>找到下一个节点
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Helper method to find the successor of the toDelete node.</div><div class="line"> * This tries to find the smallest value of the right subtree</div><div class="line"> * of the toDelete node by going down to the left most node in the subtree</div><div class="line"> * @param toDelete node to delete</div><div class="line"> * @return the successor of the toDelete node</div><div class="line"> */</div><div class="line">private Node getSuccessor(Node toDelete) &#123;</div><div class="line">    Node successorParent = toDelete;</div><div class="line">    Node successor = toDelete;</div><div class="line">    // start the search from the root of the right subtree</div><div class="line">    Node curr = toDelete.right;</div><div class="line"></div><div class="line">    // move down to left as far as possible in the right subtree</div><div class="line">    // successor&apos;s left child must be null</div><div class="line">    while (curr != null) &#123;</div><div class="line">        successorParent = successor;</div><div class="line">        successor = curr;</div><div class="line">        curr = curr.left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*</div><div class="line">     * If successor is NOT the right child of the node to delete, then</div><div class="line">     * need to take care of two connections in the right subtree</div><div class="line">     */</div><div class="line">    if (successor != toDelete.right) &#123;</div><div class="line">        successorParent.left = successor.right;</div><div class="line">        successor.right = toDelete.right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return successor;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Traverse Binary Tree:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void traverse() &#123;</div><div class="line">    inOrderHelper(root);</div><div class="line">    System.out.println();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void inOrderHelper(Node toVisit) &#123;</div><div class="line">    if(toVisit != null) &#123;</div><div class="line">        inOrderHelper(toVisit.left);</div><div class="line">        System.out.print(toVisit);</div><div class="line">        inOrderHelper(toVisit.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
</ol>
<hr>
<p>Reference: @Terry Lee</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本文是总结Tree这种结构的常用知识点，暂时总结Binary Tree。&lt;/p&gt;
&lt;h2 id=&quot;binary-tree二叉树&quot;&gt;Binary Tree二叉树&lt;/h2&gt;
&lt;h
    
    </summary>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 388. Longest Absolute File Path</title>
    <link href="http://yoursite.com/2017/02/28/Leetcode-388-Longest-Absolute-File-Path/"/>
    <id>http://yoursite.com/2017/02/28/Leetcode-388-Longest-Absolute-File-Path/</id>
    <published>2017-02-28T18:52:41.000Z</published>
    <updated>2017-02-28T19:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Suppose we abstract our file system by a string in the following manner:</p>
<p>The string &quot;dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext&quot; represents:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dir</div><div class="line">    subdir1</div><div class="line">    subdir2</div><div class="line">        file.ext</div></pre></td></tr></table></figure></p>
<p>The directory dir contains an empty sub-directory subdir1 and a sub-directory subdir2 containing a file file.ext.</p>
<p>The string &quot;dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext&quot; represents:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dir</div><div class="line">    subdir1</div><div class="line">        file1.ext</div><div class="line">        subsubdir1</div><div class="line">    subdir2</div><div class="line">        subsubdir2</div><div class="line">            file2.ext</div></pre></td></tr></table></figure></p>
<p>The directory dir contains two sub-directories subdir1 and subdir2. subdir1 contains a file file1.ext and an empty second-level sub-directory subsubdir1. subdir2 contains a second-level sub-directory subsubdir2 containing a file file2.ext.</p>
<p>We are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is &quot;dir/subdir2/subsubdir2/file2.ext&quot;, and its length is 32 (not including the double quotes).</p>
<p>Given a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return 0.</p>
<p>Note:
The name of a file contains at least a . and an extension.
The name of a directory or sub-directory will not contain a ..
Time complexity required: O(n) where n is the size of the input string.</p>
<p>Notice that a/aa/aaa/file1.txt is not the longest file path, if there is another path aaaaaaaaaaaaaaaaaaaaa/sth.png.</p>
<h3 id="explaination">Explaination:</h3>
<p>计算每个文件是第几level，记下到现在为止的文件path长度，和当前最长的比较。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int lengthLongestPath(String input) &#123;</div><div class="line">        String[] paths = input.split(&quot;\n&quot;);</div><div class="line">        int[] stack = new int[paths.length + 1];</div><div class="line">        int maxLen = 0;</div><div class="line">        int curLen = 0;</div><div class="line">        for(String s: paths) &#123;</div><div class="line">            // get level of the s</div><div class="line">            int lev = s.lastIndexOf(&apos;\t&apos;)+1;</div><div class="line">            // get curLen</div><div class="line">            curLen= stack[lev+1] = stack[lev]+s.length()-lev+1;</div><div class="line">            // if find file, get the file path length</div><div class="line">            if (s.contains(&quot;.&quot;)) &#123;</div><div class="line">                maxLen = Math.max(maxLen, curLen-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return maxLen;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Suppose we abstract our file system by a string in the
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>云计算Project：Twitter大数据分析</title>
    <link href="http://yoursite.com/2017/02/27/%E4%BA%91%E8%AE%A1%E7%AE%97Project%EF%BC%9ATwitter%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/02/27/云计算Project：Twitter大数据分析/</id>
    <published>2017-02-28T01:37:26.000Z</published>
    <updated>2017-03-30T01:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文是Twitter Analytics on the Cloud项目的介绍及分析总结。小组作业当时做的匆忙，现在再思考下可以优化的地方很多。感谢队友@shuangshuang 和 @烟酱。</p>
<h2 id="项目介绍">项目介绍</h2>
<p>目标：</p>
<ul>
<li>在云上建立一个高性能又可靠的web服务。</li>
<li>设计，开发和部署并优化服务器以能够处理每秒上万次请求的高负载。</li>
<li>在一个1TB的数据集上完成ETL并载入到Mysql和HBase中。</li>
<li>设计MySQL和HBase并优化配置，提高性能。</li>
<li>探索基于云的web服务存在瓶颈的方法，并提高性能。</li>
</ul>
<h2 id="基本结构">基本结构：</h2>
<p>￼￼￼￼￼
<img src="http://i.imgur.com/qMn31B4.png" alt=""></p>
<h3 id="前端">前端：</h3>
<ul>
<li>通过HTTP GET请求访问web服务，不同的请求有不同的地址，后面有不同参数。</li>
<li>返回相应的响应时，必须要在持续若干个小时的测试中正常运行。</li>
<li>web服务不能拒绝请求，要能承受高负载。</li>
</ul>
<h3 id="后端">后端：</h3>
<ul>
<li>保存用来查询的数据文件</li>
<li>比较SQL(MySQL)和NoSQL(HBase)</li>
<li>比较不同数据集不同查询类型的表现，来决定如何实现后端。</li>
</ul>
<h3 id="数据集">数据集：</h3>
<p>Twitter数据集，大于1T，JSON格式存储。</p>
<h2 id="项目实战">项目实战</h2>
<h3 id="搭建前端">搭建前端：</h3>
<p>在搭建前端之前，需要慎重选择框架。对比主流web框架，参考<a href="https://www.techempower.com/benchmarks/" target="_blank" rel="external">Techempower</a>,我们最终选择用vertx和undertow进行开发。
具体可以参考一些比较好的配置指南：</p>
<p>Vertx:</p>
<p><a href="http://vertx.io/docs/" target="_blank" rel="external">vertx Document</a>
<a href="http://vertx.io/blog/my-first-vert-x-3-application/index.html" target="_blank" rel="external">My first Vert.x 3 Application</a></p>
<h4 id="前端优化">前端优化：</h4>
<ul>
<li>运用Cache，每次得到请求先check是否有缓存。当缓存满了的时候，就把最不常用的缓存踢出去。</li>
</ul>
<h3 id="etl">ETL:</h3>
<p>根据request设计好数据库的schema以后，要好好设计ETL。因为我们这里用EMR把twitter数据集载入到数据仓库中，每次需要10-20个小时，而EMR特别贵，所以最好不要重复劳动。最初，用小数据及来测试。</p>
<p>这一阶段我们要处理两类请求，从存储系统中获取数据，搭建好的web service 需要能够连接到两个不同的后端存储系统(MySQL 和 HBase)，前端需要通过端口 80 接收 HTTP GET 请求。</p>
<h4 id="操作过程">操作过程：</h4>
<p>这里主要要写一个Map和一个Reduce文件来处理数据。原始数据的格式是JSON，我们需要处理成需要的数据格式：</p>
<p>请求格式
userid+hashtag
<code>GET /q2?userid=uid&amp;hashtag=hashtag</code></p>
<p>响应格式 (如果Tweet存在)</p>
<ul>
<li>tweet 的 sentiment density</li>
<li>tweet 的发布时间</li>
<li>tweet id</li>
<li>审查修改过的的 tweet 内容，这里有很多可能出问题的地方，比如 emoji 表情、反斜杠、其他语言的字符等等</li>
</ul>
<p><code>TEAMID,TEAM_AWS_ACCOUNT_ID\n Sentiment_density1:Tweet_time1:Tweet_id1:Cencored_text1\n Sentiment_density2:Tweet_time2:Tweet_id2:Cencored_text2\n Sentiment_density3:Tweet_time3:Tweet_id3:Cencored_text3\n</code></p>
<p>响应格式 (如果Tweet不存在)
<code>TEAMID,TEAM_AWS_ACCOUNT_ID\n \n</code></p>
<p>map和reduce程序写完后，到EMR上面跑，要注意：</p>
<ul>
<li>现用小数据集测试。</li>
<li>注意各种小细节</li>
<li>关于EMR的操作，步骤之后有空总结下之前云计算的EMR project。</li>
</ul>
<h3 id="query-文本清理和分析">Query 文本清理和分析</h3>
<p>目标吞吐量： 10000 rps
不允许用现用的缓存设备，可以自己写缓存。
会查询某个用户用指定的 hashtag 发的 tweet，主要考察如何设计一个高效的后端来处理大量的请求。</p>
<h3 id="后端数据库">后端数据库</h3>
<p>ETL结束以后，我们需要导入数据库。在这个过程中，我们纠结于replication和sharding的选择。
Replication是指将完整的数据库存在每一台机器上，而Sharding是指分成几个部分分别存在每一台机器上。最终，选择了Sharding模式。</p>
<h4 id="数据库设计">数据库设计：</h4>
<p>按照我们刚刚说过的请求格式和响应格式，我们对MySQL和HBase进行设计：</p>
<h5 id="mysql">MySQL：</h5>
<h6 id="设计模式">设计模式：</h6>
<p>（这里参照了Yuki组的赢家设计模式，非常简单粗暴）
原来的schema是每一列都很清晰，但是这样row相比后面的设计模式多了很多，导致数据库的读取速度慢了很多。
所以新的schema就选择只存取id，读取所有的tweets以后，让前端进行相应的解析。</p>
<p><img src="http://i.imgur.com/Zmk6QUp.png" alt=""></p>
<h6 id="优化方法">优化方法：</h6>
<ul>
<li>建立索引Index</li>
<li>mysql有两个存储引擎，MyISAM和InnoDB，MyISAM适用于大量查寻，对写并不是非常友好，updata时会整表锁住。而InnoDB使用的是“行锁&quot;。
设置Key_buffer_size以及Query_cache_size到更高的值，可以增加缓冲容量。</li>
<li>设置所有column为not null，这样mysql不用预留空间检查null值。会提高读取速度。</li>
</ul>
<h5 id="hbase">HBase:</h5>
<p>鉴于HBase是key-value存储模式，我们在这里只要考虑key里怎么放，剩下的数据全都放到column family里面就可以了。
我们采用tweet_id + user_id + hashtag作为rowkey。</p>
<h6 id="优化方法摘自小土刀博客">优化方法（摘自小土刀博客）：</h6>
<p>1.分配合适的内存给 RegionServer 服务:
例如在 HBase 的 conf 目录下的 hbase-env.sh 的最后添加 export HBASE_REGIONSERVER_OPTS=”-Xmx16000m $HBASE_REGIONSERVER_OPTS”
其中 16000m 为分配给 RegionServer 的内存大小。</p>
<p>2.RegionServer 的请求处理 IO 线程数:
较少的 IO 线程适用于处理单次请求内存消耗较高的 Big Put 场景 (大容量单次 Put 或设置了较大 cache 的 Scan，均属于 Big Put) 或 ReigonServer 的内存比较紧张的场景。
较多的 IO 线程，适用于单次请求内存消耗低，TPS 要求 (每秒事务处理量 (TransactionPerSecond)) 非常高的场景。设置该值的时候，以监控内存为主要参考。
在 hbase-site.xml 配置文件中配置项为 hbase.regionserver.handler.count 200</p>
<p>3.调整 Block Cache:
hfile.block.cache.size：RS的block cache的内存大小限制，默认值0.25，在偏向读的业务中，可以适当调大该值，具体配置时需试hbase集群服务的业务特征，结合memstore的内存占比进行综合考虑。</p>
<h2 id="总结">总结：</h2>
<p>Team Project过去挺久了，很多细节记不得了，清洗数据的部分有很多细节需要注意，并不像这里写的一两句话就讲清楚了。还有数据库优化是一条不归路，盲目优化会导致反向优化，其实根据后来赢家的报告来看，优化并起不到多少作用，好的schema设计才是提高performance的最根本。
云计算这门课的精华，都在这个Project，覆盖了大部分这门课的所实验的知识。从load balance到sharding和replication，再到SQL和NoSQL数据库，再到EMR的应用，就差并行并发那部分的内容了。
学习是不难的，有指导来做project也不难，真正到了实际应用中，没有人知道正确答案，靠的都是思考和经验了。</p>
<p><strong>References：</strong></p>
<ol>
<li><a href="http://wdxtub.com/" target="_blank" rel="external">小土刀云计算语料分析&amp;反思课</a></li>
<li>小Yuki的Report</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本文是Twitter Analytics on the Cloud项目的介绍及分析总结。小组作业当时做的匆忙，现在再思考下可以优化的地方很多。感谢队友@shuangshuan
    
    </summary>
    
      <category term="Cloud Computing" scheme="http://yoursite.com/categories/Cloud-Computing/"/>
    
    
      <category term="Cloud Computing" scheme="http://yoursite.com/tags/Cloud-Computing/"/>
    
      <category term="Big Data" scheme="http://yoursite.com/tags/Big-Data/"/>
    
      <category term="Twitter" scheme="http://yoursite.com/tags/Twitter/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="HBase" scheme="http://yoursite.com/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 325. Maximum Size Subarray Sum Equals k</title>
    <link href="http://yoursite.com/2017/02/25/Leetcode-325-Maximum-Size-Subarray-Sum-Equals-k/"/>
    <id>http://yoursite.com/2017/02/25/Leetcode-325-Maximum-Size-Subarray-Sum-Equals-k/</id>
    <published>2017-02-25T20:27:57.000Z</published>
    <updated>2017-02-25T20:35:47.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.</p>
<p>Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.</p>
<p>Example 1:
Given nums = [1, -1, 5, -2, 3], k = 3,
return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)</p>
<p>Example 2:
Given nums = [-2, -1, 2, 1], k = 1,
return 2. (because the subarray [-1, 2] sums to 1 and is the longest)</p>
<p>Follow Up:
Can you do it in O(n) time?</p>
<h3 id="explanation">Explanation:</h3>
<p>思路就是，算从第一个数到每一个数的sum，存在map里，如果之后有key和sum-k相等，就表示那段数字的和为k。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int maxSubArrayLen(int[] nums, int k) &#123;</div><div class="line">        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">        int sum = 0;</div><div class="line">        int result = 0;</div><div class="line"></div><div class="line">        for (int i=0; i&lt;nums.length; i++) &#123;</div><div class="line">            sum += nums[i];</div><div class="line">            if (sum == k) &#123;</div><div class="line">                result = i+1;</div><div class="line"></div><div class="line">            &#125; else if (map.containsKey(sum - k)) &#123;</div><div class="line">                result =Math.max(max, i - map.get(sum));</div><div class="line">            &#125;</div><div class="line">            if (!map.containsKey(sum)) &#123;</div><div class="line">                map.put(sum, i);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(map.toString());</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Given an array nums and a target value k, find the max
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Facebook" scheme="http://yoursite.com/tags/Facebook/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 277. Find the Celebrity</title>
    <link href="http://yoursite.com/2017/02/24/Leetcode-277-Find-the-Celebrity/"/>
    <id>http://yoursite.com/2017/02/24/Leetcode-277-Find-the-Celebrity/</id>
    <published>2017-02-25T03:07:05.000Z</published>
    <updated>2017-02-25T03:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Suppose you are at a party with n people (labeled from 0 to n - 1) and among them, there may exist one celebrity. The definition of a celebrity is that all the other n - 1 people know him/her but he/she does not know any of them.</p>
<p>Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: &quot;Hi, A. Do you know B?&quot; to get information of whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).</p>
<p>You are given a helper function bool knows(a, b) which tells you whether A knows B. Implement a function int findCelebrity(n), your function should minimize the number of calls to knows.</p>
<p>Note: There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return -1.</p>
<h3 id="explanation">Explanation:</h3>
<p>两次遍历。第一轮假设候选人，如果候选人认识i，就换到i。第二轮是验证候选人是否存在。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* The knows API is defined in the parent class Relation.</div><div class="line">      boolean knows(int a, int b); */</div><div class="line"></div><div class="line">public class Solution extends Relation &#123;</div><div class="line">    public int findCelebrity(int n) &#123;</div><div class="line">        int candidate = 0;</div><div class="line">        for (int i=1; i&lt;n; i++) &#123;</div><div class="line">            if (knows(candidate,i)) candidate =i;</div><div class="line">        &#125;</div><div class="line">        for (int i=0; i&lt;n; i++) &#123;</div><div class="line">            if (i != candidate &amp;&amp; (knows(candidate,i) || (!knows(i,candidate)))) return -1;</div><div class="line">        &#125;</div><div class="line">        return candidate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Suppose you are at a party with n people (labeled from
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Facebook" scheme="http://yoursite.com/tags/Facebook/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>云计算Project：基于多个后端的社交网络时间线的实现</title>
    <link href="http://yoursite.com/2017/02/23/%E4%BA%91%E8%AE%A1%E7%AE%97Project%EF%BC%9A%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%B8%AA%E5%90%8E%E7%AB%AF%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E7%BA%BF%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/02/23/云计算Project：基于多个后端的社交网络时间线的实现/</id>
    <published>2017-02-23T20:12:14.000Z</published>
    <updated>2017-03-30T01:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本文是关于CMU15619Cloud Computing项目:<code>Social Networking Timeline with Heterogeneous Backends</code>的介绍以及总结反思。</p>
<p>项目主要目标：</p>
<ul>
<li>探索AWS的DBaas服务的申请、配置和管理</li>
<li>比较MySQL, HBase和MongoDB在使用Java API载入数据时的异同。</li>
<li>利用多个后端为同一个复杂的web应用提供数据。</li>
<li>比较不同数据库在实际应用中的特点。</li>
</ul>
<h2 id="背景介绍">背景介绍</h2>
<h3 id="dbaasdatabase-as-a-services">DBaas(Database-as-a-Services)：</h3>
<p>在AWS中，我们可以用其中的RDS的MySQL服务。</p>
<h3 id="mongodb">MongoDB：</h3>
<p>MongoDB是NoSQL数据库的典型，基于文档存储（Document-oriented），不支持事务和表连接，所以查询的编写、理解和优化比较容易。之后会写一篇关于NoSQL的总结（一个坑）。
和HBase的key-value存储模式不同，MongoDB基于文档存储模式的优势在于可以支持复杂的数据类型，并且也支持Index。
MongoDB使用BSON类型存储数据，据说就是把文本直接转成二进制表示，BSON用于以下三种目的：</p>
<ul>
<li>节省空间：BSON即使在最坏的情况下，也比普通的JSON占用空间少。</li>
<li>移动性</li>
<li>Performance：BSON对内容的编码和解码的速度快于很多编程语言。</li>
</ul>
<h3 id="数据结构-图">数据结构： 图</h3>
<h4 id="1邻接矩阵adjacent-matrix空间复杂度为on2">1.邻接矩阵Adjacent Matrix：空间复杂度为O（n^2)</h4>
<p>比如这个：
<img src="http://i.imgur.com/Qyrp0rL.png" alt="">
<img src="http://i.imgur.com/x2yyDEI.png" alt=""></p>
<h4 id="2邻接表adjacent-list-空间较少">2.邻接表Adjacent List 空间较少：</h4>
<p><img src="http://i.imgur.com/ofeLFxn.png" alt=""></p>
<h3 id="社交网络应用基础">社交网络应用基础：</h3>
<p>如今像Facebook, Twitter和Instagram都需要复杂和涉及良好的后端来处理多种类型的用户数据，提供持续的高性能低延迟的服务。同时还要通过实时数据分析为公司和广告商提供有价值的信息。</p>
<ul>
<li>不同的数据类型（Video，Text，Link，etc.)需要存在不同的数据库中）</li>
<li>一个简单的展示社交网络页面的HTTP请求会触发后端一系列的请求和数据库动作。可以参见下图：
<img src="http://i.imgur.com/r3gf00x.png" alt=""></li>
</ul>
<p>社交网络中的数据通常包括以下三种：</p>
<ul>
<li>用户信息：
<ul>
<li>身份验证系统</li>
<li>用户信息/简介</li>
<li>活动日志</li>
<li>社交关系图（在下面会进步介绍）</li>
</ul>
</li>
<li>用户活动：
<ul>
<li>用户产生的多媒体数据</li>
</ul>
</li>
<li>大数据分析系统：
<ul>
<li>搜索系统</li>
<li>推荐系统</li>
<li>用户行为分析（基于云数据仓库的OLAP，有机会单独更新这个部分）</li>
</ul>
</li>
</ul>
<p><img src="http://i.imgur.com/Qwd8z0q.png" alt=""></p>
<p>社交网络的前端已经做好，我们需要把四中不同的数据集存入三种数据库（MySQL, HBase, MongoDB),你完成的后端要能同时响应四中不同的request。</p>
<h2 id="项目操作">项目操作</h2>
<h3 id="通过rds的mysql实现基本登录">通过RDS的MySQL实现基本登录：</h3>
<p>在AWS RDS中配置MySQL并导入users.csv, userinfo.csv数据集。
连接AWS RDS中MySQL时注意：
远程登录需要导入数据时要加入 --local-infile得到授权。
<code>mysql -u username -p password -h hostname --port=portname --local-infile database</code></p>
<p>数据集格式:</p>
<ul>
<li>users.csv [UserID, Password]</li>
<li>userinfo.csv [UserID, Name, Profile Image URL]</li>
</ul>
<p>导入MySQL语句:
<code>LOAD DATA LOCAL INFILE 'filename' INTO TABLE tablename CHARACTER SET utf8mb4 FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n';</code></p>
<p>请求格式:
<code>GET /task1?id=[UserID]&amp;pwd=[Password]</code></p>
<p>响应格式:
<code>returnRes({&quot;name&quot;:&quot;my_name&quot;, &quot;profile&quot;:&quot;profile_image_url&quot;})</code></p>
<p>所以，之后在Java文件中连接数据库，再创建JSON相应的代码即可。
测试：</p>
<ol>
<li>启动前后端服务器，访问<code>http://&lt;your_front_end_dns&gt;:3000</code></li>
<li>输入正确或错误的账号密码登录测试</li>
</ol>
<p><img src="http://i.imgur.com/rv5LnYr.png" alt=""></p>
<h3 id="利用hbase存储社交图谱">利用HBase存储社交图谱：</h3>
<p>用HBase来保存用户间的follow关系，可以选择用之前在图中介绍的邻接矩阵和邻接表中选择一种，来保存数据。
原始数据格式：
<code>&lt;followee, follower&gt;</code></p>
<p>请求格式：
<code>GET /task2?id=[UserID]</code></p>
<p>响应格式:
<code>{&quot;followers&quot;:[{&quot;name&quot;:&quot;follower_name_1&quot;, &quot;profile&quot;:&quot;profile_image_url_1&quot;}, {&quot;name&quot;:&quot;follower_name_2&quot;, &quot;profile&quot;:&quot;profile_image_url_2&quot;}, ...]}</code></p>
<h4 id="思路">思路：</h4>
<ul>
<li>在HBase中存成followee： follower1， follower2， ...的格式</li>
<li>设计好HBase之后导入数据</li>
<li>启动前后端服务器后访问http://&lt;your_front_end_dns&gt;:3000</li>
<li>输入userid进行测试</li>
</ul>
<h3 id="用mongdb搭建主页">用MongDB搭建主页：</h3>
<p>如之前介绍的那样，对于各种形式的帖子，用MongoDB存储会是一个很好的选择。这里会查询一些特定的field，所以可以建立索引来加速查询。</p>
<p>帖子数据的形式：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;pid&quot;:xxx,                                      // PostID</div><div class="line">    &quot;uid&quot;:xxx,                                      // UserID of poster</div><div class="line">    &quot;name&quot;:&quot;xxx&quot;,                                   // User name of poster</div><div class="line">    &quot;profile&quot;:&quot;xxx&quot;,                                // Poster profile image URL</div><div class="line">    &quot;timestamp&quot;:&quot;YYYY-MM-DD HH:MM:SS&quot;,              // When post is posted</div><div class="line">    &quot;image&quot;:&quot;xxx&quot;,                                  // Post image</div><div class="line">    &quot;content&quot;:&quot;xxx&quot;,                                // Post text content</div><div class="line">    &quot;comments&quot;:[                                    // comments json array</div><div class="line">        &#123;</div><div class="line">            &quot;uid&quot;:xxx,                              // UserID of commenter</div><div class="line">            &quot;name&quot;:&quot;xxx&quot;,                           // User name of commenter</div><div class="line">            &quot;profile&quot;:&quot;xxx&quot;,                        // Commenter profile image URL</div><div class="line">            &quot;timestamp&quot;:&quot;YYYY-MM-DD HH:MM:SS&quot;,      // When comment is made</div><div class="line">            &quot;content&quot;:&quot;xxx&quot;                         // Comment text content</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            &quot;uid&quot;:xxx,</div><div class="line">            .......</div><div class="line">        &#125;,</div><div class="line">        ......</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于MongoDB建立索引，可以参考<a href="https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/" target="_blank" rel="external">这里</a></p>
<p>请求格式：
<code>GET /task3?id=[UserID]</code></p>
<p>响应格式：
<code>{&quot;posts&quot;:[{post1_json}, {post2_json}, ...]}</code></p>
<p>测试方法：</p>
<ul>
<li>启动前后端服务器，输入userid</li>
</ul>
<p><img src="http://i.imgur.com/8p2pep3.png" alt=""></p>
<h3 id="最终整合">最终整合</h3>
<p>之前三个部分分别实现了三个数据库的存储，现在我们希望实现输入一个userid就可以返回用户信息（MySQL),用户粉丝列表（HBase）以及用户关注的人最新三十条帖子（MongoDB）。</p>
<p>排序规则：</p>
<ul>
<li>对followers进行排序:
<ul>
<li>姓名升序排列</li>
<li>Profile image URL升序排列</li>
</ul>
</li>
<li>对最新30篇post排序：
<ul>
<li>按照timestamp升序排序</li>
<li>按照PostID升序排序</li>
</ul>
</li>
</ul>
<p>请求格式：
<code>GET /task4?id=[UserID]</code></p>
<p>响应格式:
<code>{&quot;name&quot;:&quot;my_name&quot;, &quot;profile&quot;:&quot;my_profile_image_url&quot;, &quot;followers&quot;:[{&quot;name&quot;:&quot;follower_name_1&quot;, &quot;profile&quot;:&quot;profile_image_url_1&quot;}, {&quot;name&quot;:&quot;follower_name_2&quot;, &quot;profile&quot;:&quot;profile_image_url_2&quot;}, ...], &quot;posts&quot;:[{post1_json, post2_json, ...}]}</code></p>
<p><img src="http://i.imgur.com/EpRB33c.png" alt=""></p>
<h3 id="简单推荐的实现">简单推荐的实现</h3>
<p>推荐系统的内容太多了，可以看看<a href="http://www.shuang0420.com/categories/Recommender-System/" target="_blank" rel="external">shaung的博客</a>（一个广告）
这次我们用协同过滤算法实现一个简单的推荐系统，利用“朋友的朋友”来推荐好友。</p>
<h4 id="graph-distance">Graph Distance：</h4>
<p>比如：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A follows &#123;B, C, D&#125;</div><div class="line">Followee B follows &#123;C, E, A&#125;</div><div class="line">followee C follows &#123;F, G&#125;</div><div class="line">followee D follows &#123;G, H&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://i.imgur.com/83cuJ8G.png" alt="">
我们可以得到与A的距离关系为：
<code>{A:1, C:1, E:1, F:1, G:2, H:1}</code>
其中去掉A本身，去掉A已经关注的C，剩下的就是
<code>{G: 2, E: 1, F: 1, H: 1}</code></p>
<h4 id="思路">思路：</h4>
<ul>
<li>找到userid的关注的人的集合</li>
<li>将关注的人的集合中的每个人关注的人添加到信集合中，第一次出现则为1，之后的为原来的加1</li>
<li>用优先队列存储，注意第一个关注的人集合中的元素都不应该在此队列中</li>
<li>返回前十个的name和url，并返回</li>
</ul>
<p>请求格式：
<code>http://backend-public-dns:8080/MiniSite/task5?id=&lt;user_id&gt;</code></p>
<p>响应格式：
<code>returnRes({&quot;recommendation&quot;:[{name:&lt;name1&gt;, profile:&lt;profile1&gt;},{name:&lt;name2&gt;, profile:&lt;profile2&gt;},...,{name:&lt;name10&gt;, profile:&lt;profile10&gt;]})</code></p>
<p>Done!</p>
<p><strong>Reference：</strong><br>
CMU15619课件：<code>Social Networking Timeline with Heterogeneous Backends</code>
小土刀博客：<code>http://wdxtub.com/vault/cc-17.html</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本文是关于CMU15619Cloud Computing项目:&lt;code&gt;Social Networking Timeline with Heterogeneous Back
    
    </summary>
    
      <category term="Cloud Computing" scheme="http://yoursite.com/categories/Cloud-Computing/"/>
    
    
      <category term="Cloud Computing" scheme="http://yoursite.com/tags/Cloud-Computing/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="HBase" scheme="http://yoursite.com/tags/HBase/"/>
    
      <category term="Social Network" scheme="http://yoursite.com/tags/Social-Network/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 252. Meeting Rooms I</title>
    <link href="http://yoursite.com/2017/02/20/Leetcode-252-Meeting-Rooms-I/"/>
    <id>http://yoursite.com/2017/02/20/Leetcode-252-Meeting-Rooms-I/</id>
    <published>2017-02-21T01:24:16.000Z</published>
    <updated>2017-02-22T21:08:10.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &lt; ei), determine if a person could attend all meetings.</p>
<p>For example,
Given [[0, 30],[5, 10],[15, 20]],
return false.</p>
<h3 id="explanation">Explanation:</h3>
<p>先按照start time排序，只要每一个end time都比下一个start time小，即可行。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">    public boolean canAttendMeetings(Interval[] intervals) &#123;</div><div class="line">       Arrays.sort(intervals, new Comparator&lt;Interval&gt;()&#123;</div><div class="line">            public int compare(Interval i1, Interval i2) &#123;</div><div class="line">                return i1.start - i2.start;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        for(int i=0; i&lt;intervals.length-1; i++) &#123;</div><div class="line">            if (intervals[i].end &gt; intervals[i+1].start) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Given an array of meeting time intervals consisting of
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Facebook" scheme="http://yoursite.com/tags/Facebook/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 253. Meeting Rooms II</title>
    <link href="http://yoursite.com/2017/02/20/Leetcode-253-Meeting-Rooms/"/>
    <id>http://yoursite.com/2017/02/20/Leetcode-253-Meeting-Rooms/</id>
    <published>2017-02-21T01:21:53.000Z</published>
    <updated>2017-02-21T03:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>本题的简单版本是<a href="http://starllap.space/2017/02/20/Leetcode-252-Meeting-Rooms-I/" target="_blank" rel="external">Meeting Rooms I</a></p>
<h3 id="question">Question:</h3>
<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &lt; ei), find the minimum number of conference rooms required.</p>
<p>For example,
Given [[0, 30],[5, 10],[15, 20]],
return 2.</p>
<h3 id="explanation">Explanation:</h3>
<p>先对start sort，用heap存end，相当于按照end也sort一遍，之后与最快结束的meeting对比，如果start time比最快结束的要小，则另开一间房间。
先开始我用了两次循环，TLE了。用Heap是一个不错的选择，其实也可以用指针。直接贴一个<a href="https://discuss.leetcode.com/topic/20958/ac-java-solution-using-min-heap" target="_blank" rel="external">标准答案</a>。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">public int minMeetingRooms(Interval[] intervals) &#123;</div><div class="line">    if (intervals == null || intervals.length == 0)</div><div class="line">        return 0;</div><div class="line"></div><div class="line">    // Sort the intervals by start time</div><div class="line">    Arrays.sort(intervals, new Comparator&lt;Interval&gt;() &#123;</div><div class="line">        public int compare(Interval a, Interval b) &#123; return a.start - b.start; &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // Use a min heap to track the minimum end time of merged intervals</div><div class="line">    PriorityQueue&lt;Interval&gt; heap = new PriorityQueue&lt;Interval&gt;(intervals.length, new Comparator&lt;Interval&gt;() &#123;</div><div class="line">        public int compare(Interval a, Interval b) &#123; return a.end - b.end; &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // start with the first meeting, put it to a meeting room</div><div class="line">    heap.offer(intervals[0]);</div><div class="line"></div><div class="line">    for (int i = 1; i &lt; intervals.length; i++) &#123;</div><div class="line">        // get the meeting room that finishes earliest</div><div class="line">        Interval interval = heap.poll();</div><div class="line"></div><div class="line">        if (intervals[i].start &gt;= interval.end) &#123;</div><div class="line">            // if the current meeting starts right after</div><div class="line">            // there&apos;s no need for a new room, merge the interval</div><div class="line">            interval.end = intervals[i].end;</div><div class="line">        &#125; else &#123;</div><div class="line">            // otherwise, this meeting needs a new room</div><div class="line">            heap.offer(intervals[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // don&apos;t forget to put the meeting room back</div><div class="line">        heap.offer(interval);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return heap.size();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本题的简单版本是&lt;a href=&quot;http://starllap.space/2017/02/20/Leetcode-252-Meeting-Rooms-I/&quot; target
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 294. Flip GameII</title>
    <link href="http://yoursite.com/2017/02/20/Leetcode-294-Flip-GameII/"/>
    <id>http://yoursite.com/2017/02/20/Leetcode-294-Flip-GameII/</id>
    <published>2017-02-20T18:26:34.000Z</published>
    <updated>2017-02-20T20:07:14.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive &quot;++&quot; into &quot;--&quot;. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>
<p>Write a function to determine if the starting player can guarantee a win.</p>
<p>For example, given s = &quot;++++&quot;, return true. The starting player can guarantee a win by flipping the middle &quot;++&quot; to become &quot;+--+&quot;.</p>
<p>Follow up:
Derive your algorithm's runtime complexity.</p>
<h4 id="explanation">Explanation:</h4>
<p>本来想找规律，后来想想太天真了。用backtracking解，罗列所有的情况，如果下一局对手会输，就表示可以。现在我的算法是o(N!!)
discuss中有一个牛逼的game theory博弈论算法，看不懂。有机会可以研究一下，会将time complexity降低到O(N^2)</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public boolean canWin(String s) &#123;</div><div class="line">        if (s == null || s.length() &lt;2) return false;</div><div class="line">        char[] charString = s.toCharArray();</div><div class="line">        for (int i=0; i&lt;s.length()-1; i++) &#123;</div><div class="line"></div><div class="line">            if (charString[i] == &apos;+&apos; &amp;&amp; charString[i+1] == &apos;+&apos;) &#123;</div><div class="line">                charString[i] = &apos;-&apos;;</div><div class="line">                charString[i+1] = &apos;-&apos;;</div><div class="line">                if (!canWin(String.valueOf(charString))) &#123;</div><div class="line">                    return true;</div><div class="line">                &#125;</div><div class="line">                charString[i] = &apos;+&apos;; charString[i+1] = &apos;+&apos;;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question:&lt;/h4&gt;
&lt;p&gt;You are playing the following Flip Game with your frie
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 380. Insert Delete GetRandom O(1)</title>
    <link href="http://yoursite.com/2017/02/19/Leetcode-380-Insert-Delete-GetRandom-O-1/"/>
    <id>http://yoursite.com/2017/02/19/Leetcode-380-Insert-Delete-GetRandom-O-1/</id>
    <published>2017-02-19T20:57:07.000Z</published>
    <updated>2017-02-19T21:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Design a data structure that supports all following operations in average O(1) time.</p>
<p>insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// Init an empty set.</div><div class="line">RandomizedSet randomSet = new RandomizedSet();</div><div class="line"></div><div class="line">// Inserts 1 to the set. Returns true as 1 was inserted successfully.</div><div class="line">randomSet.insert(1);</div><div class="line"></div><div class="line">// Returns false as 2 does not exist in the set.</div><div class="line">randomSet.remove(2);</div><div class="line"></div><div class="line">// Inserts 2 to the set, returns true. Set now contains [1,2].</div><div class="line">randomSet.insert(2);</div><div class="line"></div><div class="line">// getRandom should return either 1 or 2 randomly.</div><div class="line">randomSet.getRandom();</div><div class="line"></div><div class="line">// Removes 1 from the set, returns true. Set now contains [2].</div><div class="line">randomSet.remove(1);</div><div class="line"></div><div class="line">// 2 was already in the set, so return false.</div><div class="line">randomSet.insert(2);</div><div class="line"></div><div class="line">// Since 2 is the only number in the set, getRandom always return 2.</div><div class="line">randomSet.getRandom();</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation:</h3>
<p>很神奇的一道题，因为需要每个操作的复杂度平均为O(1),最初我只用了一个Arraylist存也AC了，但是时间很久，因为remove的时候不是O(1).换了Hashmap存index，快一些。但是要注意，remove那边不能直接count--，需要和最后一个值调换，这样保证其他的index不变，只减少最后一个。A little tricky
总而言之，算法设计还是蛮有趣的，好好想想。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public class RandomizedSet &#123;</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    int count;</div><div class="line">    public RandomizedSet() &#123;</div><div class="line">        count = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</div><div class="line">    public boolean insert(int val) &#123;</div><div class="line">        if(map.containsKey(val)) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        map.put(val,count);</div><div class="line">        list.add(val);</div><div class="line">        count=map.size();</div><div class="line">        // System.out.println(list);</div><div class="line">        return true;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Removes a value from the set. Returns true if the set contained the specified element. */</div><div class="line">    public boolean remove(int val) &#123;</div><div class="line">        if (map.containsKey(val)) &#123;</div><div class="line">            int index = map.get(val);</div><div class="line">            // change the index with the last one if it is not the last one;</div><div class="line">            if (index &lt; list.size()-1) &#123;</div><div class="line">                int lastone = list.get(list.size()-1);</div><div class="line">                list.set(index, lastone);</div><div class="line">                map.put(lastone,index);</div><div class="line">            &#125;</div><div class="line">            map.remove(val);</div><div class="line">            list.remove(list.size()-1);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return false;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Get a random element from the set. */</div><div class="line">    public int getRandom() &#123;</div><div class="line">        int r =(int)(Math.random()*list.size());</div><div class="line">        // System.out.println(r);</div><div class="line">        return list.get(r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Your RandomizedSet object will be instantiated and called as such:</div><div class="line"> * RandomizedSet obj = new RandomizedSet();</div><div class="line"> * boolean param_1 = obj.insert(val);</div><div class="line"> * boolean param_2 = obj.remove(val);</div><div class="line"> * int param_3 = obj.getRandom();</div><div class="line"> */</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Design a data structure that supports all following op
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Design" scheme="http://yoursite.com/tags/Design/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 331. Verify Preorder Serialization of a Binary Tree</title>
    <link href="http://yoursite.com/2017/02/19/Leetcode-331-Verify-Preorder-Serialization-of-a-Binary-Tree/"/>
    <id>http://yoursite.com/2017/02/19/Leetcode-331-Verify-Preorder-Serialization-of-a-Binary-Tree/</id>
    <published>2017-02-19T19:04:07.000Z</published>
    <updated>2017-02-19T19:11:25.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">     _9_</div><div class="line">    /   \</div><div class="line">   3     2</div><div class="line">  / \   / \</div><div class="line"> 4   1  #  6</div><div class="line">/ \ / \   / \</div><div class="line"># # # #   # #</div></pre></td></tr></table></figure></p>
<p>For example, the above binary tree can be serialized to the string &quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;, where # represents a null node.</p>
<p>Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.</p>
<p>Each comma separated value in the string must be either an integer or a character '#' representing null pointer.</p>
<p>You may assume that the input format is always valid, for example it could never contain two consecutive commas such as &quot;1,,3&quot;.</p>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</div></pre></td></tr></table></figure></p>
<p>Return true</p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;1,#&quot;</div></pre></td></tr></table></figure></p>
<p>Return false</p>
<p>Example 3:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;9,#,#,1&quot;</div></pre></td></tr></table></figure></p>
<p>Return false</p>
<h3 id="explanation">Explanation:</h3>
<p>该怎么说呢，就是想破脑袋才想到stack做，再然后调了半天bug。如果遇到#，去检查是不是stack里面有一个#和一个阿拉伯数字，如果是的话，全部替换成一个“#”，表示一个子节点结束。最后判断是不是stack里只有一个“#”表示的根节点。</p>
<h3 id="code">Code:</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public boolean isValidSerialization(String preorder) &#123;</div><div class="line">        Stack&lt;String&gt; stack = new Stack&lt;&gt;();</div><div class="line">        String[] nodes = preorder.split(&quot;,&quot;);</div><div class="line">        for(String s: nodes) &#123;</div><div class="line">            while (!stack.isEmpty() &amp;&amp; stack.peek().equals(&quot;#&quot;)) &#123;</div><div class="line">                if (s.equals(&quot;#&quot;)) &#123;</div><div class="line">                    stack.pop();</div><div class="line">                    if (!stack.empty() &amp;&amp; !stack.peek().equals(&quot;#&quot;)) &#123;</div><div class="line">                        stack.pop();</div><div class="line">                    &#125;else &#123;</div><div class="line">                        stack.push(&quot;#&quot;);</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            stack.push(s);</div><div class="line">        &#125;</div><div class="line">        return stack.size() == 1 &amp;&amp; stack.peek().equals(&quot;#&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;One way to serialize a binary tree is to use pre-order
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 289. Game of Life</title>
    <link href="http://yoursite.com/2017/02/19/Leetcode-289-Game-of-Life/"/>
    <id>http://yoursite.com/2017/02/19/Leetcode-289-Game-of-Life/</id>
    <published>2017-02-19T17:33:41.000Z</published>
    <updated>2017-02-19T18:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>According to the Wikipedia's article: &quot;The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&quot;</p>
<p>Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p>
<p>Any live cell with fewer than two live neighbors dies, as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population..
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
Write a function to compute the next state (after one update) of the board given its current state.</p>
<p>Follow up:
Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</p>
<h4 id="explanation">Explanation:</h4>
<p>依次遍历matrix，判断周围八个方向总和，如果之后是live，就设置为3，否则设置为2。最后再遍历一次，改成0或者1。
感觉这道题的考点是in place，其他的比较简单，遍历没有讨巧的方法。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public void gameOfLife(int[][] board) &#123;</div><div class="line">        if (board == null || board.length == 0) return;</div><div class="line">        int m = board.length; int n = board[0].length;</div><div class="line">        for (int i=0; i&lt;board.length; ++i) &#123;</div><div class="line">            for (int j = 0; j &lt; board[0].length; ++j) &#123;</div><div class="line">                int sum = sumHelper(board, i, j, m, n);</div><div class="line">                if(board[i][j]==0 &amp;&amp; sum==3) board[i][j]=3;</div><div class="line">                if(board[i][j]==1 &amp;&amp; (sum&lt;2 || sum&gt;3)) board[i][j]=2;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (int i=0; i&lt;board.length; i++) &#123;</div><div class="line">            for (int j = 0; j &lt; board[0].length; j++) &#123;</div><div class="line">                board[i][j]%=2;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int sumHelper(int[][] board, int i, int j, int m, int n) &#123;</div><div class="line">        int sum = 0;</div><div class="line">        for (int x = Math.max(i-1, 0); x&lt;=Math.min(i+1, m-1); ++x) &#123;</div><div class="line">            for (int y = Math.max(j-1,0); y&lt;=Math.min(j+1,n-1); ++y) &#123;</div><div class="line">                if (board[x][y] == 2 || board[x][y] == 1) &#123;</div><div class="line">                    sum += 1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sum -= board[i][j];</div><div class="line">        return sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question:&lt;/h4&gt;
&lt;p&gt;According to the Wikipedia&#39;s article: &amp;quot;The Game o
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Matrix" scheme="http://yoursite.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 298. Binary Tree Longest Consecutive Sequence</title>
    <link href="http://yoursite.com/2017/02/18/LeetCode-298-Binary-Tree-Longest-Consecutive-Sequence/"/>
    <id>http://yoursite.com/2017/02/18/LeetCode-298-Binary-Tree-Longest-Consecutive-Sequence/</id>
    <published>2017-02-19T01:42:10.000Z</published>
    <updated>2017-02-19T01:45:13.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question:</h4>
<p>Given a binary tree, find the length of the longest consecutive sequence path.</p>
<p>The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">For example,</div><div class="line">   1</div><div class="line">    \</div><div class="line">     3</div><div class="line">    / \</div><div class="line">   2   4</div><div class="line">        \</div><div class="line">         5</div><div class="line">Longest consecutive sequence path is 3-4-5, so return 3.</div><div class="line">   2</div><div class="line">    \</div><div class="line">     3</div><div class="line">    /</div><div class="line">   2</div><div class="line">  /</div><div class="line"> 1</div><div class="line">Longest consecutive sequence path is 2-3,not3-2-1, so return 2.</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation:</h4>
<p>递归。想清楚base case和递归的模式即可。左右值，以及当前值，不要混淆。</p>
<h4 id="code">Code:</h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int longestConsecutive(TreeNode root) &#123;</div><div class="line">        return (root==null)?0:Math.max(Helper(root.left,1,root.val), Helper(root.right, 1, root.val));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public int Helper(TreeNode root, int count, int val) &#123;</div><div class="line">        if (root == null) return count;</div><div class="line">        count = (root.val - val == 1) ? count+1:1;</div><div class="line">        int leftCount = Helper(root.left, count, root.val);</div><div class="line">        int rightCount = Helper(root.right, count, root.val);</div><div class="line">        return Math.max(count, Math.max(leftCount, rightCount));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question:&lt;/h4&gt;
&lt;p&gt;Given a binary tree, find the length of the longest co
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
</feed>

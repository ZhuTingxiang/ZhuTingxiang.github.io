<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Star</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-22T15:48:55.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Star</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 347. Top K Frequent Elements</title>
    <link href="http://yoursite.com/2017/06/22/LeetCode-347-Top-K-Frequent-Elements/"/>
    <id>http://yoursite.com/2017/06/22/LeetCode-347-Top-K-Frequent-Elements/</id>
    <published>2017-06-22T15:46:27.000Z</published>
    <updated>2017-06-22T15:48:55.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question:</h3>
<p>Given a non-empty array of integers, return the k most frequent elements.</p>
<p>For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].</p>
<p>Note:
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.</p>
<h3 id="explanation">Explanation</h3>
<p>用了三种方法，桶排序，maxHeap以及TreeMap。主要是计算frequency，然后对frequency进行排序。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    // use hashmap &amp;&amp; array</div><div class="line">    // public List&lt;Integer&gt; topKFrequent(int[] nums, int k) &#123;</div><div class="line">    //     List&lt;Integer&gt; result = new ArrayList&lt;&gt;();</div><div class="line">    //     Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    //     for(int n: nums)&#123;</div><div class="line">    //         map.put(n, map.getOrDefault(n,0)+1);</div><div class="line">    //     &#125;</div><div class="line">    //     // corner case: if there is only one number in nums, we need the bucket has index 1.</div><div class="line">    //     List&lt;Integer&gt;[] bucket = new List[nums.length + 1];</div><div class="line">    //     for(int key : map.keySet()) &#123;</div><div class="line">    //         int freq = map.get(key);</div><div class="line">    //         if (bucket[freq] == null) &#123;</div><div class="line">    //             bucket[freq] = new LinkedList&lt;&gt;();</div><div class="line">    //         &#125;</div><div class="line">    //         bucket[freq].add(key);</div><div class="line">    //     &#125;</div><div class="line">    //     List&lt;Integer&gt; res = new LinkedList&lt;&gt;();</div><div class="line">    //     for(int i=bucket.length-1; i&gt;0 &amp;&amp; k &gt; 0; i--) &#123;</div><div class="line">    //         if(bucket[i]!=null) &#123;</div><div class="line">    //             result.addAll(bucket[i]);</div><div class="line">    //             k -= bucket[i].size();</div><div class="line">    //         &#125;</div><div class="line">    //     &#125;</div><div class="line">    //     return result;</div><div class="line">    // &#125;</div><div class="line"></div><div class="line">    // use maxHeap</div><div class="line">    // public List&lt;Integer&gt; topKFrequent(int[] nums, int k) &#123;</div><div class="line">    //     Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    //     for(int n: nums)&#123;</div><div class="line">    //         map.put(n, map.getOrDefault(n,0)+1);</div><div class="line">    //     &#125;</div><div class="line">    //     PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; maxHeap = new PriorityQueue&lt;&gt;((a,b) -&gt; (b.getValue() - a.getValue()));</div><div class="line">    //     for (Map.Entry&lt;Integer, Integer&gt; entry: map.entrySet())&#123;</div><div class="line">    //         maxHeap.add(entry);</div><div class="line">    //     &#125;</div><div class="line">    //     List&lt;Integer&gt; result = new ArrayList&lt;&gt;();</div><div class="line">    //     while(result.size()&lt;k) &#123;</div><div class="line">    //         result.add(maxHeap.poll().getKey());</div><div class="line">    //     &#125;</div><div class="line">    //     return result.subList(0, k);</div><div class="line">    //  &#125;</div><div class="line"></div><div class="line"></div><div class="line">    // Use treeMap, use the frequency as the key so we can get all frequencies in order</div><div class="line">    public List&lt;Integer&gt; topKFrequent(int[] nums, int k) &#123;</div><div class="line">        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">        for(int n: nums)&#123;</div><div class="line">            map.put(n, map.getOrDefault(n,0)+1);</div><div class="line">        &#125;</div><div class="line">        TreeMap&lt;Integer, List&lt;Integer&gt;&gt; treeMap = new TreeMap&lt;&gt;();</div><div class="line">        for(int num: map.keySet()) &#123;</div><div class="line">            int freq = map.get(num);</div><div class="line">            if(!treeMap.containsKey(freq))&#123;</div><div class="line">                treeMap.put(freq, new ArrayList&lt;&gt;());</div><div class="line">            &#125;</div><div class="line">            treeMap.get(freq).add(num);</div><div class="line">        &#125;</div><div class="line">        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();</div><div class="line">        while(result.size()&lt;k) &#123;</div><div class="line">            Map.Entry&lt;Integer, List&lt;Integer&gt;&gt; entry = treeMap.pollLastEntry();</div><div class="line">            result.addAll(entry.getValue());</div><div class="line">        &#125;</div><div class="line">        return result.subList(0, k);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question:&lt;/h3&gt;
&lt;p&gt;Given a non-empty array of integers, return the k most
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 170. Two Sum III - Data Structure design</title>
    <link href="http://yoursite.com/2017/06/20/LeetCode-170-Two-Sum-III-Data-Structure-design/"/>
    <id>http://yoursite.com/2017/06/20/LeetCode-170-Two-Sum-III-Data-Structure-design/</id>
    <published>2017-06-21T03:23:56.000Z</published>
    <updated>2017-06-21T03:26:47.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Design and implement a TwoSum class. It should support the following operations: add and find.</p>
<p>add - Add the number to an internal data structure.
find - Find if there exists any pair of numbers which sum is equal to the value.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">For example,</div><div class="line">add(1); add(3); add(5);</div><div class="line">find(4) -&gt; true</div><div class="line">find(7) -&gt; false</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation</h3>
<p>和leetcode No.1一样，只是需要考虑的这里只能用一个不太需要维护的数据结构来存储，之前排序数组的那种方法就不可行了。同时要考虑计算frequency，会出现pair中两个数字是同一个的情况。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class TwoSum &#123;</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    HashMap&lt;Integer, Integer&gt; map;</div><div class="line">    public TwoSum() &#123;</div><div class="line">        map = new HashMap&lt;Integer, Integer&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Add the number to an internal data structure.. */</div><div class="line">    public void add(int number) &#123;</div><div class="line">        if (map.containsKey(number)) &#123;</div><div class="line">            map.put(number, map.get(number)+1);</div><div class="line">        &#125; else &#123;</div><div class="line">            map.put(number, 1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Find if there exists any pair of numbers which sum is equal to the value. */</div><div class="line">    public boolean find(int value) &#123;</div><div class="line">        for(int key:map.keySet())&#123;</div><div class="line">            int left = value - key;</div><div class="line">            if (left == key &amp;&amp; map.get(key) &gt; 1) &#123;</div><div class="line">                return true;</div><div class="line">            &#125; else if (left != key &amp;&amp; map.containsKey(left)) &#123;</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Design and implement a TwoSum class. It should support 
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Design" scheme="http://yoursite.com/tags/Design/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1. Two Sum</title>
    <link href="http://yoursite.com/2017/06/20/LeetCode-1-Two-Sum/"/>
    <id>http://yoursite.com/2017/06/20/LeetCode-1-Two-Sum/</id>
    <published>2017-06-21T03:19:43.000Z</published>
    <updated>2017-06-21T03:23:23.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Given an array of integers, return indices of the two numbers such that they add up to a specific target.</div><div class="line"></div><div class="line">You may assume that each input would have exactly one solution, and you may not use the same element twice.</div><div class="line"></div><div class="line">Example:</div><div class="line">Given nums = [2, 7, 11, 15], target = 9,</div><div class="line"></div><div class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</div><div class="line">return [0, 1].</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation</h3>
<p>基础中的基础题。如果用Hashmap存，就要用额外的空间，如果用排序和双指针来做，则需要O（nlogn）时间复杂度。</p>
<h3 id="code">Code</h3>
<p>public class Solution {
public int[] twoSum(int[] nums, int target) {
int[] result = new int[2];
HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
for (int i= 0; i&lt; nums.length; i++) {
if (map.containsKey(nums[i])) {
result[0] = map.get(nums[i]);
result[1] = i;
break;
} else {
map.put(target - nums[i] , i);
}
}
return result;</p>
<pre><code>}
</code></pre>
<p>}</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 131.Palindrome Partitioning</title>
    <link href="http://yoursite.com/2017/06/20/LeetCode-131-Palindrome-Partitioning/"/>
    <id>http://yoursite.com/2017/06/20/LeetCode-131-Palindrome-Partitioning/</id>
    <published>2017-06-21T01:47:25.000Z</published>
    <updated>2017-06-21T01:53:05.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return all possible palindrome partitioning of s.</p>
<p>For example, given s = &quot;aab&quot;,
Return
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[</div><div class="line">  [&quot;aa&quot;,&quot;b&quot;],</div><div class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation</h3>
<p>用回溯法找到每种可能的组合的模式，然后对于每个部分字符串去判断是否是回文字符串。算是常规题，略组合了一下，有趣。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</div><div class="line">        List&lt;List&lt;String&gt;&gt; result = new ArrayList&lt;&gt;();</div><div class="line">        if (s == null || s.length() == 0) return result;</div><div class="line">        List&lt;String&gt; patition = new ArrayList&lt;&gt;();</div><div class="line">        helper(s, 0, patition, result);</div><div class="line">        return result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void helper(String s, int index, List&lt;String&gt; partition, List&lt;List&lt;String&gt;&gt; result) &#123;</div><div class="line">        if (index == s.length()) &#123;</div><div class="line">            result.add(new ArrayList&lt;String&gt;(partition));</div><div class="line">        &#125;</div><div class="line">        for (int i=index; i&lt;s.length(); i++) &#123;</div><div class="line">            String subString = s.substring(index, i+1);</div><div class="line">            if (!isPalindrome(subString)) continue;</div><div class="line">            partition.add(subString);</div><div class="line">            helper(s, i+1, partition, result);</div><div class="line">            partition.remove(partition.size()-1);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //check for palindrome</div><div class="line">    public boolean isPalindrome(String s) &#123;</div><div class="line">        if (s == null || s.length() == 0) return true;</div><div class="line">        int i=0; int j = s.length() -1 ;</div><div class="line">        s = s.toLowerCase();</div><div class="line">        while (i &lt; j) &#123;</div><div class="line">            if (!Character.isLetterOrDigit(s.charAt(i))) &#123;</div><div class="line">                i ++;</div><div class="line">            &#125; else if (!Character.isLetterOrDigit(s.charAt(j))) &#123;</div><div class="line">                j--;</div><div class="line">            &#125; else if (s.charAt(i)!=s.charAt(j)) &#123;</div><div class="line">                return false;</div><div class="line">            &#125; else &#123;</div><div class="line">                i++; j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given a string s, partition s such that every substring
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 125. Valid Palindrome</title>
    <link href="http://yoursite.com/2017/06/20/LeetCode-125-Valid-Palindrome-1/"/>
    <id>http://yoursite.com/2017/06/20/LeetCode-125-Valid-Palindrome-1/</id>
    <published>2017-06-21T01:46:52.000Z</published>
    <updated>2017-06-21T01:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script>]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 125. Valid Palindrome</title>
    <link href="http://yoursite.com/2017/06/20/LeetCode-125-Valid-Palindrome/"/>
    <id>http://yoursite.com/2017/06/20/LeetCode-125-Valid-Palindrome/</id>
    <published>2017-06-20T20:11:54.000Z</published>
    <updated>2017-06-20T20:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p>For example,
&quot;A man, a plan, a canal: Panama&quot; is a palindrome.
&quot;race a car&quot; is not a palindrome.</p>
<p>Note:
Have you consider that the string might be empty? This is a good question to ask during an interview.</p>
<p>For the purpose of this problem, we define empty string as valid palindrome.</p>
<h3 id="explanation">Explanation</h3>
<p>双指针问题。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public boolean isPalindrome(String s) &#123;</div><div class="line">        if (s == null || s.length() == 0) return true;</div><div class="line">        int i=0; int j = s.length() -1 ;</div><div class="line">        s = s.toLowerCase();</div><div class="line">        while (i &lt; j) &#123;</div><div class="line">            if (!Character.isLetterOrDigit(s.charAt(i))) &#123;</div><div class="line">                i ++;</div><div class="line">            &#125; else if (!Character.isLetterOrDigit(s.charAt(j))) &#123;</div><div class="line">                j--;</div><div class="line">            &#125; else if (s.charAt(i)!=s.charAt(j)) &#123;</div><div class="line">                return false;</div><div class="line">            &#125; else &#123;</div><div class="line">                i++; j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given a string, determine if it is a palindrome, consid
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 26.Remove Duplicates from Sorted Array</title>
    <link href="http://yoursite.com/2017/06/18/LeetCode-26-Remove-Duplicates-from-Sorted-Array/"/>
    <id>http://yoursite.com/2017/06/18/LeetCode-26-Remove-Duplicates-from-Sorted-Array/</id>
    <published>2017-06-18T20:25:52.000Z</published>
    <updated>2017-06-18T20:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>For example,
Given input array nums = [1,1,2],</p>
<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.</p>
<p>Subscribe to see which companies asked this question.</p>
<h3 id="explanation">Explanation</h3>
<p>双指针问题，在原数组中去遍历。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</div><div class="line"></div><div class="line">Do not allocate extra space for another array, you must do this in place with constant memory.</div><div class="line"></div><div class="line">For example,</div><div class="line">Given input array nums = [1,1,2],</div><div class="line"></div><div class="line">Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn&apos;t matter what you leave beyond the new length.</div><div class="line"></div><div class="line">Subscribe to see which companies asked this question.</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given a sorted array, remove the duplicates in place su
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 283.Move Zeroes</title>
    <link href="http://yoursite.com/2017/06/18/LeetCode-283-Move-Zeroes/"/>
    <id>http://yoursite.com/2017/06/18/LeetCode-283-Move-Zeroes/</id>
    <published>2017-06-18T20:13:56.000Z</published>
    <updated>2017-06-18T20:18:19.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="quesiton">Quesiton</h3>
<p>Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p>
<p>Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.</p>
<h3 id="explanation">Explanation</h3>
<p>双指针，遇到不是0的就去找在此之前是0的数。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public void moveZeroes(int[] nums) &#123;</div><div class="line">        int head = 0;</div><div class="line">        if (nums == null || nums.length == 0) return;</div><div class="line">        while(head &lt; nums.length) &#123;</div><div class="line">            if (nums[head] != 0) &#123;</div><div class="line">                for (int i=0; i&lt;head; i++) &#123;</div><div class="line">                    if (nums[i] == 0) &#123;</div><div class="line">                        int tmp = nums[head];</div><div class="line">                        nums[head] = 0;</div><div class="line">                        nums[i] = tmp;</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            head ++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;quesiton&quot;&gt;Quesiton&lt;/h3&gt;
&lt;p&gt;Given an array nums, write a function to move all 0&#39;s t
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 4. Median of Two Sorted Arrays</title>
    <link href="http://yoursite.com/2017/06/18/LeetCode-4-Median-of-Two-Sorted-Arrays/"/>
    <id>http://yoursite.com/2017/06/18/LeetCode-4-Median-of-Two-Sorted-Arrays/</id>
    <published>2017-06-18T19:17:57.000Z</published>
    <updated>2017-06-18T19:43:23.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example 1:</div><div class="line">nums1 = [1, 3]</div><div class="line">nums2 = [2]</div></pre></td></tr></table></figure></p>
<p>The median is 2.0
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example 2:</div><div class="line">nums1 = [1, 2]</div><div class="line">nums2 = [3, 4]</div></pre></td></tr></table></figure></p>
<p>The median is (2 + 3)/2 = 2.5</p>
<h3 id="explanation">Explanation</h3>
<p>既然题目要求用时间复杂度为O(log (m+n))的方法，很自然想到了二分法和分治法。中位数的表示可以用
(m + n +1)/2和(m + n + 2)/2这两个数除以2来表示。所以我们就要想办法找出两个未合并的数列中的第kth就好了。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123;</div><div class="line">        int m = nums1.length; int n = nums2.length;</div><div class="line">        int left = (m + n +1)/2; int right = (m + n + 2)/2;</div><div class="line">        return (findKth(nums1, nums2, left) + findKth(nums1, nums2, right))/2.0;</div><div class="line"></div><div class="line"></div><div class="line">    public int findKth(int[] nums1, int[] nums2, int k) &#123;</div><div class="line">        int m = nums1.length, n = nums2.length;</div><div class="line">        // if m &gt;n, change two arrays</div><div class="line">        if (m &gt; n) return findKth(nums2, nums1, k);</div><div class="line">        // if any array is empty, just get the kth in second</div><div class="line">        if (m == 0) return nums2[k-1];</div><div class="line">        if (k == 1) return Math.min(nums1[0], nums2[0]);</div><div class="line"></div><div class="line">        int i = Math.min(m, k/2);</div><div class="line">        int j = Math.min(n, k/2);</div><div class="line">        if (nums1[i-1] &gt; nums2[j-1]) &#123;</div><div class="line">            return findKth(nums1, Arrays.copyOfRange(nums2, j, n), k-j);</div><div class="line">        &#125; else &#123;</div><div class="line">            return findKth(Arrays.copyOfRange(nums1, i, m), nums2, k-i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;There are two sorted arrays nums1 and nums2 of size m a
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Hard" scheme="http://yoursite.com/tags/Hard/"/>
    
      <category term="Divide and conquer" scheme="http://yoursite.com/tags/Divide-and-conquer/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Weekly Contest 621. Task Scheduler</title>
    <link href="http://yoursite.com/2017/06/18/LeetCode-Weekly-Contest-621-Task-Scheduler-1/"/>
    <id>http://yoursite.com/2017/06/18/LeetCode-Weekly-Contest-621-Task-Scheduler-1/</id>
    <published>2017-06-18T18:06:34.000Z</published>
    <updated>2017-06-18T18:06:34.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script>]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode Weekly Contest 625. Minimum Factorization</title>
    <link href="http://yoursite.com/2017/06/17/LeetCode-Weekly-Contest-625-Minimum-Factorization/"/>
    <id>http://yoursite.com/2017/06/17/LeetCode-Weekly-Contest-625-Minimum-Factorization/</id>
    <published>2017-06-18T03:44:54.000Z</published>
    <updated>2017-06-18T15:46:47.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given a positive integer a, find the smallest positive integer b whose multiplication of each digit equals to a.</p>
<p>If there is no answer or the answer is not fit in 32-bit signed integer, then return 0.</p>
<p>Example 1
Input:</p>
<p>48
Output:
68
Example 2
Input:</p>
<p>15
Output:
35</p>
<h3 id="explanation">Explanation</h3>
<p>很直接的解法，从9开始找因子，存起来，最后组成最小的数。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int smallestFactorization(int a) &#123;</div><div class="line">        if(a == 0) return 0;</div><div class="line">        ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</div><div class="line">        helper(a, list);</div><div class="line">        if (list.get(0) == 0) return 0;</div><div class="line">        int result = 0;</div><div class="line">        for (int i=list.size()-1; i&gt;=0; i--) &#123;</div><div class="line">            int digit = i;</div><div class="line">            result += list.get(i) * Math.pow(10,digit);</div><div class="line">            if (result &gt;= Integer.MAX_VALUE) &#123;</div><div class="line">                return 0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void helper(int a, ArrayList&lt;Integer&gt; list) &#123;</div><div class="line">        if (a &lt;= 9) &#123;</div><div class="line">            list.add(a);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        boolean could = false;</div><div class="line">        for (int i = 9; i&gt;=2; i--) &#123;</div><div class="line">            if (a%i == 0) &#123;</div><div class="line">                could = true;</div><div class="line">                list.add(i);</div><div class="line">                helper(a/i, list);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if(!could) &#123;</div><div class="line">            if (list.size() &lt;1) list.add(0);</div><div class="line">            else list.set(0,0);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given a positive integer a, find the smallest positive 
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Arrays" scheme="http://yoursite.com/tags/Arrays/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Weekly Contest 623.Add One Row to Tree</title>
    <link href="http://yoursite.com/2017/06/17/LeetCode-Weekly-Contest-623-Add-One-Row-to-Tree/"/>
    <id>http://yoursite.com/2017/06/17/LeetCode-Weekly-Contest-623-Add-One-Row-to-Tree/</id>
    <published>2017-06-18T03:43:20.000Z</published>
    <updated>2017-06-18T15:43:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given the root of a binary tree, then value v and depth d, you need to add a row of nodes with value v at the given depth d. The root node is at depth 1.</p>
<p>The adding rule is: given a positive integer depth d, for each NOT null tree nodes N in depth d-1, create two tree nodes with value v as N's left subtree root and right subtree root. And N's original left subtree should be the left subtree of the new left subtree root, its original right subtree should be the right subtree of the new right subtree root. If depth d is 1 that means there is no depth d-1 at all, then create a tree node with value v as the new root of the whole original tree, and the original tree is the new root's left subtree.</p>
<p>Example 1:
Input:
A binary tree as following:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">       4</div><div class="line">     /   \</div><div class="line">    2     6</div><div class="line">   / \   /</div><div class="line">  3   1 5   </div><div class="line"></div><div class="line">v = 1</div><div class="line"></div><div class="line">d = 2</div><div class="line"></div><div class="line">Output:</div><div class="line">       4</div><div class="line">      / \</div><div class="line">     1   1</div><div class="line">    /     \</div><div class="line">   2       6</div><div class="line">  / \     /</div><div class="line"> 3   1   5</div></pre></td></tr></table></figure></p>
<p>Example 2:
Input:
A binary tree as following:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">      4</div><div class="line">     /   </div><div class="line">    2    </div><div class="line">   / \   </div><div class="line">  3   1    </div><div class="line"></div><div class="line">v = 1</div><div class="line"></div><div class="line">d = 3</div><div class="line"></div><div class="line">Output:</div><div class="line">      4</div><div class="line">     /   </div><div class="line">    2</div><div class="line">   / \    </div><div class="line">  1   1</div><div class="line"> /     \  </div><div class="line">3       1</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation</h3>
<p>用BFS层级遍历，找到上一层以后，指定一下左右即可。还是要熟练掌握BFS。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public TreeNode addOneRow(TreeNode root, int v, int d) &#123;</div><div class="line">        if(d == 1) &#123;</div><div class="line">            TreeNode new_root = new TreeNode(v);</div><div class="line">            new_root.left = root;</div><div class="line">            return new_root;</div><div class="line">        &#125;</div><div class="line">        // 存之前的每一层，BFS</div><div class="line">        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</div><div class="line">        queue.offer(root);</div><div class="line">        int level = 1;</div><div class="line">        while(++level &lt; d) &#123;</div><div class="line">            int size = queue.size();</div><div class="line">            while(size-- &gt; 0) &#123;</div><div class="line">                TreeNode cur = queue.poll();</div><div class="line">                if(cur.left != null) queue.add(cur.left);</div><div class="line">                if(cur.right != null) queue.add(cur.right);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // 变换这一层以及下一层</div><div class="line">        while(!queue.isEmpty()) &#123;</div><div class="line">            TreeNode cur = queue.poll();</div><div class="line">            TreeNode temp_left = cur.left;</div><div class="line">            TreeNode temp_right = cur.right;</div><div class="line">            cur.left = new TreeNode(v);</div><div class="line">            cur.left.left = temp_left;</div><div class="line">            cur.right = new TreeNode(v);</div><div class="line">            cur.right.right = temp_right;</div><div class="line">        &#125;</div><div class="line">        return root;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given the root of a binary tree, then value v and depth
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="Binary tree" scheme="http://yoursite.com/tags/Binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Weekly Contest 624.Maximum Distance in Arrays</title>
    <link href="http://yoursite.com/2017/06/17/LeetCode-624-Maximum-Distance-in-Arrays/"/>
    <id>http://yoursite.com/2017/06/17/LeetCode-624-Maximum-Distance-in-Arrays/</id>
    <published>2017-06-18T03:37:36.000Z</published>
    <updated>2017-06-18T03:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given m arrays, and each array is sorted in ascending order. Now you can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a-b|. Your task is to find the maximum distance.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Example 1:</div><div class="line">Input:</div><div class="line">[[1,2,3],</div><div class="line"> [4,5],</div><div class="line"> [1,2,3]]</div><div class="line">Output: 4</div></pre></td></tr></table></figure></p>
<p>Explanation:
One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.
Note:
Each given array will have at least 1 number. There will be at least two non-empty arrays.
The total number of the integers in all the m arrays will be in the range of [2, 10000].
The integers in the m arrays will be in the range of [-10000, 10000].</p>
<h3 id="explanation">Explanation</h3>
<p>这道题我是暴力解吧，先找到每个array里面的max和min，然后再得到相减最大的值。
在Discuss里面看到很棒的解法，我忽略了是sorted这个条件，在后面附上Discuss里面的解法，就是遍历的时候就同时计算了，非常巧妙。</p>
<h3 id="code">Code</h3>
<p>More Clever Solution： https://discuss.leetcode.com/topic/92859/java-solution-min-and-max
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int maxDistance(int[][] arrays) &#123;</div><div class="line">        int result = Integer.MIN_VALUE;</div><div class="line">        int max = arrays[0][arrays[0].length - 1];</div><div class="line">        int min = arrays[0][0];</div><div class="line"></div><div class="line">        for (int i = 1; i &lt; arrays.length; i++) &#123;</div><div class="line">            result = Math.max(result, Math.abs(arrays[i][0] - max));</div><div class="line">            result = Math.max(result, Math.abs(arrays[i][arrays[i].length - 1] - min));</div><div class="line">            max = Math.max(max, arrays[i][arrays[i].length - 1]);</div><div class="line">            min = Math.min(min, arrays[i][0]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Stupid Solution：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int maxDistance(int[][] arrays) &#123;</div><div class="line">        int[][] maxMin = new int[arrays.length][2];</div><div class="line">        int max = 0;</div><div class="line">        if (arrays == null || arrays[0] == null) return 0;</div><div class="line">        // Store every max and min in each array</div><div class="line">        for (int i=0; i&lt;arrays.length; i++) &#123;</div><div class="line">            int partMax = Integer.MIN_VALUE;</div><div class="line">            int partMin = Integer.MAX_VALUE;</div><div class="line">            for (int j = 0; j&lt; arrays[i].length; j++) &#123;</div><div class="line">                if (arrays[i][j] &gt; partMax) &#123;</div><div class="line">                    partMax = arrays[i][j];</div><div class="line">                &#125;</div><div class="line">                if (arrays[i][j] &lt; partMin) &#123;</div><div class="line">                    partMin = arrays[i][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            maxMin[i][0] = partMax;</div><div class="line">            maxMin[i][1] = partMin;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        // use all max and min to calculate result</div><div class="line">        for (int i=0; i &lt; maxMin.length; i++) &#123;</div><div class="line">            for (int j = 0; j&lt;maxMin.length; j++) &#123;</div><div class="line">                if (i != j) &#123;</div><div class="line">                    max = Math.max(max, (maxMin[i][0] - maxMin[j][1]));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given m arrays, and each array is sorted in ascending o
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 349.Intersection of Two Arrays</title>
    <link href="http://yoursite.com/2017/06/17/LeetCode-349-Intersection-of-Two-Arrays/"/>
    <id>http://yoursite.com/2017/06/17/LeetCode-349-Intersection-of-Two-Arrays/</id>
    <published>2017-06-17T20:43:22.000Z</published>
    <updated>2017-06-17T20:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].</p>
<p>Note:
Each element in the result must be unique.
The result can be in any order.</p>
<h3 id="explanation">Explanation</h3>
<p>有三种方法可以实现：</p>
<ol>
<li>用一个HashMap存起来。Time: O(nlogn) Space: O(n)</li>
<li>两个数组都排序，然后用两个指针遍历。Time: O(nlogn) Space:O(1)</li>
<li>排序其中的一个数组，然后用binary search进行搜索。Time: O(nlogn) Space:O(1)</li>
</ol>
<h3 id="code">Code</h3>
<p>最后一种方法的代码：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int[] intersection(int[] nums1, int[] nums2) &#123;</div><div class="line">        int m = nums1.length;</div><div class="line">        int n = nums2.length;</div><div class="line">        if (m &gt; n) return intersection(nums2, nums1);</div><div class="line">        Arrays.sort(nums2);</div><div class="line">        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</div><div class="line">        for(int i=0; i&lt;m; i++) &#123;</div><div class="line">            if (binarySearch(nums2, nums1[i])) &#123;</div><div class="line">                set.add(nums1[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        int[] result = new int[set.size()];</div><div class="line">        int i = 0;</div><div class="line">        for (Integer num:set) &#123;</div><div class="line">            result[i++] = num;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean binarySearch(int[] nums, int number) &#123;</div><div class="line">        int start = 0;</div><div class="line">        int end = nums.length-1;</div><div class="line">        while (start &lt;= end) &#123;</div><div class="line">            int mid = start + (end - start)/2;</div><div class="line">            if (nums[mid] == number) return true;</div><div class="line">            if (nums[mid] &lt; number) &#123;</div><div class="line">                start = mid + 1;</div><div class="line">            &#125; else &#123;</div><div class="line">                end = mid - 1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given two arrays, write a function to compute their int
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
      <category term="Intersection" scheme="http://yoursite.com/tags/Intersection/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 88.Merged Sorted Array</title>
    <link href="http://yoursite.com/2017/06/17/LeetCode-88-Merged-Sorted-Array/"/>
    <id>http://yoursite.com/2017/06/17/LeetCode-88-Merged-Sorted-Array/</id>
    <published>2017-06-17T20:20:30.000Z</published>
    <updated>2017-06-17T20:22:24.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p>
<p>Note:
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.</p>
<h3 id="explanation">Explanation</h3>
<p>重点在于已经是sort好的了，并且不能从头开始比较，那会打乱顺序。从后开始更容易。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public void merge(int[] nums1, int m, int[] nums2, int n) &#123;</div><div class="line">        int index = n+m -1;</div><div class="line">        int i = m-1;</div><div class="line">        int j = n-1;</div><div class="line">        // 从最后开始比较，往nums1中放</div><div class="line">        while(i &gt;= 0 &amp;&amp; j &gt;= 0) &#123;</div><div class="line">            if (nums1[i] &gt; nums2[j]) &#123;</div><div class="line">                nums1[index--] = nums1[i--];</div><div class="line">            &#125; else &#123;</div><div class="line">                nums1[index--] = nums2[j--];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        while(j&gt;=0) nums1[index--] = nums2[j--];</div><div class="line">        return;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given two sorted integer arrays nums1 and nums2, merge 
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Merge Sort" scheme="http://yoursite.com/tags/Merge-Sort/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Weekly Contest 621. Task Scheduler</title>
    <link href="http://yoursite.com/2017/06/17/LeetCode-Weekly-Contest-621-Task-Scheduler/"/>
    <id>http://yoursite.com/2017/06/17/LeetCode-Weekly-Contest-621-Task-Scheduler/</id>
    <published>2017-06-17T18:02:21.000Z</published>
    <updated>2017-06-18T18:06:28.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.</p>
<p>However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.</p>
<p>You need to return the least number of intervals the CPU will take to finish all the given tasks.</p>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: tasks = [&apos;A&apos;,&apos;A&apos;,&apos;A&apos;,&apos;B&apos;,&apos;B&apos;,&apos;B&apos;], n = 2</div><div class="line">Output: 8</div><div class="line">Explanation: A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B.</div></pre></td></tr></table></figure></p>
<p>Note:
The number of tasks is in the range [1, 10000].
The integer n is in the range [0, 100].</p>
<h3 id="explanation">Explanation</h3>
<p>这道题就是依次找到最max的frequency,之后顺次递减，如果还有剩余，就放回去。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int leastInterval(char[] tasks, int n) &#123;</div><div class="line">        HashMap&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">        // store all tasks with its frequency</div><div class="line">        for (char c : tasks) &#123;</div><div class="line">            map.put(c, map.getOrDefault(c, 0) + 1);</div><div class="line">        &#125;</div><div class="line">        // store sorted frequency</div><div class="line">        PriorityQueue&lt;Map.Entry&lt;Character, Integer&gt;&gt; queue = new PriorityQueue&lt;&gt;(</div><div class="line">            (a,b) -&gt; a.getValue() != b.getValue() ? b.getValue() - a.getValue() : a.getKey() - b.getKey());</div><div class="line">        queue.addAll(map.entrySet());</div><div class="line">        int count = 0;</div><div class="line"></div><div class="line">        while(!queue.isEmpty()) &#123;</div><div class="line">            int k = n+1;</div><div class="line">            List&lt;Map.Entry&gt; tmpList = new ArrayList&lt;&gt;();</div><div class="line">            while (k &gt; 0 &amp;&amp; !queue.isEmpty()) &#123;</div><div class="line">                Map.Entry&lt;Character, Integer&gt; top = queue.poll();</div><div class="line">                top.setValue(top.getValue()-1);</div><div class="line">                tmpList.add(top);</div><div class="line">                k --;</div><div class="line">                count ++;</div><div class="line">            &#125;</div><div class="line">            for (Map.Entry&lt;Character, Integer&gt; e:tmpList) &#123;</div><div class="line">                if (e.getValue() &gt; 0)</div><div class="line">                queue.add(e);</div><div class="line">            &#125;</div><div class="line">            if (queue.isEmpty()) break;</div><div class="line">            count = count + k;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return count;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<pre><code></code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given a char array representing tasks CPU need to do. I
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="PriorityQueue" scheme="http://yoursite.com/tags/PriorityQueue/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 21. Merge Two Sorted Lists</title>
    <link href="http://yoursite.com/2017/06/16/LeetCode-21-Merge-Two-Sorted-Lists/"/>
    <id>http://yoursite.com/2017/06/16/LeetCode-21-Merge-Two-Sorted-Lists/</id>
    <published>2017-06-17T00:36:46.000Z</published>
    <updated>2017-06-17T00:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<h3 id="explanation">Explanation</h3>
<p>两个指针。非常简单。</p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123;</div><div class="line">        ListNode a = l1;</div><div class="line">        ListNode b = l2;</div><div class="line">        if (l1 == null &amp;&amp; l2 == null) return null;</div><div class="line">        ListNode curr = new ListNode(0);</div><div class="line">        ListNode dummy= curr;</div><div class="line">        while(a != null &amp;&amp; b != null) &#123;</div><div class="line">            if (a.val &lt; b.val) &#123;</div><div class="line">                dummy.next = new ListNode(a.val);</div><div class="line">                a = a.next;</div><div class="line">            &#125; else &#123;</div><div class="line">                dummy.next = new ListNode(b.val);</div><div class="line">                b = b.next;</div><div class="line">            &#125;</div><div class="line">            dummy = dummy.next;</div><div class="line">        &#125;</div><div class="line">        if(a!= null) dummy.next = a;</div><div class="line">        else dummy.next = b;</div><div class="line">        return curr.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Merge two sorted linked lists and return it as a new li
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="LinkedList" scheme="http://yoursite.com/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 148. Sort List以及排序</title>
    <link href="http://yoursite.com/2017/06/16/LeetCode-148-Sort-List/"/>
    <id>http://yoursite.com/2017/06/16/LeetCode-148-Sort-List/</id>
    <published>2017-06-16T23:33:47.000Z</published>
    <updated>2017-06-17T20:11:55.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>排序算法：
时间复杂度为 O(nlgn）:<br>
quick sort (空间复杂度O(1)), merge sort(空间复杂度O(n)), heap sort (空间复杂度O(1))
时间复杂度为 O(n):
bucket sort, radix sort,
基于比较的排序，时间复杂度一般为O(nlgn）</p>
<h3 id="question">Question</h3>
<p>Sort a linked list in O(n log n) time using constant space complexity.</p>
<h3 id="explanation">Explanation</h3>
<p>这道题主要要掌握几种sort的方法怎么写，还有相关的复杂度分析。</p>
<h3 id="code">Code</h3>
<ol>
<li>
<p>Merge Sort: 时间复杂度为O(nlogn），空间复杂度O(n)
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public ListNode sortList(ListNode head) &#123;</div><div class="line">        if (head == null || head.next == null) return head;</div><div class="line">        // Merge Sort</div><div class="line">        ListNode mid = findMiddle(head);</div><div class="line">        ListNode right = sortList(mid.next);</div><div class="line">        mid.next = null;</div><div class="line">        ListNode left = sortList(head);</div><div class="line">        return mergeTwoLists(left, right);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123;</div><div class="line">        ListNode a = l1;</div><div class="line">        ListNode b = l2;</div><div class="line">        if (l1 == null &amp;&amp; l2 == null) return null;</div><div class="line">        ListNode curr = new ListNode(0);</div><div class="line">        ListNode dummy= curr;</div><div class="line">        while(a != null &amp;&amp; b != null) &#123;</div><div class="line">            if (a.val &lt; b.val) &#123;</div><div class="line">                dummy.next = new ListNode(a.val);</div><div class="line">                a = a.next;</div><div class="line">            &#125; else &#123;</div><div class="line">                dummy.next = new ListNode(b.val);</div><div class="line">                b = b.next;</div><div class="line">            &#125;</div><div class="line">            dummy = dummy.next;</div><div class="line">        &#125;</div><div class="line">        if(a!= null) dummy.next = a;</div><div class="line">        else dummy.next = b;</div><div class="line">        return curr.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    private ListNode findMiddle(ListNode head) &#123;</div><div class="line">        ListNode walker = head;</div><div class="line">        ListNode runner = head.next;</div><div class="line">        while(runner!= null &amp;&amp; runner.next!=null) &#123;</div><div class="line">            runner = runner.next.next;</div><div class="line">            walker = walker.next;</div><div class="line">        &#125;</div><div class="line">        return walker;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Quick Sort</p>
</li>
</ol>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public ListNode sortList(ListNode head) &#123;</div><div class="line">        //Quick Sort</div><div class="line">        if(head == null || head.next == null) return head;</div><div class="line">        ListNode mid = findMedian(head);//O(n)</div><div class="line">        ListNode leftDummy = new ListNode(0), leftTail = leftDummy;</div><div class="line">        ListNode rightDummy = new ListNode(0), rightTail = rightDummy;</div><div class="line">        ListNode middleDummy = new ListNode(0), middleTail = middleDummy;</div><div class="line">        while (head != null) &#123;</div><div class="line">            if (head.val &lt; mid.val) &#123;</div><div class="line">                leftTail.next = head;</div><div class="line">                leftTail = head;</div><div class="line">            &#125; else if (head.val &gt; mid.val) &#123;</div><div class="line">                rightTail.next = head;</div><div class="line">                rightTail = head;</div><div class="line">            &#125; else &#123;</div><div class="line">                middleTail.next = head;</div><div class="line">                middleTail = head;</div><div class="line">            &#125;</div><div class="line">            head = head.next;</div><div class="line">        &#125;</div><div class="line">        leftTail.next = null;</div><div class="line">        middleTail.next = null;</div><div class="line">        rightTail.next = null;</div><div class="line">        ListNode left = sortList(leftDummy.next);</div><div class="line">        ListNode right = sortList(rightDummy.next);</div><div class="line">        return concat(left, middleDummy.next, right);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    private ListNode findMedian(ListNode head) &#123;</div><div class="line">        ListNode slow = head, fast = head.next;</div><div class="line">        while (fast != null &amp;&amp; fast.next != null) &#123;</div><div class="line">            slow = slow.next;</div><div class="line">            fast = fast.next.next;</div><div class="line">        &#125;</div><div class="line">        return slow;</div><div class="line">    &#125;</div><div class="line">    private ListNode concat(ListNode left, ListNode middle, ListNode right) &#123;</div><div class="line">        ListNode dummy = new ListNode(0), tail = dummy;</div><div class="line"></div><div class="line">        tail.next = left; tail = getTail(tail);</div><div class="line">        tail.next = middle; tail = getTail(tail);</div><div class="line">        tail.next = right; tail = getTail(tail);</div><div class="line">        return dummy.next;</div><div class="line">    &#125;</div><div class="line">    private ListNode getTail(ListNode head) &#123;</div><div class="line">        if (head == null) &#123;</div><div class="line">           return null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        while (head.next != null) &#123;</div><div class="line">            head = head.next;</div><div class="line">        &#125;</div><div class="line">        return head;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;排序算法：
时间复杂度为 O(nlgn）:&lt;br&gt;
quick sort (空间复杂度O(1)), merge sort(空间复杂度O(n)), heap sort (空间复
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
      <category term="Merge Sort" scheme="http://yoursite.com/tags/Merge-Sort/"/>
    
      <category term="Quick Sort" scheme="http://yoursite.com/tags/Quick-Sort/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 142. Linked List CycleII</title>
    <link href="http://yoursite.com/2017/06/16/LeetCode-142-Linked-List-CycleII/"/>
    <id>http://yoursite.com/2017/06/16/LeetCode-142-Linked-List-CycleII/</id>
    <published>2017-06-16T23:04:56.000Z</published>
    <updated>2017-06-16T23:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.</p>
<p>Note: Do not modify the linked list.</p>
<p>Follow up:
Can you solve it without using extra space?</p>
<h3 id="explanation">Explanation</h3>
<p>和上面一道题不一样的地方就是要输出从哪里开始。真的是不看答案想不出来..贴一个我觉得比较清楚的讲解吧：
Reference：https://discuss.leetcode.com/topic/27868/concise-java-solution-based-on-slow-fast-pointers
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Definitions:</div><div class="line">Cycle = length of the cycle, if exists.</div><div class="line">C is the beginning of Cycle, S is the distance of slow pointer from C when slow pointer meets fast pointer.</div><div class="line"></div><div class="line">Distance(slow) = C + S, Distance(fast) = 2 * Distance(slow) = 2 * (C + S). To let slow poiner meets fast pointer, only if fast pointer run 1 cycle more than slow pointer. Distance(fast) - Distance(slow) = Cycle</div><div class="line">=&gt; 2 * (C + S) - (C + S)	= Cycle</div><div class="line">=&gt;	C + S = Cycle</div><div class="line">=&gt;	C = Cycle - S</div><div class="line">=&gt; This means if slow pointer runs (Cycle - S) more, it will reaches C. So at this time, if there&apos;s another point2 running from head</div><div class="line">=&gt; After C distance, point2 will meet slow pointer at C, where is the beginning of the cycle.</div></pre></td></tr></table></figure></p>
<h3 id="code">Code</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">public ListNode detectCycle(ListNode head) &#123;</div><div class="line">	ListNode slow = head, fast = head;</div><div class="line">	while(fast != null &amp;&amp; fast.next != null) &#123;</div><div class="line">		fast = fast.next.next;</div><div class="line">		slow = slow.next;</div><div class="line">		if (slow == fast) &#123;</div><div class="line">			while (head != slow) &#123;</div><div class="line">				head = head.next;</div><div class="line">				slow = slow.next;</div><div class="line">			&#125;</div><div class="line">			return slow;				</div><div class="line">		&#125;</div><div class="line">	&#125;			</div><div class="line">	return null;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given a linked list, return the node where the cycle be
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LinkedList" scheme="http://yoursite.com/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 141. Linked List Cycle</title>
    <link href="http://yoursite.com/2017/06/16/LeetCode-141-Linked-List-Cycle/"/>
    <id>http://yoursite.com/2017/06/16/LeetCode-141-Linked-List-Cycle/</id>
    <published>2017-06-16T21:24:02.000Z</published>
    <updated>2017-06-16T21:36:55.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question</h3>
<p>Given a linked list, determine if it has a cycle in it.</p>
<p>Follow up:
Can you solve it without using extra space?</p>
<h3 id="explanation">Explanation</h3>
<p>双指针，如果有重合，就说明有环。</p>
<h3 id="code">Code</h3>
<p>public class Solution {
// Solution 1: user extra space, O(N). Time complexity:O(N). HashSet;
// public boolean hasCycle(ListNode head) {
//     if (head == null) return false;
//     ListNode n = head;
//     HashSet&lt;ListNode&gt; set = new HashSet&lt;&gt;();
//     while(n!=null) {
//         if (!set.contains(n)) set.add(n);
//         else return true;
//         n = n.next;
//     }
//     return false;
// }
// Solution 2: two pointers
public boolean hasCycle(ListNode head) {
if (head == null) return false;
ListNode walker, runner;
walker = head;
runner = head;
while (runner != null &amp;&amp; runner.next != null) {
runner = runner.next.next;
walker = walker.next;
if (runner == walker) return true;
}
return false;</p>
<pre><code>      }
  }



}
</code></pre>
<p>}</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;
&lt;p&gt;Given a linked list, determine if it has a cycle in it.
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="LinkedList" scheme="http://yoursite.com/tags/LinkedList/"/>
    
  </entry>
  
</feed>

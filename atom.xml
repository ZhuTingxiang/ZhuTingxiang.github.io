<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Star</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-23T22:49:35.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Star</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>云计算Project：基于多个后端的社交网络时间线的实现</title>
    <link href="http://yoursite.com/2017/02/23/%E4%BA%91%E8%AE%A1%E7%AE%97Project%EF%BC%9A%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%B8%AA%E5%90%8E%E7%AB%AF%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E7%BA%BF%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/02/23/云计算Project：基于多个后端的社交网络时间线的实现/</id>
    <published>2017-02-23T20:12:14.000Z</published>
    <updated>2017-02-23T22:49:35.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x672C;&#x6587;&#x662F;&#x5173;&#x4E8E;CMU15619Cloud Computing&#x9879;&#x76EE;:<code>Social Networking Timeline with Heterogeneous Backends</code>&#x7684;&#x4ECB;&#x7ECD;&#x4EE5;&#x53CA;&#x603B;&#x7ED3;&#x53CD;&#x601D;&#x3002;</p>
<p>&#x9879;&#x76EE;&#x4E3B;&#x8981;&#x76EE;&#x6807;&#xFF1A;</p>
<ul>
<li>&#x63A2;&#x7D22;AWS&#x7684;DBaas&#x670D;&#x52A1;&#x7684;&#x7533;&#x8BF7;&#x3001;&#x914D;&#x7F6E;&#x548C;&#x7BA1;&#x7406;</li>
<li>&#x6BD4;&#x8F83;MySQL, HBase&#x548C;MongoDB&#x5728;&#x4F7F;&#x7528;Java API&#x8F7D;&#x5165;&#x6570;&#x636E;&#x65F6;&#x7684;&#x5F02;&#x540C;&#x3002;</li>
<li>&#x5229;&#x7528;&#x591A;&#x4E2A;&#x540E;&#x7AEF;&#x4E3A;&#x540C;&#x4E00;&#x4E2A;&#x590D;&#x6742;&#x7684;web&#x5E94;&#x7528;&#x63D0;&#x4F9B;&#x6570;&#x636E;&#x3002;</li>
<li>&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x6570;&#x636E;&#x5E93;&#x5728;&#x5B9E;&#x9645;&#x5E94;&#x7528;&#x4E2D;&#x7684;&#x7279;&#x70B9;&#x3002;</li>
</ul>
<h2 id="bei-jing-jie-shao">&#x80CC;&#x666F;&#x4ECB;&#x7ECD; <a href="#bei-jing-jie-shao" class="header-anchor">#</a></h2>
<h3 id="dbaas-database-as-a-services">DBaas(Database-as-a-Services)&#xFF1A; <a href="#dbaas-database-as-a-services" class="header-anchor">#</a></h3>
<p>&#x5728;AWS&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;&#x5176;&#x4E2D;&#x7684;RDS&#x7684;MySQL&#x670D;&#x52A1;&#x3002;</p>
<h3 id="mongodb">MongoDB&#xFF1A; <a href="#mongodb" class="header-anchor">#</a></h3>
<p>MongoDB&#x662F;NoSQL&#x6570;&#x636E;&#x5E93;&#x7684;&#x5178;&#x578B;&#xFF0C;&#x57FA;&#x4E8E;&#x6587;&#x6863;&#x5B58;&#x50A8;&#xFF08;Document-oriented&#xFF09;&#xFF0C;&#x4E0D;&#x652F;&#x6301;&#x4E8B;&#x52A1;&#x548C;&#x8868;&#x8FDE;&#x63A5;&#xFF0C;&#x6240;&#x4EE5;&#x67E5;&#x8BE2;&#x7684;&#x7F16;&#x5199;&#x3001;&#x7406;&#x89E3;&#x548C;&#x4F18;&#x5316;&#x6BD4;&#x8F83;&#x5BB9;&#x6613;&#x3002;&#x4E4B;&#x540E;&#x4F1A;&#x5199;&#x4E00;&#x7BC7;&#x5173;&#x4E8E;NoSQL&#x7684;&#x603B;&#x7ED3;&#xFF08;&#x4E00;&#x4E2A;&#x5751;&#xFF09;&#x3002;
&#x548C;HBase&#x7684;key-value&#x5B58;&#x50A8;&#x6A21;&#x5F0F;&#x4E0D;&#x540C;&#xFF0C;MongoDB&#x57FA;&#x4E8E;&#x6587;&#x6863;&#x5B58;&#x50A8;&#x6A21;&#x5F0F;&#x7684;&#x4F18;&#x52BF;&#x5728;&#x4E8E;&#x53EF;&#x4EE5;&#x652F;&#x6301;&#x590D;&#x6742;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF0C;&#x5E76;&#x4E14;&#x4E5F;&#x652F;&#x6301;Index&#x3002;
MongoDB&#x4F7F;&#x7528;BSON&#x7C7B;&#x578B;&#x5B58;&#x50A8;&#x6570;&#x636E;&#xFF0C;&#x636E;&#x8BF4;&#x5C31;&#x662F;&#x628A;&#x6587;&#x672C;&#x76F4;&#x63A5;&#x8F6C;&#x6210;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x793A;&#xFF0C;BSON&#x7528;&#x4E8E;&#x4EE5;&#x4E0B;&#x4E09;&#x79CD;&#x76EE;&#x7684;&#xFF1A;</p>
<ul>
<li>&#x8282;&#x7701;&#x7A7A;&#x95F4;&#xFF1A;BSON&#x5373;&#x4F7F;&#x5728;&#x6700;&#x574F;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4E5F;&#x6BD4;&#x666E;&#x901A;&#x7684;JSON&#x5360;&#x7528;&#x7A7A;&#x95F4;&#x5C11;&#x3002;</li>
<li>&#x79FB;&#x52A8;&#x6027;</li>
<li>Performance&#xFF1A;BSON&#x5BF9;&#x5185;&#x5BB9;&#x7684;&#x7F16;&#x7801;&#x548C;&#x89E3;&#x7801;&#x7684;&#x901F;&#x5EA6;&#x5FEB;&#x4E8E;&#x5F88;&#x591A;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x3002;</li>
</ul>
<h3 id="shu-ju-jie-gou-tu">&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF1A; &#x56FE; <a href="#shu-ju-jie-gou-tu" class="header-anchor">#</a></h3>
<h4 id="1-lin-jie-ju-zhen-adjacent-matrix-kong-jian-fu-za-du-wei-o-n-2">1.&#x90BB;&#x63A5;&#x77E9;&#x9635;Adjacent Matrix&#xFF1A;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O&#xFF08;n^2) <a href="#1-lin-jie-ju-zhen-adjacent-matrix-kong-jian-fu-za-du-wei-o-n-2" class="header-anchor">#</a></h4>
<p>&#x6BD4;&#x5982;&#x8FD9;&#x4E2A;&#xFF1A;
<img src="http://i.imgur.com/Qyrp0rL.png" alt="">
<img src="http://i.imgur.com/x2yyDEI.png" alt=""></p>
<h4 id="2-lin-jie-biao-adjacent-list-kong-jian-jiao-shao">2.&#x90BB;&#x63A5;&#x8868;Adjacent List &#x7A7A;&#x95F4;&#x8F83;&#x5C11;&#xFF1A; <a href="#2-lin-jie-biao-adjacent-list-kong-jian-jiao-shao" class="header-anchor">#</a></h4>
<p><img src="http://i.imgur.com/ofeLFxn.png" alt=""></p>
<h3 id="she-jiao-wang-luo-ying-yong-ji-chu">&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#x5E94;&#x7528;&#x57FA;&#x7840;&#xFF1A; <a href="#she-jiao-wang-luo-ying-yong-ji-chu" class="header-anchor">#</a></h3>
<p>&#x5982;&#x4ECA;&#x50CF;Facebook, Twitter&#x548C;Instagram&#x90FD;&#x9700;&#x8981;&#x590D;&#x6742;&#x548C;&#x6D89;&#x53CA;&#x826F;&#x597D;&#x7684;&#x540E;&#x7AEF;&#x6765;&#x5904;&#x7406;&#x591A;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x7528;&#x6237;&#x6570;&#x636E;&#xFF0C;&#x63D0;&#x4F9B;&#x6301;&#x7EED;&#x7684;&#x9AD8;&#x6027;&#x80FD;&#x4F4E;&#x5EF6;&#x8FDF;&#x7684;&#x670D;&#x52A1;&#x3002;&#x540C;&#x65F6;&#x8FD8;&#x8981;&#x901A;&#x8FC7;&#x5B9E;&#x65F6;&#x6570;&#x636E;&#x5206;&#x6790;&#x4E3A;&#x516C;&#x53F8;&#x548C;&#x5E7F;&#x544A;&#x5546;&#x63D0;&#x4F9B;&#x6709;&#x4EF7;&#x503C;&#x7684;&#x4FE1;&#x606F;&#x3002;</p>
<ul>
<li>&#x4E0D;&#x540C;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF08;Video&#xFF0C;Text&#xFF0C;Link&#xFF0C;etc.)&#x9700;&#x8981;&#x5B58;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x636E;&#x5E93;&#x4E2D;&#xFF09;</li>
<li>&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x5C55;&#x793A;&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#x9875;&#x9762;&#x7684;HTTP&#x8BF7;&#x6C42;&#x4F1A;&#x89E6;&#x53D1;&#x540E;&#x7AEF;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x8BF7;&#x6C42;&#x548C;&#x6570;&#x636E;&#x5E93;&#x52A8;&#x4F5C;&#x3002;&#x53EF;&#x4EE5;&#x53C2;&#x89C1;&#x4E0B;&#x56FE;&#xFF1A;
<img src="http://i.imgur.com/r3gf00x.png" alt=""></li>
</ul>
<p>&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x901A;&#x5E38;&#x5305;&#x62EC;&#x4EE5;&#x4E0B;&#x4E09;&#x79CD;&#xFF1A;</p>
<ul>
<li>&#x7528;&#x6237;&#x4FE1;&#x606F;&#xFF1A;
<ul>
<li>&#x8EAB;&#x4EFD;&#x9A8C;&#x8BC1;&#x7CFB;&#x7EDF;</li>
<li>&#x7528;&#x6237;&#x4FE1;&#x606F;/&#x7B80;&#x4ECB;</li>
<li>&#x6D3B;&#x52A8;&#x65E5;&#x5FD7;</li>
<li>&#x793E;&#x4EA4;&#x5173;&#x7CFB;&#x56FE;&#xFF08;&#x5728;&#x4E0B;&#x9762;&#x4F1A;&#x8FDB;&#x6B65;&#x4ECB;&#x7ECD;&#xFF09;</li>
</ul>
</li>
<li>&#x7528;&#x6237;&#x6D3B;&#x52A8;&#xFF1A;
<ul>
<li>&#x7528;&#x6237;&#x4EA7;&#x751F;&#x7684;&#x591A;&#x5A92;&#x4F53;&#x6570;&#x636E;</li>
</ul>
</li>
<li>&#x5927;&#x6570;&#x636E;&#x5206;&#x6790;&#x7CFB;&#x7EDF;&#xFF1A;
<ul>
<li>&#x641C;&#x7D22;&#x7CFB;&#x7EDF;</li>
<li>&#x63A8;&#x8350;&#x7CFB;&#x7EDF;</li>
<li>&#x7528;&#x6237;&#x884C;&#x4E3A;&#x5206;&#x6790;&#xFF08;&#x57FA;&#x4E8E;&#x4E91;&#x6570;&#x636E;&#x4ED3;&#x5E93;&#x7684;OLAP&#xFF0C;&#x6709;&#x673A;&#x4F1A;&#x5355;&#x72EC;&#x66F4;&#x65B0;&#x8FD9;&#x4E2A;&#x90E8;&#x5206;&#xFF09;</li>
</ul>
</li>
</ul>
<p><img src="http://i.imgur.com/Qwd8z0q.png" alt=""></p>
<p>&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#x7684;&#x524D;&#x7AEF;&#x5DF2;&#x7ECF;&#x505A;&#x597D;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x628A;&#x56DB;&#x4E2D;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x636E;&#x96C6;&#x5B58;&#x5165;&#x4E09;&#x79CD;&#x6570;&#x636E;&#x5E93;&#xFF08;MySQL, HBase, MongoDB),&#x4F60;&#x5B8C;&#x6210;&#x7684;&#x540E;&#x7AEF;&#x8981;&#x80FD;&#x540C;&#x65F6;&#x54CD;&#x5E94;&#x56DB;&#x4E2D;&#x4E0D;&#x540C;&#x7684;request&#x3002;</p>
<h2 id="xiang-mu-cao-zuo">&#x9879;&#x76EE;&#x64CD;&#x4F5C; <a href="#xiang-mu-cao-zuo" class="header-anchor">#</a></h2>
<h3 id="tong-guo-rds-de-mysql-shi-xian-ji-ben-deng-lu">&#x901A;&#x8FC7;RDS&#x7684;MySQL&#x5B9E;&#x73B0;&#x57FA;&#x672C;&#x767B;&#x5F55;&#xFF1A; <a href="#tong-guo-rds-de-mysql-shi-xian-ji-ben-deng-lu" class="header-anchor">#</a></h3>
<p>&#x5728;AWS RDS&#x4E2D;&#x914D;&#x7F6E;MySQL&#x5E76;&#x5BFC;&#x5165;users.csv, userinfo.csv&#x6570;&#x636E;&#x96C6;&#x3002;
&#x8FDE;&#x63A5;AWS RDS&#x4E2D;MySQL&#x65F6;&#x6CE8;&#x610F;&#xFF1A;
&#x8FDC;&#x7A0B;&#x767B;&#x5F55;&#x9700;&#x8981;&#x5BFC;&#x5165;&#x6570;&#x636E;&#x65F6;&#x8981;&#x52A0;&#x5165; --local-infile&#x5F97;&#x5230;&#x6388;&#x6743;&#x3002;
<code>mysql -u username -p password -h hostname --port=portname --local-infile database</code></p>
<p>&#x6570;&#x636E;&#x96C6;&#x683C;&#x5F0F;:</p>
<ul>
<li>users.csv [UserID, Password]</li>
<li>userinfo.csv [UserID, Name, Profile Image URL]</li>
</ul>
<p>&#x5BFC;&#x5165;MySQL&#x8BED;&#x53E5;:
<code>LOAD DATA LOCAL INFILE &apos;filename&apos; INTO TABLE tablename CHARACTER SET utf8mb4 FIELDS TERMINATED BY &apos;,&apos; LINES TERMINATED BY &apos;\n&apos;;</code></p>
<p>&#x8BF7;&#x6C42;&#x683C;&#x5F0F;:
<code>GET /task1?id=[UserID]&amp;pwd=[Password]</code></p>
<p>&#x54CD;&#x5E94;&#x683C;&#x5F0F;:
<code>returnRes({&quot;name&quot;:&quot;my_name&quot;, &quot;profile&quot;:&quot;profile_image_url&quot;})</code></p>
<p>&#x6240;&#x4EE5;&#xFF0C;&#x4E4B;&#x540E;&#x5728;Java&#x6587;&#x4EF6;&#x4E2D;&#x8FDE;&#x63A5;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x518D;&#x521B;&#x5EFA;JSON&#x76F8;&#x5E94;&#x7684;&#x4EE3;&#x7801;&#x5373;&#x53EF;&#x3002;
&#x6D4B;&#x8BD5;&#xFF1A;</p>
<ol>
<li>&#x542F;&#x52A8;&#x524D;&#x540E;&#x7AEF;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x8BBF;&#x95EE;<code>http://&lt;your_front_end_dns&gt;:3000</code></li>
<li>&#x8F93;&#x5165;&#x6B63;&#x786E;&#x6216;&#x9519;&#x8BEF;&#x7684;&#x8D26;&#x53F7;&#x5BC6;&#x7801;&#x767B;&#x5F55;&#x6D4B;&#x8BD5;</li>
</ol>
<p><img src="http://i.imgur.com/rv5LnYr.png" alt=""></p>
<h3 id="li-yong-hbase-cun-chu-she-jiao-tu-pu">&#x5229;&#x7528;HBase&#x5B58;&#x50A8;&#x793E;&#x4EA4;&#x56FE;&#x8C31;&#xFF1A; <a href="#li-yong-hbase-cun-chu-she-jiao-tu-pu" class="header-anchor">#</a></h3>
<p>&#x7528;HBase&#x6765;&#x4FDD;&#x5B58;&#x7528;&#x6237;&#x95F4;&#x7684;follow&#x5173;&#x7CFB;&#xFF0C;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x7528;&#x4E4B;&#x524D;&#x5728;&#x56FE;&#x4E2D;&#x4ECB;&#x7ECD;&#x7684;&#x90BB;&#x63A5;&#x77E9;&#x9635;&#x548C;&#x90BB;&#x63A5;&#x8868;&#x4E2D;&#x9009;&#x62E9;&#x4E00;&#x79CD;&#xFF0C;&#x6765;&#x4FDD;&#x5B58;&#x6570;&#x636E;&#x3002;
&#x539F;&#x59CB;&#x6570;&#x636E;&#x683C;&#x5F0F;&#xFF1A;
<code>&lt;followee, follower&gt;</code></p>
<p>&#x8BF7;&#x6C42;&#x683C;&#x5F0F;&#xFF1A;
<code>GET /task2?id=[UserID]</code></p>
<p>&#x54CD;&#x5E94;&#x683C;&#x5F0F;:
<code>{&quot;followers&quot;:[{&quot;name&quot;:&quot;follower_name_1&quot;, &quot;profile&quot;:&quot;profile_image_url_1&quot;}, {&quot;name&quot;:&quot;follower_name_2&quot;, &quot;profile&quot;:&quot;profile_image_url_2&quot;}, ...]}</code></p>
<h4 id="si-lu">&#x601D;&#x8DEF;&#xFF1A; <a href="#si-lu" class="header-anchor">#</a></h4>
<ul>
<li>&#x5728;HBase&#x4E2D;&#x5B58;&#x6210;followee&#xFF1A; follower1&#xFF0C; follower2&#xFF0C; ...&#x7684;&#x683C;&#x5F0F;</li>
<li>&#x8BBE;&#x8BA1;&#x597D;HBase&#x4E4B;&#x540E;&#x5BFC;&#x5165;&#x6570;&#x636E;</li>
<li>&#x542F;&#x52A8;&#x524D;&#x540E;&#x7AEF;&#x670D;&#x52A1;&#x5668;&#x540E;&#x8BBF;&#x95EE;http://&lt;your_front_end_dns&gt;:3000</li>
<li>&#x8F93;&#x5165;userid&#x8FDB;&#x884C;&#x6D4B;&#x8BD5;</li>
</ul>
<h3 id="yong-mongdb-da-jian-zhu-ye">&#x7528;MongDB&#x642D;&#x5EFA;&#x4E3B;&#x9875;&#xFF1A; <a href="#yong-mongdb-da-jian-zhu-ye" class="header-anchor">#</a></h3>
<p>&#x5982;&#x4E4B;&#x524D;&#x4ECB;&#x7ECD;&#x7684;&#x90A3;&#x6837;&#xFF0C;&#x5BF9;&#x4E8E;&#x5404;&#x79CD;&#x5F62;&#x5F0F;&#x7684;&#x5E16;&#x5B50;&#xFF0C;&#x7528;MongoDB&#x5B58;&#x50A8;&#x4F1A;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x9009;&#x62E9;&#x3002;&#x8FD9;&#x91CC;&#x4F1A;&#x67E5;&#x8BE2;&#x4E00;&#x4E9B;&#x7279;&#x5B9A;&#x7684;field&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x5EFA;&#x7ACB;&#x7D22;&#x5F15;&#x6765;&#x52A0;&#x901F;&#x67E5;&#x8BE2;&#x3002;</p>
<p>&#x5E16;&#x5B50;&#x6570;&#x636E;&#x7684;&#x5F62;&#x5F0F;&#xFF1A;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    &quot;pid&quot;:xxx,                                      // PostID</div><div class="line">    &quot;uid&quot;:xxx,                                      // UserID of poster</div><div class="line">    &quot;name&quot;:&quot;xxx&quot;,                                   // User name of poster</div><div class="line">    &quot;profile&quot;:&quot;xxx&quot;,                                // Poster profile image URL</div><div class="line">    &quot;timestamp&quot;:&quot;YYYY-MM-DD HH:MM:SS&quot;,              // When post is posted</div><div class="line">    &quot;image&quot;:&quot;xxx&quot;,                                  // Post image</div><div class="line">    &quot;content&quot;:&quot;xxx&quot;,                                // Post text content</div><div class="line">    &quot;comments&quot;:[                                    // comments json array</div><div class="line">        {</div><div class="line">            &quot;uid&quot;:xxx,                              // UserID of commenter</div><div class="line">            &quot;name&quot;:&quot;xxx&quot;,                           // User name of commenter</div><div class="line">            &quot;profile&quot;:&quot;xxx&quot;,                        // Commenter profile image URL</div><div class="line">            &quot;timestamp&quot;:&quot;YYYY-MM-DD HH:MM:SS&quot;,      // When comment is made</div><div class="line">            &quot;content&quot;:&quot;xxx&quot;                         // Comment text content</div><div class="line">        },</div><div class="line">        {</div><div class="line">            &quot;uid&quot;:xxx,</div><div class="line">            .......</div><div class="line">        },</div><div class="line">        ......</div><div class="line">    ]</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>&#x5173;&#x4E8E;MongoDB&#x5EFA;&#x7ACB;&#x7D22;&#x5F15;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;<a href="https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/" target="_blank" rel="external">&#x8FD9;&#x91CC;</a></p>
<p>&#x8BF7;&#x6C42;&#x683C;&#x5F0F;&#xFF1A;
<code>GET /task3?id=[UserID]</code></p>
<p>&#x54CD;&#x5E94;&#x683C;&#x5F0F;&#xFF1A;
<code>{&quot;posts&quot;:[{post1_json}, {post2_json}, ...]}</code></p>
<p>&#x6D4B;&#x8BD5;&#x65B9;&#x6CD5;&#xFF1A;</p>
<ul>
<li>&#x542F;&#x52A8;&#x524D;&#x540E;&#x7AEF;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x8F93;&#x5165;userid</li>
</ul>
<p><img src="http://i.imgur.com/8p2pep3.png" alt=""></p>
<h3 id="zui-zhong-zheng-he">&#x6700;&#x7EC8;&#x6574;&#x5408; <a href="#zui-zhong-zheng-he" class="header-anchor">#</a></h3>
<p>&#x4E4B;&#x524D;&#x4E09;&#x4E2A;&#x90E8;&#x5206;&#x5206;&#x522B;&#x5B9E;&#x73B0;&#x4E86;&#x4E09;&#x4E2A;&#x6570;&#x636E;&#x5E93;&#x7684;&#x5B58;&#x50A8;&#xFF0C;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x5B9E;&#x73B0;&#x8F93;&#x5165;&#x4E00;&#x4E2A;userid&#x5C31;&#x53EF;&#x4EE5;&#x8FD4;&#x56DE;&#x7528;&#x6237;&#x4FE1;&#x606F;&#xFF08;MySQL),&#x7528;&#x6237;&#x7C89;&#x4E1D;&#x5217;&#x8868;&#xFF08;HBase&#xFF09;&#x4EE5;&#x53CA;&#x7528;&#x6237;&#x5173;&#x6CE8;&#x7684;&#x4EBA;&#x6700;&#x65B0;&#x4E09;&#x5341;&#x6761;&#x5E16;&#x5B50;&#xFF08;MongoDB&#xFF09;&#x3002;</p>
<p>&#x6392;&#x5E8F;&#x89C4;&#x5219;&#xFF1A;</p>
<ul>
<li>&#x5BF9;followers&#x8FDB;&#x884C;&#x6392;&#x5E8F;:
<ul>
<li>&#x59D3;&#x540D;&#x5347;&#x5E8F;&#x6392;&#x5217;</li>
<li>Profile image URL&#x5347;&#x5E8F;&#x6392;&#x5217;</li>
</ul>
</li>
<li>&#x5BF9;&#x6700;&#x65B0;30&#x7BC7;post&#x6392;&#x5E8F;&#xFF1A;
<ul>
<li>&#x6309;&#x7167;timestamp&#x5347;&#x5E8F;&#x6392;&#x5E8F;</li>
<li>&#x6309;&#x7167;PostID&#x5347;&#x5E8F;&#x6392;&#x5E8F;</li>
</ul>
</li>
</ul>
<p>&#x8BF7;&#x6C42;&#x683C;&#x5F0F;&#xFF1A;
<code>GET /task4?id=[UserID]</code></p>
<p>&#x54CD;&#x5E94;&#x683C;&#x5F0F;:
<code>{&quot;name&quot;:&quot;my_name&quot;, &quot;profile&quot;:&quot;my_profile_image_url&quot;, &quot;followers&quot;:[{&quot;name&quot;:&quot;follower_name_1&quot;, &quot;profile&quot;:&quot;profile_image_url_1&quot;}, {&quot;name&quot;:&quot;follower_name_2&quot;, &quot;profile&quot;:&quot;profile_image_url_2&quot;}, ...], &quot;posts&quot;:[{post1_json, post2_json, ...}]}</code></p>
<p><img src="http://i.imgur.com/EpRB33c.png" alt=""></p>
<h3 id="jian-dan-tui-jian-de-shi-xian">&#x7B80;&#x5355;&#x63A8;&#x8350;&#x7684;&#x5B9E;&#x73B0; <a href="#jian-dan-tui-jian-de-shi-xian" class="header-anchor">#</a></h3>
<p>&#x63A8;&#x8350;&#x7CFB;&#x7EDF;&#x7684;&#x5185;&#x5BB9;&#x592A;&#x591A;&#x4E86;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x770B;<a href="http://www.shuang0420.com/categories/Recommender-System/" target="_blank" rel="external">shaung&#x7684;&#x535A;&#x5BA2;</a>&#xFF08;&#x4E00;&#x4E2A;&#x5E7F;&#x544A;&#xFF09;
&#x8FD9;&#x6B21;&#x6211;&#x4EEC;&#x7528;&#x534F;&#x540C;&#x8FC7;&#x6EE4;&#x7B97;&#x6CD5;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x63A8;&#x8350;&#x7CFB;&#x7EDF;&#xFF0C;&#x5229;&#x7528;&#x201C;&#x670B;&#x53CB;&#x7684;&#x670B;&#x53CB;&#x201D;&#x6765;&#x63A8;&#x8350;&#x597D;&#x53CB;&#x3002;</p>
<h4 id="graph-distance">Graph Distance&#xFF1A; <a href="#graph-distance" class="header-anchor">#</a></h4>
<p>&#x6BD4;&#x5982;&#xFF1A;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A follows {B, C, D}</div><div class="line">Followee B follows {C, E, A}</div><div class="line">followee C follows {F, G}</div><div class="line">followee D follows {G, H}</div></pre></td></tr></table></figure></p>
<p><img src="http://i.imgur.com/83cuJ8G.png" alt="">
&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x4E0E;A&#x7684;&#x8DDD;&#x79BB;&#x5173;&#x7CFB;&#x4E3A;&#xFF1A;
<code>{A:1, C:1, E:1, F:1, G:2, H:1}</code>
&#x5176;&#x4E2D;&#x53BB;&#x6389;A&#x672C;&#x8EAB;&#xFF0C;&#x53BB;&#x6389;A&#x5DF2;&#x7ECF;&#x5173;&#x6CE8;&#x7684;C&#xFF0C;&#x5269;&#x4E0B;&#x7684;&#x5C31;&#x662F;
<code>{G: 2, E: 1, F: 1, H: 1}</code></p>
<h4 id="si-lu">&#x601D;&#x8DEF;&#xFF1A; <a href="#si-lu" class="header-anchor">#</a></h4>
<ul>
<li>&#x627E;&#x5230;userid&#x7684;&#x5173;&#x6CE8;&#x7684;&#x4EBA;&#x7684;&#x96C6;&#x5408;</li>
<li>&#x5C06;&#x5173;&#x6CE8;&#x7684;&#x4EBA;&#x7684;&#x96C6;&#x5408;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x4EBA;&#x5173;&#x6CE8;&#x7684;&#x4EBA;&#x6DFB;&#x52A0;&#x5230;&#x4FE1;&#x96C6;&#x5408;&#x4E2D;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x5219;&#x4E3A;1&#xFF0C;&#x4E4B;&#x540E;&#x7684;&#x4E3A;&#x539F;&#x6765;&#x7684;&#x52A0;1</li>
<li>&#x7528;&#x4F18;&#x5148;&#x961F;&#x5217;&#x5B58;&#x50A8;&#xFF0C;&#x6CE8;&#x610F;&#x7B2C;&#x4E00;&#x4E2A;&#x5173;&#x6CE8;&#x7684;&#x4EBA;&#x96C6;&#x5408;&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x90FD;&#x4E0D;&#x5E94;&#x8BE5;&#x5728;&#x6B64;&#x961F;&#x5217;&#x4E2D;</li>
<li>&#x8FD4;&#x56DE;&#x524D;&#x5341;&#x4E2A;&#x7684;name&#x548C;url&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;</li>
</ul>
<p>&#x8BF7;&#x6C42;&#x683C;&#x5F0F;&#xFF1A;
<code>http://backend-public-dns:8080/MiniSite/task5?id=&lt;user_id&gt;</code></p>
<p>&#x54CD;&#x5E94;&#x683C;&#x5F0F;(JSON)&#xFF1A;
<code>returnRes({&quot;recommendation&quot;:[{name:&lt;name1&gt;, profile:&lt;profile1&gt;},{name:&lt;name2&gt;, profile:&lt;profile2&gt;},...,{name:&lt;name10&gt;, profile:&lt;profile10&gt;]})</code></p>
<p>Done!</p>
<p>Reference&#xFF1A;
CMU15619&#x8BFE;&#x4EF6;&#xFF1A;<code>Social Networking Timeline with Heterogeneous Backends</code>
&#x5C0F;&#x571F;&#x5200;&#x535A;&#x5BA2;&#xFF1A;<code>http://wdxtub.com/vault/cc-17.html</code>
shaung&#x7684;&#x535A;&#x5BA2;&#xFF1A;`http://www.shuang0420.com/2016/07/05/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98--%E4%BA%91%E8%AE%A1%E7%AE%97Social%20Networking%20Timeline/``</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&amp;#x672C;&amp;#x6587;&amp;#x662F;&amp;#x5173;&amp;#x4E8E;CMU15619Cloud Computing&amp;#x9879;&amp;#x76EE;:&lt;code&gt;S
    
    </summary>
    
      <category term="CMU课程" scheme="http://yoursite.com/categories/CMU%E8%AF%BE%E7%A8%8B/"/>
    
      <category term="Cloud Computing" scheme="http://yoursite.com/categories/CMU%E8%AF%BE%E7%A8%8B/Cloud-Computing/"/>
    
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="Cloud Computing" scheme="http://yoursite.com/tags/Cloud-Computing/"/>
    
  </entry>
  
  <entry>
    <title>到达之前</title>
    <link href="http://yoursite.com/2017/02/22/%E5%9C%A8%E6%88%91%E5%88%B0%E8%BE%BE%E4%B9%8B%E5%89%8D/"/>
    <id>http://yoursite.com/2017/02/22/在我到达之前/</id>
    <published>2017-02-22T21:09:21.000Z</published>
    <updated>2017-02-22T21:17:31.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&lt;center&gt;<strong>2017-02-22</strong>&lt;/center&gt;
<em>Key Words</em>: <code>Broker Genius HR&#x9762;</code> <code>EXL HR&#x9762;</code></p>
<p>&lt;center&gt;<strong>2017-02-21</strong>&lt;/center&gt;</p>
<p><em>Key Words</em>: <code>Facebook&#x5185;&#x63A8;</code></p>
<p>&#x4ECA;&#x5929;&#x5927;&#x6982;&#x662F;&#x4E00;&#x4E2A;&#x5168;&#x65B0;&#x7684;&#x65E5;&#x5B50;&#x3002;&#x6211;&#x4E0D;&#x77E5;&#x9053;&#x4E4B;&#x540E;&#x4F1A;&#x4E0D;&#x4F1A;&#x4FDD;&#x6301;&#x8FD9;&#x6837;&#x7684;&#x706B;&#x529B;&#x7EE7;&#x7EED;&#x524D;&#x8FDB;&#xFF0C;&#x53C8;&#x6216;&#x8005;&#x6211;&#x4F1A;&#x4E0D;&#x505C;&#x8DCC;&#x5012;&#xFF0C;&#x4F46;&#x662F;&#x6CA1;&#x5173;&#x7CFB;&#x3002;</p>
<p>&#x4E24;&#x5468;&#x524D;&#xFF0C;&#x5F00;&#x59CB;&#x6B63;&#x5F0F;&#x6295;&#x51FA;&#x7B80;&#x5386;&#x3002;&#x6084;&#x65E0;&#x58F0;&#x606F;&#xFF0C;&#x6CA1;&#x6709;&#x4EBA;&#x7406;&#x776C;&#x3002;&#x6211;&#x65E0;&#x6570;&#x6B21;&#x6253;&#x5F00;&#x90AE;&#x7BB1;&#xFF0C;&#x5C31;&#x50CF;&#x662F;&#x65E0;&#x6570;&#x6B21;&#x548C;&#x4E00;&#x4E2A;&#x4E0D;&#x613F;&#x610F;&#x9762;&#x5BF9;&#x6211;&#x7684;&#x4EBA;&#x8BF4;&#x8BDD;&#x3002;&#x6211;&#x62B1;&#x6028;&#xFF0C;&#x6CA1;&#x6709;&#x9762;&#x8BD5;&#x3002;</p>
<p>&#x6628;&#x5929;&#x53D1;&#x73B0;linkedin&#x4E0A;&#x7684;frank&#x6765;CMU&#x62DB;&#x4EBA;&#xFF0C;&#x4ED6;&#x5728;FB&#xFF0C;&#x6C42;&#x4E86;&#x4E00;&#x4E2A;&#x5185;&#x63A8;&#x3002;&#x65E9;&#x4E0A;XD&#x54E5;&#x8BF4;&#x4ED6;&#x51FA;&#x5DEE;&#x5728;&#x5357;&#x901A;&#xFF0C;&#x548C;&#x6211;&#x804A;&#x4E86;&#x4E00;&#x4F1A;&#x513F;&#x3002;&#x201C;&#x4F60;&#x548C;&#x6211;&#x8BF4;&#x8BF4;&#xFF0C;&#x5DE5;&#x4F5C;&#x627E;&#x7684;&#x600E;&#x6837;&#x4E86;&#x3002;&#x201C;
&#x6211;&#x628A;&#x7B80;&#x5386;&#x53D1;&#x7ED9;&#x4ED6;&#xFF0C;&#x4ED6;&#x8BF4;&#x627E;&#x627E;&#x4EBA;&#x3002;&#x665A;&#x4E0A;&#x7ED9;&#x6211;&#x63A8;&#x4E86;&#x4E00;&#x4E2A;Google&#x3002;</p>
<p>&#x4E0B;&#x5348;&#x6536;&#x5230;&#x4E24;&#x4E2A;&#x9762;&#x8BD5;&#x7535;&#x8BDD;&#x3002;
&#x660E;&#x5929;&#xFF0C;&#x5C06;&#x6709;&#x4E24;&#x573A;&#x9762;&#x8BD5;&#x3002;</p>
<p>&#x4E00;&#x5207;&#x90FD;&#x5F00;&#x59CB;&#x4E86;&#x3002;&#x6211;&#x4E0D;&#x80FD;&#x61C8;&#x6020;&#xFF0C;&#x4E0D;&#x80FD;&#x653E;&#x5F03;&#xFF0C;&#x4E0D;&#x80FD;&#x968F;&#x610F;&#x3002;</p>
<p>&#x8FD9;&#x573A;&#x6218;&#x4E89;&#xFF0C;&#x904D;&#x4F53;&#x9CDE;&#x4F24;&#x4E5F;&#x8981;&#x8D62;&#xFF0C;&#x4E5F;&#x8981;&#x8D62;&#x5F97;&#x6F02;&#x4EAE;&#x3002;</p>
<p>&#x5176;&#x5B9E;&#x65E9;&#x4E0A;&#x7279;&#x522B;&#x611F;&#x52A8;&#xFF0C;XD&#x54E5;&#x65E0;&#x8BBA;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x90FD;&#x5728;support&#x6211;&#xFF0C;&#x53EF;&#x662F;&#x6211;&#x5374;&#x505A;&#x4E0D;&#x5230;support&#x4ED6;&#xFF0C;&#x6211;&#x77E5;&#x9053;&#x90A3;&#x4E9B;&#x65F6;&#x523B;&#x4ED6;&#x662F;&#x4E00;&#x4E2A;&#x4EBA;&#x633A;&#x8FC7;&#x6765;&#x7684;&#x3002;&#x4ED6;&#x662F;&#x6761;&#x6C49;&#x5B50;&#xFF0C;&#x9664;&#x4E86;&#x4ED6;&#x6211;&#x6CA1;&#x89C1;&#x8FC7;&#x8FD9;&#x4E48;&#x6C49;&#x5B50;&#x7684;&#x4EBA;&#x3002;&#x6211;&#x7231;&#x4ED6;&#x3002;</p>
<p>&#x751F;&#x547D;&#x91CC;&#x6709;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x4EBA;&#xFF0C;&#x771F;&#x7684;&#x5F88;&#x503C;&#x5F97;&#x3002;</p>
<p>&#x6211;&#x6709;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E5F;&#x60F3;&#xFF0C;&#x81EA;&#x5DF1;&#x80FD;&#x4E0D;&#x80FD;&#x8DF3;&#x51FA;&#x81EA;&#x5DF1;&#x7684;&#x5C0F;&#x4E16;&#x754C;&#xFF0C;&#x6210;&#x4E3A;&#x522B;&#x4EBA;&#x575A;&#x5F3A;&#x7684;&#x540E;&#x76FE;&#xFF0C;&#x7238;&#x7238;&#x5988;&#x5988;&#xFF0C;&#x5916;&#x516C;&#x5916;&#x5A46;&#xFF0C;&#x6211;&#x7684;&#x670B;&#x53CB;&#x4EEC;&#xFF0C;&#x4ED6;&#x4EEC;&#x90FD;&#x9700;&#x8981;&#x6211;&#x3002;</p>
<p>&#x6211;&#x6765;&#x4E0D;&#x53CA;&#x6162;&#x6162;&#x6210;&#x957F;&#x4E86;&#x3002;&#x6765;&#x4E0D;&#x53CA;&#x4E86;&#x3002;&#x6211;&#x5FC5;&#x987B;&#x9A6C;&#x4E0A;&#x957F;&#x5927;&#xFF0C;&#x5FEB;&#x901F;&#x5730;&#x53BB;&#x672A;&#x6765;&#x3002;</p>
]]></content>
    
    <summary type="html">
    
      此文章需要密码访问
    
    </summary>
    
    
      <category term="Career" scheme="http://yoursite.com/tags/Career/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 252. Meeting Rooms I</title>
    <link href="http://yoursite.com/2017/02/20/Leetcode-252-Meeting-Rooms-I/"/>
    <id>http://yoursite.com/2017/02/20/Leetcode-252-Meeting-Rooms-I/</id>
    <published>2017-02-21T01:24:16.000Z</published>
    <updated>2017-02-22T21:08:10.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question: <a href="#question" class="header-anchor">#</a></h3>
<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &lt; ei), determine if a person could attend all meetings.</p>
<p>For example,
Given [[0, 30],[5, 10],[15, 20]],
return false.</p>
<h3 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h3>
<p>&#x5148;&#x6309;&#x7167;start time&#x6392;&#x5E8F;&#xFF0C;&#x53EA;&#x8981;&#x6BCF;&#x4E00;&#x4E2A;end time&#x90FD;&#x6BD4;&#x4E0B;&#x4E00;&#x4E2A;start time&#x5C0F;&#xFF0C;&#x5373;&#x53EF;&#x884C;&#x3002;</p>
<h3 id="code">Code: <a href="#code" class="header-anchor">#</a></h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval {</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() { start = 0; end = 0; }</div><div class="line"> *     Interval(int s, int e) { start = s; end = e; }</div><div class="line"> * }</div><div class="line"> */</div><div class="line">public class Solution {</div><div class="line">    public boolean canAttendMeetings(Interval[] intervals) {</div><div class="line">       Arrays.sort(intervals, new Comparator&lt;Interval&gt;(){</div><div class="line">            public int compare(Interval i1, Interval i2) {</div><div class="line">                return i1.start - i2.start;</div><div class="line">            }</div><div class="line">        });</div><div class="line">        for(int i=0; i&lt;intervals.length-1; i++) {</div><div class="line">            if (intervals[i].end &gt; intervals[i+1].start) {</div><div class="line">                return false;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        return true;</div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question: &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given 
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
      <category term="Facebook" scheme="http://yoursite.com/tags/Facebook/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 253. Meeting Rooms II</title>
    <link href="http://yoursite.com/2017/02/20/Leetcode-253-Meeting-Rooms/"/>
    <id>http://yoursite.com/2017/02/20/Leetcode-253-Meeting-Rooms/</id>
    <published>2017-02-21T01:21:53.000Z</published>
    <updated>2017-02-21T03:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x672C;&#x9898;&#x7684;&#x7B80;&#x5355;&#x7248;&#x672C;&#x662F;<a href="http://starllap.space/2017/02/20/Leetcode-252-Meeting-Rooms-I/" target="_blank" rel="external">Meeting Rooms I</a></p>
<h3 id="question">Question: <a href="#question" class="header-anchor">#</a></h3>
<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &lt; ei), find the minimum number of conference rooms required.</p>
<p>For example,
Given [[0, 30],[5, 10],[15, 20]],
return 2.</p>
<h3 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h3>
<p>&#x5148;&#x5BF9;start sort&#xFF0C;&#x7528;heap&#x5B58;end&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x6309;&#x7167;end&#x4E5F;sort&#x4E00;&#x904D;&#xFF0C;&#x4E4B;&#x540E;&#x4E0E;&#x6700;&#x5FEB;&#x7ED3;&#x675F;&#x7684;meeting&#x5BF9;&#x6BD4;&#xFF0C;&#x5982;&#x679C;start time&#x6BD4;&#x6700;&#x5FEB;&#x7ED3;&#x675F;&#x7684;&#x8981;&#x5C0F;&#xFF0C;&#x5219;&#x53E6;&#x5F00;&#x4E00;&#x95F4;&#x623F;&#x95F4;&#x3002;
&#x5148;&#x5F00;&#x59CB;&#x6211;&#x7528;&#x4E86;&#x4E24;&#x6B21;&#x5FAA;&#x73AF;&#xFF0C;TLE&#x4E86;&#x3002;&#x7528;Heap&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x9519;&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x5176;&#x5B9E;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x6307;&#x9488;&#x3002;&#x76F4;&#x63A5;&#x8D34;&#x4E00;&#x4E2A;<a href="https://discuss.leetcode.com/topic/20958/ac-java-solution-using-min-heap" target="_blank" rel="external">&#x6807;&#x51C6;&#x7B54;&#x6848;</a>&#x3002;</p>
<h3 id="code">Code: <a href="#code" class="header-anchor">#</a></h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval {</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() { start = 0; end = 0; }</div><div class="line"> *     Interval(int s, int e) { start = s; end = e; }</div><div class="line"> * }</div><div class="line"> */</div><div class="line">public class Solution {</div><div class="line">public int minMeetingRooms(Interval[] intervals) {</div><div class="line">    if (intervals == null || intervals.length == 0)</div><div class="line">        return 0;</div><div class="line"></div><div class="line">    // Sort the intervals by start time</div><div class="line">    Arrays.sort(intervals, new Comparator&lt;Interval&gt;() {</div><div class="line">        public int compare(Interval a, Interval b) { return a.start - b.start; }</div><div class="line">    });</div><div class="line"></div><div class="line">    // Use a min heap to track the minimum end time of merged intervals</div><div class="line">    PriorityQueue&lt;Interval&gt; heap = new PriorityQueue&lt;Interval&gt;(intervals.length, new Comparator&lt;Interval&gt;() {</div><div class="line">        public int compare(Interval a, Interval b) { return a.end - b.end; }</div><div class="line">    });</div><div class="line"></div><div class="line">    // start with the first meeting, put it to a meeting room</div><div class="line">    heap.offer(intervals[0]);</div><div class="line"></div><div class="line">    for (int i = 1; i &lt; intervals.length; i++) {</div><div class="line">        // get the meeting room that finishes earliest</div><div class="line">        Interval interval = heap.poll();</div><div class="line"></div><div class="line">        if (intervals[i].start &gt;= interval.end) {</div><div class="line">            // if the current meeting starts right after</div><div class="line">            // there&apos;s no need for a new room, merge the interval</div><div class="line">            interval.end = intervals[i].end;</div><div class="line">        } else {</div><div class="line">            // otherwise, this meeting needs a new room</div><div class="line">            heap.offer(intervals[i]);</div><div class="line">        }</div><div class="line"></div><div class="line">        // don&apos;t forget to put the meeting room back</div><div class="line">        heap.offer(interval);</div><div class="line">    }</div><div class="line"></div><div class="line">    return heap.size();</div><div class="line">}</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&amp;#x672C;&amp;#x9898;&amp;#x7684;&amp;#x7B80;&amp;#x5355;&amp;#x7248;&amp;#x672C;&amp;#x662F;&lt;a href=&quot;http://starlla
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 294. Flip GameII</title>
    <link href="http://yoursite.com/2017/02/20/Leetcode-294-Flip-GameII/"/>
    <id>http://yoursite.com/2017/02/20/Leetcode-294-Flip-GameII/</id>
    <published>2017-02-20T18:26:34.000Z</published>
    <updated>2017-02-20T20:07:14.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive &quot;++&quot; into &quot;--&quot;. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>
<p>Write a function to determine if the starting player can guarantee a win.</p>
<p>For example, given s = &quot;++++&quot;, return true. The starting player can guarantee a win by flipping the middle &quot;++&quot; to become &quot;+--+&quot;.</p>
<p>Follow up:
Derive your algorithm&apos;s runtime complexity.</p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x672C;&#x6765;&#x60F3;&#x627E;&#x89C4;&#x5F8B;&#xFF0C;&#x540E;&#x6765;&#x60F3;&#x60F3;&#x592A;&#x5929;&#x771F;&#x4E86;&#x3002;&#x7528;backtracking&#x89E3;&#xFF0C;&#x7F57;&#x5217;&#x6240;&#x6709;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5982;&#x679C;&#x4E0B;&#x4E00;&#x5C40;&#x5BF9;&#x624B;&#x4F1A;&#x8F93;&#xFF0C;&#x5C31;&#x8868;&#x793A;&#x53EF;&#x4EE5;&#x3002;&#x73B0;&#x5728;&#x6211;&#x7684;&#x7B97;&#x6CD5;&#x662F;o(N!!)
discuss&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x725B;&#x903C;&#x7684;game theory&#x535A;&#x5F08;&#x8BBA;&#x7B97;&#x6CD5;&#xFF0C;&#x770B;&#x4E0D;&#x61C2;&#x3002;&#x6709;&#x673A;&#x4F1A;&#x53EF;&#x4EE5;&#x7814;&#x7A76;&#x4E00;&#x4E0B;&#xFF0C;&#x4F1A;&#x5C06;time complexity&#x964D;&#x4F4E;&#x5230;O(N^2)</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Solution {</div><div class="line">    public boolean canWin(String s) {</div><div class="line">        if (s == null || s.length() &lt;2) return false;</div><div class="line">        char[] charString = s.toCharArray();</div><div class="line">        for (int i=0; i&lt;s.length()-1; i++) {</div><div class="line"></div><div class="line">            if (charString[i] == &apos;+&apos; &amp;&amp; charString[i+1] == &apos;+&apos;) {</div><div class="line">                charString[i] = &apos;-&apos;;</div><div class="line">                charString[i+1] = &apos;-&apos;;</div><div class="line">                if (!canWin(String.valueOf(charString))) {</div><div class="line">                    return true;</div><div class="line">                }</div><div class="line">                charString[i] = &apos;+&apos;; charString[i+1] = &apos;+&apos;;</div><div class="line"></div><div class="line">            }</div><div class="line"></div><div class="line">        }</div><div class="line">        return false;</div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question: &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You ar
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 380. Insert Delete GetRandom O(1)</title>
    <link href="http://yoursite.com/2017/02/19/Leetcode-380-Insert-Delete-GetRandom-O-1/"/>
    <id>http://yoursite.com/2017/02/19/Leetcode-380-Insert-Delete-GetRandom-O-1/</id>
    <published>2017-02-19T20:57:07.000Z</published>
    <updated>2017-02-19T21:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question: <a href="#question" class="header-anchor">#</a></h3>
<p>Design a data structure that supports all following operations in average O(1) time.</p>
<p>insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// Init an empty set.</div><div class="line">RandomizedSet randomSet = new RandomizedSet();</div><div class="line"></div><div class="line">// Inserts 1 to the set. Returns true as 1 was inserted successfully.</div><div class="line">randomSet.insert(1);</div><div class="line"></div><div class="line">// Returns false as 2 does not exist in the set.</div><div class="line">randomSet.remove(2);</div><div class="line"></div><div class="line">// Inserts 2 to the set, returns true. Set now contains [1,2].</div><div class="line">randomSet.insert(2);</div><div class="line"></div><div class="line">// getRandom should return either 1 or 2 randomly.</div><div class="line">randomSet.getRandom();</div><div class="line"></div><div class="line">// Removes 1 from the set, returns true. Set now contains [2].</div><div class="line">randomSet.remove(1);</div><div class="line"></div><div class="line">// 2 was already in the set, so return false.</div><div class="line">randomSet.insert(2);</div><div class="line"></div><div class="line">// Since 2 is the only number in the set, getRandom always return 2.</div><div class="line">randomSet.getRandom();</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h3>
<p>&#x5F88;&#x795E;&#x5947;&#x7684;&#x4E00;&#x9053;&#x9898;&#xFF0C;&#x56E0;&#x4E3A;&#x9700;&#x8981;&#x6BCF;&#x4E2A;&#x64CD;&#x4F5C;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x5E73;&#x5747;&#x4E3A;O(1),&#x6700;&#x521D;&#x6211;&#x53EA;&#x7528;&#x4E86;&#x4E00;&#x4E2A;Arraylist&#x5B58;&#x4E5F;AC&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x65F6;&#x95F4;&#x5F88;&#x4E45;&#xFF0C;&#x56E0;&#x4E3A;remove&#x7684;&#x65F6;&#x5019;&#x4E0D;&#x662F;O(1).&#x6362;&#x4E86;Hashmap&#x5B58;index&#xFF0C;&#x5FEB;&#x4E00;&#x4E9B;&#x3002;&#x4F46;&#x662F;&#x8981;&#x6CE8;&#x610F;&#xFF0C;remove&#x90A3;&#x8FB9;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;count--&#xFF0C;&#x9700;&#x8981;&#x548C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x503C;&#x8C03;&#x6362;&#xFF0C;&#x8FD9;&#x6837;&#x4FDD;&#x8BC1;&#x5176;&#x4ED6;&#x7684;index&#x4E0D;&#x53D8;&#xFF0C;&#x53EA;&#x51CF;&#x5C11;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x3002;A little tricky
&#x603B;&#x800C;&#x8A00;&#x4E4B;&#xFF0C;&#x7B97;&#x6CD5;&#x8BBE;&#x8BA1;&#x8FD8;&#x662F;&#x86EE;&#x6709;&#x8DA3;&#x7684;&#xFF0C;&#x597D;&#x597D;&#x60F3;&#x60F3;&#x3002;</p>
<h3 id="code">Code: <a href="#code" class="header-anchor">#</a></h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public class RandomizedSet {</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    int count;</div><div class="line">    public RandomizedSet() {</div><div class="line">        count = 0;</div><div class="line">    }</div><div class="line"></div><div class="line">    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</div><div class="line">    public boolean insert(int val) {</div><div class="line">        if(map.containsKey(val)) {</div><div class="line">            return false;</div><div class="line">        }</div><div class="line">        map.put(val,count);</div><div class="line">        list.add(val);</div><div class="line">        count=map.size();</div><div class="line">        // System.out.println(list);</div><div class="line">        return true;</div><div class="line"></div><div class="line">    }</div><div class="line"></div><div class="line">    /** Removes a value from the set. Returns true if the set contained the specified element. */</div><div class="line">    public boolean remove(int val) {</div><div class="line">        if (map.containsKey(val)) {</div><div class="line">            int index = map.get(val);</div><div class="line">            // change the index with the last one if it is not the last one;</div><div class="line">            if (index &lt; list.size()-1) {</div><div class="line">                int lastone = list.get(list.size()-1);</div><div class="line">                list.set(index, lastone);</div><div class="line">                map.put(lastone,index);</div><div class="line">            }</div><div class="line">            map.remove(val);</div><div class="line">            list.remove(list.size()-1);</div><div class="line">            return true;</div><div class="line">        }</div><div class="line"></div><div class="line">        return false;</div><div class="line"></div><div class="line">    }</div><div class="line"></div><div class="line">    /** Get a random element from the set. */</div><div class="line">    public int getRandom() {</div><div class="line">        int r =(int)(Math.random()*list.size());</div><div class="line">        // System.out.println(r);</div><div class="line">        return list.get(r);</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">/**</div><div class="line"> * Your RandomizedSet object will be instantiated and called as such:</div><div class="line"> * RandomizedSet obj = new RandomizedSet();</div><div class="line"> * boolean param_1 = obj.insert(val);</div><div class="line"> * boolean param_2 = obj.remove(val);</div><div class="line"> * int param_3 = obj.getRandom();</div><div class="line"> */</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question: &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Design
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Design" scheme="http://yoursite.com/tags/Design/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 331. Verify Preorder Serialization of a Binary Tree</title>
    <link href="http://yoursite.com/2017/02/19/Leetcode-331-Verify-Preorder-Serialization-of-a-Binary-Tree/"/>
    <id>http://yoursite.com/2017/02/19/Leetcode-331-Verify-Preorder-Serialization-of-a-Binary-Tree/</id>
    <published>2017-02-19T19:04:07.000Z</published>
    <updated>2017-02-19T19:11:25.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question: <a href="#question" class="header-anchor">#</a></h3>
<p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node&apos;s value. If it is a null node, we record using a sentinel value such as #.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">     _9_</div><div class="line">    /   \</div><div class="line">   3     2</div><div class="line">  / \   / \</div><div class="line"> 4   1  #  6</div><div class="line">/ \ / \   / \</div><div class="line"># # # #   # #</div></pre></td></tr></table></figure></p>
<p>For example, the above binary tree can be serialized to the string &quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;, where # represents a null node.</p>
<p>Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.</p>
<p>Each comma separated value in the string must be either an integer or a character &apos;#&apos; representing null pointer.</p>
<p>You may assume that the input format is always valid, for example it could never contain two consecutive commas such as &quot;1,,3&quot;.</p>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</div></pre></td></tr></table></figure></p>
<p>Return true</p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;1,#&quot;</div></pre></td></tr></table></figure></p>
<p>Return false</p>
<p>Example 3:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;9,#,#,1&quot;</div></pre></td></tr></table></figure></p>
<p>Return false</p>
<h3 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h3>
<p>&#x8BE5;&#x600E;&#x4E48;&#x8BF4;&#x5462;&#xFF0C;&#x5C31;&#x662F;&#x60F3;&#x7834;&#x8111;&#x888B;&#x624D;&#x60F3;&#x5230;stack&#x505A;&#xFF0C;&#x518D;&#x7136;&#x540E;&#x8C03;&#x4E86;&#x534A;&#x5929;bug&#x3002;&#x5982;&#x679C;&#x9047;&#x5230;#&#xFF0C;&#x53BB;&#x68C0;&#x67E5;&#x662F;&#x4E0D;&#x662F;stack&#x91CC;&#x9762;&#x6709;&#x4E00;&#x4E2A;#&#x548C;&#x4E00;&#x4E2A;&#x963F;&#x62C9;&#x4F2F;&#x6570;&#x5B57;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x7684;&#x8BDD;&#xFF0C;&#x5168;&#x90E8;&#x66FF;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x201C;#&#x201D;&#xFF0C;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#x7ED3;&#x675F;&#x3002;&#x6700;&#x540E;&#x5224;&#x65AD;&#x662F;&#x4E0D;&#x662F;stack&#x91CC;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x201C;#&#x201D;&#x8868;&#x793A;&#x7684;&#x6839;&#x8282;&#x70B9;&#x3002;</p>
<h3 id="code">Code: <a href="#code" class="header-anchor">#</a></h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution {</div><div class="line">    public boolean isValidSerialization(String preorder) {</div><div class="line">        Stack&lt;String&gt; stack = new Stack&lt;&gt;();</div><div class="line">        String[] nodes = preorder.split(&quot;,&quot;);</div><div class="line">        for(String s: nodes) {</div><div class="line">            while (!stack.isEmpty() &amp;&amp; stack.peek().equals(&quot;#&quot;)) {</div><div class="line">                if (s.equals(&quot;#&quot;)) {</div><div class="line">                    stack.pop();</div><div class="line">                    if (!stack.empty() &amp;&amp; !stack.peek().equals(&quot;#&quot;)) {</div><div class="line">                        stack.pop();</div><div class="line">                    }else {</div><div class="line">                        stack.push(&quot;#&quot;);</div><div class="line">                        break;</div><div class="line">                    }</div><div class="line">                } else {</div><div class="line">                    break;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            stack.push(s);</div><div class="line">        }</div><div class="line">        return stack.size() == 1 &amp;&amp; stack.peek().equals(&quot;#&quot;);</div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question: &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One wa
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 289. Game of Life</title>
    <link href="http://yoursite.com/2017/02/19/Leetcode-289-Game-of-Life/"/>
    <id>http://yoursite.com/2017/02/19/Leetcode-289-Game-of-Life/</id>
    <published>2017-02-19T17:33:41.000Z</published>
    <updated>2017-02-19T18:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>According to the Wikipedia&apos;s article: &quot;The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&quot;</p>
<p>Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p>
<p>Any live cell with fewer than two live neighbors dies, as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population..
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
Write a function to compute the next state (after one update) of the board given its current state.</p>
<p>Follow up:
Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x4F9D;&#x6B21;&#x904D;&#x5386;matrix&#xFF0C;&#x5224;&#x65AD;&#x5468;&#x56F4;&#x516B;&#x4E2A;&#x65B9;&#x5411;&#x603B;&#x548C;&#xFF0C;&#x5982;&#x679C;&#x4E4B;&#x540E;&#x662F;live&#xFF0C;&#x5C31;&#x8BBE;&#x7F6E;&#x4E3A;3&#xFF0C;&#x5426;&#x5219;&#x8BBE;&#x7F6E;&#x4E3A;2&#x3002;&#x6700;&#x540E;&#x518D;&#x904D;&#x5386;&#x4E00;&#x6B21;&#xFF0C;&#x6539;&#x6210;0&#x6216;&#x8005;1&#x3002;
&#x611F;&#x89C9;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x8003;&#x70B9;&#x662F;in place&#xFF0C;&#x5176;&#x4ED6;&#x7684;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#xFF0C;&#x904D;&#x5386;&#x6CA1;&#x6709;&#x8BA8;&#x5DE7;&#x7684;&#x65B9;&#x6CD5;&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class Solution {</div><div class="line">    public void gameOfLife(int[][] board) {</div><div class="line">        if (board == null || board.length == 0) return;</div><div class="line">        int m = board.length; int n = board[0].length;</div><div class="line">        for (int i=0; i&lt;board.length; ++i) {</div><div class="line">            for (int j = 0; j &lt; board[0].length; ++j) {</div><div class="line">                int sum = sumHelper(board, i, j, m, n);</div><div class="line">                if(board[i][j]==0 &amp;&amp; sum==3) board[i][j]=3;</div><div class="line">                if(board[i][j]==1 &amp;&amp; (sum&lt;2 || sum&gt;3)) board[i][j]=2;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        for (int i=0; i&lt;board.length; i++) {</div><div class="line">            for (int j = 0; j &lt; board[0].length; j++) {</div><div class="line">                board[i][j]%=2;</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">    }</div><div class="line"></div><div class="line">    public int sumHelper(int[][] board, int i, int j, int m, int n) {</div><div class="line">        int sum = 0;</div><div class="line">        for (int x = Math.max(i-1, 0); x&lt;=Math.min(i+1, m-1); ++x) {</div><div class="line">            for (int y = Math.max(j-1,0); y&lt;=Math.min(j+1,n-1); ++y) {</div><div class="line">                if (board[x][y] == 2 || board[x][y] == 1) {</div><div class="line">                    sum += 1;</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        sum -= board[i][j];</div><div class="line">        return sum;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question: &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Accord
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Matrix" scheme="http://yoursite.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 298. Binary Tree Longest Consecutive Sequence</title>
    <link href="http://yoursite.com/2017/02/18/LeetCode-298-Binary-Tree-Longest-Consecutive-Sequence/"/>
    <id>http://yoursite.com/2017/02/18/LeetCode-298-Binary-Tree-Longest-Consecutive-Sequence/</id>
    <published>2017-02-19T01:42:10.000Z</published>
    <updated>2017-02-19T01:45:13.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given a binary tree, find the length of the longest consecutive sequence path.</p>
<p>The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">For example,</div><div class="line">   1</div><div class="line">    \</div><div class="line">     3</div><div class="line">    / \</div><div class="line">   2   4</div><div class="line">        \</div><div class="line">         5</div><div class="line">Longest consecutive sequence path is 3-4-5, so return 3.</div><div class="line">   2</div><div class="line">    \</div><div class="line">     3</div><div class="line">    /</div><div class="line">   2</div><div class="line">  /</div><div class="line"> 1</div><div class="line">Longest consecutive sequence path is 2-3,not3-2-1, so return 2.</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x9012;&#x5F52;&#x3002;&#x60F3;&#x6E05;&#x695A;base case&#x548C;&#x9012;&#x5F52;&#x7684;&#x6A21;&#x5F0F;&#x5373;&#x53EF;&#x3002;&#x5DE6;&#x53F3;&#x503C;&#xFF0C;&#x4EE5;&#x53CA;&#x5F53;&#x524D;&#x503C;&#xFF0C;&#x4E0D;&#x8981;&#x6DF7;&#x6DC6;&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Solution {</div><div class="line">    public int longestConsecutive(TreeNode root) {</div><div class="line">        return (root==null)?0:Math.max(Helper(root.left,1,root.val), Helper(root.right, 1, root.val));</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    public int Helper(TreeNode root, int count, int val) {</div><div class="line">        if (root == null) return count;</div><div class="line">        count = (root.val - val == 1) ? count+1:1;</div><div class="line">        int leftCount = Helper(root.left, count, root.val);</div><div class="line">        int rightCount = Helper(root.right, count, root.val);</div><div class="line">        return Math.max(count, Math.max(leftCount, rightCount));</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question: &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Given 
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 2Sum/3sum/4sum及其各种变体</title>
    <link href="http://yoursite.com/2017/02/16/Leetcode-Two-Sum-Three-Sum-and-their-variations/"/>
    <id>http://yoursite.com/2017/02/16/Leetcode-Two-Sum-Three-Sum-and-their-variations/</id>
    <published>2017-02-17T03:13:10.000Z</published>
    <updated>2017-02-18T19:06:57.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x7ECF;&#x5178;&#x7684;2sum&#xFF0C;3sum&#xFF0C;4sum&#x6781;&#x5176;&#x53D8;&#x4F53;&#x9898;&#x76EE;&#x603B;&#x7ED3;&#xFF0C;&#x9700;&#x8981;&#x719F;&#x8BB0;&#x3002;</p>
<h3 id="leetcode-1-two-sum">Leetcode 1. Two Sum <a href="#leetcode-1-two-sum" class="header-anchor">#</a></h3>
<h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<p>Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Given nums = [2, 7, 11, 15], target = 9,</div><div class="line"></div><div class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</div><div class="line">return [0, 1].</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x7528;HashMap&#x5B58;&#x5DEE;&#x503C;&#xFF0C;&#x5982;&#x679C;&#x4E4B;&#x540E;&#x627E;&#x5230;&#x4E86;&#x7ACB;&#x5373;&#x8FD4;&#x56DE;&#x4E24;&#x4E2A;index&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int[] twoSum(int[] nums, int target) {</div><div class="line">    int[] result = new int[2];</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    for (int i=0; i&lt;nums.length; i++) {</div><div class="line">        int minus = target - nums[i];</div><div class="line">        if (map.containsKey(nums[i])) {</div><div class="line">            result[1] = i;</div><div class="line">            result[0] = map.get(nums[i]);</div><div class="line">            break;</div><div class="line">        } else {</div><div class="line">            map.put(minus, i);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    return result;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-167-two-sum-ii-input-array-is-sorted">Leetcode 167. Two Sum II - Input array is sorted <a href="#leetcode-167-two-sum-ii-input-array-is-sorted" class="header-anchor">#</a></h3>
<h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>
<p>Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2</p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>Array&#x662F;sorted&#xFF0C;&#x6240;&#x4EE5;&#x7528;&#x4E24;&#x6307;&#x9488;&#xFF0C;&#x627E;&#x5230;&#x7B26;&#x5408;&#x6761;&#x4EF6;&#x7684;&#x4E24;&#x4E2A;index&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public int[] twoSum(int[] num, int target) {</div><div class="line">    int[] result = new int[2];</div><div class="line">    int left = 0;</div><div class="line">    int right = num.length - 1;</div><div class="line">    while (left &lt; right) {</div><div class="line">        int sum = num[left]+num[right];</div><div class="line">        if (sum == target) {</div><div class="line">            result[0] = left + 1;</div><div class="line">            result[1] = right + 1;</div><div class="line">            break;</div><div class="line">        }</div><div class="line">        else if (sum &lt; target) {</div><div class="line">            left++;</div><div class="line">        } else {</div><div class="line">            right--;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    return result;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-170-two-sum-iii-data-structure-design">Leetcode 170. Two Sum III - Data structure design <a href="#leetcode-170-two-sum-iii-data-structure-design" class="header-anchor">#</a></h3>
<h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Design and implement a TwoSum class. It should support the following operations: add and find.</p>
<p>add - Add the number to an internal data structure.
find - Find if there exists any pair of numbers which sum is equal to the value.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">For example,</div><div class="line">add(1); add(3); add(5);</div><div class="line">find(4) -&gt; true</div><div class="line">find(7) -&gt; false</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x4E00;&#x9053;&#x5178;&#x578B;&#x7684;Trade off&#xFF0C; &#x5982;&#x679C;&#x8981;add&#x4E3A;O(n), &#x5219;find&#x4E3A; o(1),&#x53CD;&#x4E4B;&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class TwoSum {</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    public TwoSum() {</div><div class="line">    }</div><div class="line"></div><div class="line">    /** Add the number to an internal data structure.. */</div><div class="line">    public void add(int number) {</div><div class="line">        if (map.containsKey(number)) {</div><div class="line">            map.put(number, map.get(number)+1);</div><div class="line">        } else {</div><div class="line">            map.put(number, 1);</div><div class="line">        }</div><div class="line"></div><div class="line"></div><div class="line">    }</div><div class="line"></div><div class="line">    /** Find if there exists any pair of numbers which sum is equal to the value. */</div><div class="line">    public boolean find(int value) {</div><div class="line">        for (int n:map.keySet()) {</div><div class="line">            int minus = value -n;</div><div class="line">            if (map.containsKey(minus)) {</div><div class="line">                if (minus == n &amp;&amp; map.get(n) &gt; 1) return true;</div><div class="line">                if (minus != n) return true;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        return false;</div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-15-3sum">Leetcode 15. 3Sum <a href="#leetcode-15-3sum" class="header-anchor">#</a></h3>
<h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>
<p>Note: The solution set must not contain duplicate triplets.</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">For example, given array S = [-1, 0, 1, 2, -1, -4],</div><div class="line"></div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x5148;&#x6392;&#x5E8F;&#xFF0C;&#x904D;&#x5386;&#x5176;&#x4E2D;&#x6BCF;&#x4E2A;&#x503C;&#xFF0C;&#x627E;&#x5230;target&#x51CF;&#x53BB;&#x540E;&#x7684;&#x503C;&#xFF0C;&#x6309;&#x7167;two sum in sorted&#x6765;&#x505A;&#x5C31;&#x884C;&#x4E86;&#x3002;&#x8981;&#x6CE8;&#x610F;skip&#x76F8;&#x540C;&#x503C;&#xFF0C;&#x4E0D;&#x80FD;&#x91CD;&#x590D;&#x653E;&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Solution {</div><div class="line">public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();</div><div class="line">    Arrays.sort(nums);</div><div class="line">    for (int i=0; i&lt;nums.length-2; i++) {</div><div class="line">        if (i&gt;0 &amp;&amp; nums[i] == nums[i-1]) continue;</div><div class="line">        int twoSum = 0 - nums[i];</div><div class="line">        int left = i+1;</div><div class="line">        int right = nums.length-1;</div><div class="line">        while (left &lt; right) {</div><div class="line">            if (nums[left] + nums[right] == twoSum) {</div><div class="line">                result.add(Arrays.asList(nums[i], nums[left], nums[right]));</div><div class="line">                // skip the same ones</div><div class="line">                while (left &lt; right &amp;&amp; nums[left] == nums[left+1]) left ++;</div><div class="line">                while (left &lt; right &amp;&amp; nums[right] == nums[right-1]) right --;</div><div class="line">                left++; right--;</div><div class="line">            }</div><div class="line">            else if (nums[left] + nums[right] &lt; twoSum) {</div><div class="line">                left ++;</div><div class="line">            } else {</div><div class="line">                right --;</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">    }</div><div class="line">    return result;</div><div class="line">}</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-16-3sum-closest">Leetcode 16. 3Sum Closest <a href="#leetcode-16-3sum-closest" class="header-anchor">#</a></h3>
<h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">For example, given array S = {-1 2 1 -4}, and target = 1.</div><div class="line"></div><div class="line">The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x540C;&#x6837;&#x7684;&#x7528;3sum&#x7684;&#x65B9;&#x6CD5;&#x505A;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x8981;&#x591A;&#x4E00;&#x4E2A;&#x503C;&#x6765;&#x5B58;&#x50A8;&#x6700;&#x5C0F;&#x7684;diff&#x548C;&#x6700;&#x9760;&#x8FD1;&#x7684;sum&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Solution {</div><div class="line">    public int threeSumClosest(int[] nums, int target) {</div><div class="line">        int closest = target;</div><div class="line">        int minDiff = Integer.MAX_VALUE;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        for (int i=0; i&lt;nums.length-2; i++) {</div><div class="line">            int left = i+1; int right = nums.length-1;</div><div class="line">            int twoSum = target - nums[i];</div><div class="line">            System.out.println(closest);</div><div class="line">            while (left &lt; right) {</div><div class="line">                int sum = nums[left] + nums[right];</div><div class="line">                // if equal target, just return. Else find out the closest sum.</div><div class="line">                if (twoSum == sum) {</div><div class="line">                    return target;</div><div class="line">                } else{</div><div class="line">                    if (Math.abs(twoSum - sum) &lt; minDiff) {</div><div class="line">                        minDiff = Math.abs(twoSum - sum);</div><div class="line">                        closest = sum+nums[i];</div><div class="line">                    }</div><div class="line">                    if (twoSum &lt; sum) right--;</div><div class="line">                    else left++;</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        return closest;</div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-259-3sum-smaller">Leetcode 259. 3Sum Smaller <a href="#leetcode-259-3sum-smaller" class="header-anchor">#</a></h3>
<h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 &lt;= i &lt; j &lt; k &lt; n that satisfy the condition nums[i] + nums[j] + nums[k] &lt; target.</p>
<p>For example, given nums = [-2, 0, 1, 3], and target = 2.</p>
<p>Return 2. Because there are two triplets which sums are less than 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[-2, 0, 1]</div><div class="line">[-2, 0, 3]</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x5148;&#x6392;&#x5E8F;&#xFF0C;&#x904D;&#x5386;&#x5176;&#x4E2D;&#x6BCF;&#x4E2A;&#x503C;&#xFF0C;&#x627E;&#x5230;target&#x51CF;&#x53BB;&#x540E;&#x7684;&#x503C;&#xFF0C;&#x6309;&#x7167;two sum in sorted&#x6765;&#x505A;&#x5C31;&#x884C;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x8981;&#x6CE8;&#x610F;&#xFF0C;&#x56E0;&#x4E3A;&#x53EA;&#x8981;&#x7B97;&#x6BD4;&#x5B83;&#x5C0F;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x6CE8;&#x610F;&#x6307;&#x9488;&#x5982;&#x4F55;&#x79FB;&#x52A8;&#xFF0C;&#x5E76;&#x4E14;&#x5982;&#x4F55;count&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public int threeSumSmaller(int[] nums, int target) {</div><div class="line">    int count = 0;</div><div class="line">    Arrays.sort(nums);</div><div class="line">    if (nums.length &lt; 3) return 0;</div><div class="line">    for (int i=0; i&lt;nums.length; i++) {</div><div class="line">        int twoSum = target - nums[i];</div><div class="line">        int left = i+1; int right = nums.length - 1;</div><div class="line">        while (left &lt; right) {</div><div class="line">            if (nums[left] + nums[right] &gt;= twoSum) {</div><div class="line">                right --;</div><div class="line">            } else {</div><div class="line">                count += right - left;</div><div class="line">                left ++;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    return count;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-18-4sum">Leetcode 18. 4Sum <a href="#leetcode-18-4sum" class="header-anchor">#</a></h3>
<h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>
<p>Note: The solution set must not contain duplicate quadruplets.</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.</div><div class="line"></div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1,  0, 0, 1],</div><div class="line">  [-2, -1, 1, 2],</div><div class="line">  [-2,  0, 0, 2]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x5728;3Sum&#x4E0A;&#x9762;&#x5957;&#x4E00;&#x5C42;&#x5C31;&#x884C;&#x4E86;&#x3002;&#x5410;&#x69FD;&#x65E0;&#x529B;&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) {</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    if (nums.length &lt; 4) return list;</div><div class="line">    Arrays.sort(nums);</div><div class="line">    for (int i=0; i&lt;nums.length - 3; i++) {</div><div class="line">        if (i &gt; 0 &amp;&amp; nums[i] == nums[i-1]) continue;</div><div class="line">        for (int j=i+1; j&lt;nums.length-2; j++) {</div><div class="line">            if (j &gt; i+1 &amp;&amp; nums[j] == nums[j-1]) continue;</div><div class="line">            int left = j+1; int right = nums.length-1;</div><div class="line">            while (left &lt;right) {</div><div class="line">                if (nums[left] + nums[right] == target - nums[i] - nums[j]) {</div><div class="line">                    list.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));</div><div class="line">                    while (left &lt; right &amp;&amp; nums[left] == nums[left+1]) left ++;</div><div class="line">                    while (left &lt; right &amp;&amp; nums[right] == nums[right-1]) right --;</div><div class="line">                    left ++; right --;</div><div class="line">                } else if (nums[left] + nums[right]&lt; target - nums[i] - nums[j]) {</div><div class="line">                    left++;</div><div class="line">                } else {</div><div class="line">                    right--;</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    return list;</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3 id="leetcode-454-4sum-ii">Leetcode 454. 4Sum II <a href="#leetcode-454-4sum-ii" class="header-anchor">#</a></h3>
<h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.</p>
<p>To make problem a bit easier, all A, B, C, D have same length of N where 0 &#x2264; N &#x2264; 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line"></div><div class="line">Input:</div><div class="line">A = [ 1, 2]</div><div class="line">B = [-2,-1]</div><div class="line">C = [-1, 2]</div><div class="line">D = [ 0, 2]</div><div class="line"></div><div class="line">Output:</div><div class="line">2</div><div class="line"></div><div class="line">Explanation:</div><div class="line">The two tuples are:</div><div class="line">1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0</div><div class="line">2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation&#xFF1A; <a href="#explanation" class="header-anchor">#</a></h4>
<p>O(N^2)+Hashmap. Boring&#xFF0C;&#x4E0B;&#x4E00;&#x9898;&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {</div><div class="line">    HashMap&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    int count = 0;</div><div class="line">    for (int i=0; i&lt;A.length; i++) {</div><div class="line">        for (int j=0; j&lt;B.length; j++) {</div><div class="line">            int sumAB = A[i] + B[j];</div><div class="line">            if (!map.containsKey(0-sumAB)) map.put(0-sumAB, 1);</div><div class="line">            else map.put(0-sumAB, map.get(0-sumAB)+1);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    for (int ii = 0; ii&lt;C.length; ii++) {</div><div class="line">        for (int jj=0; jj&lt;D.length; jj++) {</div><div class="line">            int sumCD = C[ii] + D[jj];</div><div class="line">            if (map.containsKey(sumCD)) count+= map.get(sumCD);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    return count;</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&amp;#x7ECF;&amp;#x5178;&amp;#x7684;2sum&amp;#xFF0C;3sum&amp;#xFF0C;4sum&amp;#x6781;&amp;#x5176;&amp;#x53D8;&amp;#x4F53;&amp;#x
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Two pointers" scheme="http://yoursite.com/tags/Two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 359. Logger Rate Limiter</title>
    <link href="http://yoursite.com/2017/02/15/Leetcode-359-Logger-Rate-Limiter/"/>
    <id>http://yoursite.com/2017/02/15/Leetcode-359-Logger-Rate-Limiter/</id>
    <published>2017-02-15T16:40:33.000Z</published>
    <updated>2017-02-15T17:03:19.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question: <a href="#question" class="header-anchor">#</a></h3>
<p>Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is not printed in the last 10 seconds.</p>
<p>Given a message and a timestamp (in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.</p>
<p>It is possible that several messages arrive roughly at the same time.</p>
<p>Example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Logger logger = new Logger();</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 1</div><div class="line">logger.shouldPrintMessage(1, &quot;foo&quot;); returns true;</div><div class="line"></div><div class="line">// logging string &quot;bar&quot; at timestamp 2</div><div class="line">logger.shouldPrintMessage(2,&quot;bar&quot;); returns true;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 3</div><div class="line">logger.shouldPrintMessage(3,&quot;foo&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;bar&quot; at timestamp 8</div><div class="line">logger.shouldPrintMessage(8,&quot;bar&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 10</div><div class="line">logger.shouldPrintMessage(10,&quot;foo&quot;); returns false;</div><div class="line"></div><div class="line">// logging string &quot;foo&quot; at timestamp 11</div><div class="line">logger.shouldPrintMessage(11,&quot;foo&quot;); returns true;</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h3>
<p>&#x6309;&#x7167;&#x666E;&#x901A;&#x7684;hashmap&#x5B58;&#x4E0B;&#x6240;&#x6709;&#x503C;&#xFF0C;&#x7136;&#x540E;&#x66F4;&#x65B0;timestamp&#x662F;&#x4E00;&#x79CD;&#x529E;&#x6CD5;&#x3002;&#x4F46;&#x662F;&#x5B9E;&#x9645;&#x4E2D;&#x4F1A;&#x6D6A;&#x8D39;&#x5F88;&#x591A;&#x7A7A;&#x95F4;&#xFF0C;&#x6240;&#x4EE5;&#x6BD4;&#x8F83;&#x597D;&#x7684;&#x65B9;&#x5F0F;&#x5176;&#x5B9E;&#x662F;&#x7528;queue&#x5B58;&#x4E0B;&#x6700;&#x8FD1;timestamp&#x5728;10&#x4EE5;&#x5185;&#x7684;&#x503C;&#xFF0C;&#x4FDD;&#x6301;&#x4E00;&#x4E2A;size&#x6700;&#x591A;&#x4E3A;10&#x7684;&#x7A97;&#x53E3;&#x5C31;&#x884C;&#x3002;&#x4F46;&#x662F;&#x8DD1;&#x51FA;&#x6765;&#x65F6;&#x95F4;&#x633A;&#x4E45;&#x7684;&#xFF0C;&#x7528;&#x7684;&#x7A7A;&#x95F4;&#x5C11;&#x3002;</p>
<h3 id="code">Code: <a href="#code" class="header-anchor">#</a></h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">class Log{</div><div class="line">    int timestamp;</div><div class="line">    String message;</div><div class="line">    public Log(int Timestamp, String Message) {</div><div class="line">        timestamp = Timestamp;</div><div class="line">        message = Message;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line">public class Logger {</div><div class="line"></div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    PriorityQueue&lt;Log&gt; queue;</div><div class="line">    Set&lt;String&gt; set;</div><div class="line">    public Logger() {</div><div class="line">        queue = new PriorityQueue&lt;&gt;(10, new Comparator&lt;Log&gt;(){</div><div class="line">            public int compare(Log l1, Log l2){</div><div class="line">                return l1.timestamp - l2.timestamp;</div><div class="line">            }</div><div class="line">        });</div><div class="line">        set = new HashSet&lt;&gt;();</div><div class="line">    }</div><div class="line"></div><div class="line">    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.</div><div class="line">        If this method returns false, the message will not be printed.</div><div class="line">        The timestamp is in seconds granularity. */</div><div class="line">    public boolean shouldPrintMessage(int timestamp, String message) {</div><div class="line">        while (queue.size() &gt; 0) {</div><div class="line">            Log log = queue.peek();</div><div class="line">            if (timestamp - log.timestamp &gt;= 10) {</div><div class="line">                Log pollLog = queue.poll();</div><div class="line">                set.remove(pollLog.message);</div><div class="line">            } else {</div><div class="line">                break;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        boolean result = !set.contains(message);</div><div class="line">        if ( !set.contains(message)) {</div><div class="line">            queue.add(new Log(timestamp, message));</div><div class="line">            set.add(message);</div><div class="line">        }</div><div class="line">        return result;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">/**</div><div class="line"> * Your Logger object will be instantiated and called as such:</div><div class="line"> * Logger obj = new Logger();</div><div class="line"> * boolean param_1 = obj.shouldPrintMessage(timestamp,message);</div><div class="line"> */</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question: &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Design
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 459. Repeated Substring Pattern</title>
    <link href="http://yoursite.com/2017/02/12/Leetcode-459-Repeated-Substring-Pattern/"/>
    <id>http://yoursite.com/2017/02/12/Leetcode-459-Repeated-Substring-Pattern/</id>
    <published>2017-02-13T02:52:36.000Z</published>
    <updated>2017-02-13T03:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>&#x4E00;&#x9053;&#x5F88;&#x7B80;&#x5355;&#x7684;&#x9898;&#x3002;&#x4F46;&#x662F;&#x4E00;&#x76F4;&#x5728;&#x8C03;corner case&#xFF0C;&#x597D;&#x4E0D;&#x5BB9;&#x6613;&#x5199;&#x5B8C;&#x4E86;&#x518D;&#x611F;&#x53D7;&#x4E0B;&#x901F;&#x5EA6;&#x548C;&#x522B;&#x4EBA;&#x5199;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5DEE;&#x8DDD;&#x592A;&#x5927;&#x4E86;&#x3002;&#x5FC3;&#x75BC;&#x4E09;&#x79D2;&#x949F;&#x3002;</p>
<h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.</p>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: &quot;abab&quot;</div><div class="line"></div><div class="line">Output: True</div><div class="line"></div><div class="line">Explanation: It&apos;s the substring &quot;ab&quot; twice.</div></pre></td></tr></table></figure></p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: &quot;aba&quot;</div><div class="line"></div><div class="line">Output: False</div></pre></td></tr></table></figure></p>
<p>Example 3:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: &quot;abcabcabcabc&quot;</div><div class="line"></div><div class="line">Output: True</div><div class="line"></div><div class="line">Explanation: It&apos;s the substring &quot;abc&quot; four times. (And the substring &quot;abcabc&quot; twice.)</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x539F;&#x7406;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5C31;&#x662F;&#x6BCF;&#x6B21;&#x5F97;&#x5230;&#x4E00;&#x4E2A;substring&#xFF0C;&#x5F80;&#x540E;&#x68C0;&#x67E5;&#x76F8;&#x540C;&#x957F;&#x5EA6;&#x7684;&#x4E0B;&#x4E00;&#x6BB5;string&#x3002;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x904D;&#x5386;&#x7684;index&#x53EA;&#x8981;&#x5230;length/2&#x5C31;&#x884C;&#x4E86;&#xFF0C;&#x6BD5;&#x7ADF;&#x81F3;&#x5C11;&#x4E5F;&#x8981;&#x91CD;&#x590D;&#x4E24;&#x904D;&#x7684;&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution {</div><div class="line">    public boolean repeatedSubstringPattern(String str) {</div><div class="line">        if(str == null || str.length() &lt;= 1) return false;</div><div class="line">        int len = str.length();</div><div class="line">        for ( int i=0; i&lt;=len/2; i++) {</div><div class="line">            boolean flag = true;</div><div class="line">            if (len%(i+1) != 0 || len == i+1) continue;</div><div class="line">            String subString = str.substring(0,(i+1));</div><div class="line">            int start = i+1;</div><div class="line">            int end = start * 2;</div><div class="line">            while (end&lt;=len) {</div><div class="line">                if (!subString.equals(str.substring(start,end))){</div><div class="line">                    flag = false; break;</div><div class="line">                }</div><div class="line">                start = start + i+1;</div><div class="line">                end = end + i+1;</div><div class="line">            }</div><div class="line">            // System.out.println(flag);</div><div class="line">            if (flag) return true;</div><div class="line"></div><div class="line">        }</div><div class="line">        return false;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&amp;#x4E00;&amp;#x9053;&amp;#x5F88;&amp;#x7B80;&amp;#x5355;&amp;#x7684;&amp;#x9898;&amp;#x3002;&amp;#x4F46;&amp;#x662F;&amp;#x4E00
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 475. Heaters</title>
    <link href="http://yoursite.com/2017/02/12/Leetcode-475-Heaters/"/>
    <id>http://yoursite.com/2017/02/12/Leetcode-475-Heaters/</id>
    <published>2017-02-13T01:21:08.000Z</published>
    <updated>2017-02-13T01:31:42.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.</p>
<p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p>
<p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p>
<p>Note:</p>
<ol>
<li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>
<li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>
<li>As long as a house is in the heaters&apos; warm radius range, it can be warmed.</li>
<li>All the heaters follow your radius standard and the warm radius will the same.</li>
</ol>
<p>Example 1:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,3],[2]</div><div class="line">Output: 1</div><div class="line">Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.</div></pre></td></tr></table></figure></p>
<p>Example 2:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,3,4],[1,4]</div><div class="line">Output: 1</div><div class="line">Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.</div></pre></td></tr></table></figure></p>
<h4 id="solution-1-binary-search-slow">Solution 1: Binary Search (slow) <a href="#solution-1-binary-search-slow" class="header-anchor">#</a></h4>
<h5 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h5>
<p>heaters&#x6392;&#x5E8F;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;house&#x7528;binary Search&#x627E;&#x5230;&#x6700;&#x9760;&#x8FD1;&#x7684;&#x90A3;&#x4E2A;&#x503C;&#x3002;</p>
<h5 id="code">Code: <a href="#code" class="header-anchor">#</a></h5>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public int findRadius(int[] houses, int[] heaters) {</div><div class="line">    Arrays.sort(heaters);</div><div class="line">    int radius = 0;</div><div class="line">    for ( int h : houses) {</div><div class="line">        radius = Math.max(radius, binarySearch(h, heaters));</div><div class="line">    }</div><div class="line">    return radius;</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line">public int binarySearch(int val, int[] heaters) {</div><div class="line">    int start = 0;</div><div class="line">    int end = heaters.length - 1;</div><div class="line">    int diff =Integer.MAX_VALUE;</div><div class="line">    while (start &lt; end) {</div><div class="line">        int mid = (start + (end-start)/2);</div><div class="line">        if (val &lt; heaters[mid]) {</div><div class="line">            end = mid;</div><div class="line">        } else {</div><div class="line">            start = mid+1;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    if (start &gt; 0) {</div><div class="line">        diff = Math.min(Math.abs(val - heaters[start]), Math.abs(val - heaters[start-1]));</div><div class="line">    }</div><div class="line">    if (start &lt; heaters.length - 1) {</div><div class="line">        diff = Math.min(diff, Math.abs(val - heaters[start+1]));</div><div class="line">    }</div><div class="line">    diff = Math.min(diff, Math.abs(val - heaters[start]));</div><div class="line">    return diff;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h4 id="solution-2-two-pointers-quicker">Solution 2: Two pointers(quicker) <a href="#solution-2-two-pointers-quicker" class="header-anchor">#</a></h4>
<h5 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h5>
<p>heaters, houses&#x6392;&#x5E8F;&#xFF0C;&#x7528;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#x5206;&#x522B;&#x904D;&#x5386;&#x4E00;&#x904D;&#xFF0C;&#x4E3B;&#x4F53;&#x90E8;&#x5206;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x662F;O&#xFF08;m+n&#xFF09;</p>
<h5 id="code">Code: <a href="#code" class="header-anchor">#</a></h5>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int findRadius(int[] houses, int[] heaters) {</div><div class="line">    // O(mlogm)</div><div class="line">    Arrays.sort(houses);</div><div class="line">    // O(nlogn)</div><div class="line">    Arrays.sort(heaters);</div><div class="line">    int i = 0, res = 0;</div><div class="line">    // O(m+n)</div><div class="line">    for (int house : houses) {</div><div class="line">        while (i &lt; heaters.length - 1 &amp;&amp; heaters[i] + heaters[i + 1] &lt;= house * 2) {</div><div class="line">            i++;</div><div class="line">        }</div><div class="line">        res = Math.max(res, Math.abs(heaters[i] - house));</div><div class="line">    }</div><div class="line">    return res;</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question: &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Winter
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
      <category term="Two pointers" scheme="http://yoursite.com/tags/Two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 356. Line Reflection</title>
    <link href="http://yoursite.com/2017/02/12/Leetcode-356-Line-Reflection/"/>
    <id>http://yoursite.com/2017/02/12/Leetcode-356-Line-Reflection/</id>
    <published>2017-02-13T00:10:02.000Z</published>
    <updated>2017-02-13T00:18:27.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points.</p>
<p><strong>Example 1:</strong>
Given points = [[1,1],[-1,1]], return true.</p>
<p><strong>Example 2:</strong>
Given points = [[1,1],[-1,-1]], return false.</p>
<p><strong>Follow up:</strong>
Could you do better than O(n2)?</p>
<p><strong>Hint:</strong></p>
<blockquote>
<p>Find the smallest and largest x-value for all points.
If there is a line then it should be at y = (minX + maxX) / 2.
For each point, make sure that it has a reflected point in the opposite side.</p>
</blockquote>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x521A;&#x5F00;&#x59CB;&#x7684;&#x601D;&#x8DEF;&#x662F;&#xFF0C; &#x7528;&#x4E00;&#x4E2A;map&#x5B58;{y&#x503C;:[&#x6240;&#x6709;&#x76F8;&#x5E94;x&#x503C;]}&#x3002;
&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;y&#x503C;&#xFF0C;&#x5C06;&#x5176;&#x5BF9;&#x5E94;&#x7684;x&#x503C;&#x7684;list&#x6392;&#x5E8F;&#x3002;&#x7528;two pointers&#x68C0;&#x67E5;&#x662F;&#x4E0D;&#x662F;&#x5BF9;&#x79F0;&#x3002;
&#x8FD9;&#x6837;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x8D85;&#x8FC7;O(n^2)&#x4E86;&#xFF0C;sort&#x5C31;&#x5DF2;&#x7ECF;O(nlogn)&#x4E86;&#x3002;
&#x4E8E;&#x662F;&#xFF0C;&#x6309;&#x7167;&#x4E86;hint&#x5199;&#xFF0C;&#x5148;&#x904D;&#x5386;&#x4E00;&#x904D;&#xFF0C;&#x5F97;&#x5230;x&#x6700;&#x5927;&#x503C;&#x548C;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x4ECE;&#x800C;&#x5F97;&#x5230;x&#x4E2D;&#x95F4;&#x503C;&#x3002;&#x518D;&#x904D;&#x5386;&#x4E00;&#x904D;&#xFF0C;&#x5B58;&#x4E0B;&#x6BCF;&#x4E2A;&#x70B9;&#x7684;&#x5BF9;&#x79F0;&#x70B9;&#x3002;&#x6700;&#x540E;&#x904D;&#x5386;&#x4E00;&#x904D;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x54EA;&#x4E2A;&#x5750;&#x6807;&#x4E0D;&#x5728;set&#x91CC;&#x9762;&#xFF0C;&#x8BF4;&#x660E;&#x6CA1;&#x6709;&#x5BF9;&#x79F0;&#x70B9;&#x3002;&#xFF08;&#x548C;two sum&#x4E00;&#x6837;&#x7684;&#x601D;&#x8DEF;&#xFF09;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public boolean isReflected(int[][] points) {</div><div class="line">    if(points == null || points.length == 0) return true;</div><div class="line">    int minX = Integer.MAX_VALUE;</div><div class="line">    int maxX = Integer.MIN_VALUE;</div><div class="line">    double midX = 0.0;</div><div class="line">    for( int i=0; i&lt;points.length; i++) {</div><div class="line">        int[] point = points[i];</div><div class="line">        int x = point[0]; int y = point[1];</div><div class="line">        minX = Math.min(minX, x);</div><div class="line">        maxX = Math.max(maxX, x);</div><div class="line">    }</div><div class="line">    midX = (minX + maxX) / 2.0;</div><div class="line">    HashSet&lt;Integer&gt; set = new HashSet&lt;&gt;();</div><div class="line">    for( int i=0; i&lt;points.length; i++) {</div><div class="line">        int[] point = points[i];</div><div class="line">        int x = point[0]; int y = point[1];</div><div class="line">        int[] reflect = new int[2];</div><div class="line">        reflect[0] = (int)(2*midX- x);</div><div class="line">        reflect[1] = y;</div><div class="line">        set.add(Arrays.hashCode(reflect));</div><div class="line">    }</div><div class="line">    for( int i=0; i&lt;points.length; i++) {</div><div class="line">        int[] point = points[i];</div><div class="line">        if (!set.contains(Arrays.hashCode(point))) return false;</div><div class="line">    }</div><div class="line">    return true;</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question: &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Given 
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 409. Longest Palindrome</title>
    <link href="http://yoursite.com/2017/02/12/Leetcode-409-Longest-Palindrome/"/>
    <id>http://yoursite.com/2017/02/12/Leetcode-409-Longest-Palindrome/</id>
    <published>2017-02-12T21:42:32.000Z</published>
    <updated>2017-02-13T00:09:11.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h4 id="question">Question: <a href="#question" class="header-anchor">#</a></h4>
<p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>
<p>This is case sensitive, for example &quot;Aa&quot; is not considered a palindrome here.</p>
<p>Note:
Assume the length of given string will not exceed 1,010.</p>
<p>Example:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">&quot;abccccdd&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">7</div><div class="line"></div><div class="line">Explanation:</div><div class="line">One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.</div></pre></td></tr></table></figure></p>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x8D85;&#x7B80;&#x5355;&#x7684;&#x9898;&#x3002;
Solution 1:
&#x53EF;&#x4EE5;&#x7528;&#x6570;&#x7EC4;&#x5B58;&#x50A8;&#x6BCF;&#x4E2A;&#x5B57;&#x6BCD;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x9700;&#x8981;&#x8003;&#x8651;&#x5927;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;&#xFF0C;&#x5206;&#x5F00;&#x6839;&#x636E;ascii&#x8BA1;&#x7B97;index&#x3002;
Solution 2:
&#x7528;Hashmap&#x5B58;&#x50A8;&#x6BCF;&#x4E2A;&#x5B57;&#x7B26;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x52A0;&#x548C;&#x6240;&#x6709;even&#x6B21;&#x6570;&#xFF0C;&#x518D;&#x52A0;&#x548C;odd/2*2&#xFF0C;&#x5982;&#x679C;&#x51FA;&#x73B0;&#x8FC7;odd&#xFF0C;&#x6700;&#x540E;&#x52A0;&#x4E0A;1&#xFF0C;&#x5426;&#x5219;&#x4E0D;&#x52A0;&#x3002;
Solution 3:<br>
&#x7528;HashSet&#xFF0C;&#x5982;&#x679C;&#x51FA;&#x73B0;&#x8FC7;&#xFF0C;&#x5C31;&#x52A0;2&#xFF0C;&#x53BB;&#x6389;&#x3002;&#x518D;&#x51FA;&#x73B0;&#xFF0C;&#x518D;&#x52A0;&#x5165;&#x3002;&#x6700;&#x540E;&#x5982;&#x679C;set&#x662F;&#x7A7A;&#x7684;&#xFF0C;&#x8BF4;&#x660E;&#x6CA1;&#x6709;odd&#xFF0C;&#x5426;&#x5219;&#x52A0;&#x4E0A;1&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public int longestPalindrome(String s) {</div><div class="line">    HashSet&lt;Character&gt; set = new HashSet&lt;&gt;();</div><div class="line">    int count = 0;</div><div class="line">    for (Character c: s.toCharArray()) {</div><div class="line">        if (set.contains(c)) {</div><div class="line">            count += 2;</div><div class="line">            set.remove(c);</div><div class="line">        } else set.add(c);</div><div class="line"></div><div class="line">    }</div><div class="line">    if (!set.isEmpty()) count++;</div><div class="line">    return count;</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;question&quot;&gt;Question: &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Given 
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>Java Interview Questions</title>
    <link href="http://yoursite.com/2017/02/11/Java-Interview-Questions/"/>
    <id>http://yoursite.com/2017/02/11/Java-Interview-Questions/</id>
    <published>2017-02-11T14:51:39.000Z</published>
    <updated>2017-02-16T04:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>Always update...</p>
<h3 id="jvm-is-plantform-dependent">JVM is plantform dependent? <a href="#jvm-is-plantform-dependent" class="header-anchor">#</a></h3>
<blockquote>
<p>Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?</p>
</blockquote>
<hr>
<p><strong>JVM translates bytecode into machine language</strong>
Every Java program is first compiled into an intermediate language called Java bytecode. The JVM is used primarily for 2 things: the first is to translate the bytecode into the machine language for a particular computer, and the second thing is to actually execute the corresponding machine-language instructions as well. The JVM and bytecode combined give Java its status as a &quot;portable&quot; language &#x2013; this is because Java bytecode can be transferred from one machine to another.</p>
<p><strong>Machine language is OS dependent</strong>
Since the JVM must translate the bytecode into machine language, and since the machine language depends on the operating system being used, it is clear that the JVM is platform (operating system) dependent &#x2013; in other words, the JVM is not platform independent.</p>
<p><strong>The JVM is not platform independent</strong>
The key here is that the JVM depends on the operating system &#x2013; so if you are running Mac OS X you will have a different JVM than if you are running Windows or some other operating system.</p>
<h3 id="overloading-overriding">Overloading &amp; Overriding <a href="#overloading-overriding" class="header-anchor">#</a></h3>
<blockquote>
<p>In Java, what&#x2019;s the difference between method overloading and method overriding?</p>
</blockquote>
<hr>
<p><strong>Overloading:</strong>
Method overloading in Java occurs when two or more methods in the same class have <strong>the exact same name but different parameters</strong> (remember that method parameters accept values passed into the method). However, method overloading is a compile-time phenomenon.
<strong>Can be
overloading:</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.) The number of parameters is different for the methods.</div><div class="line">2.) The parameter types are different (like</div><div class="line">changing a parameter that was a float to an int).</div></pre></td></tr></table></figure></p>
<p><strong>Not overloading</strong>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. Just changing the return type of the method. (Compiler Error)</div><div class="line">2. Changing just the name of the method parameters, but</div><div class="line">not changing the parameter types.</div></pre></td></tr></table></figure></p>
<p><strong>Overriding:</strong>
[&#x6839;&#x672C;&#x4E5F;&#x8BB0;&#x4E0D;&#x4F4F;&#xFF0C;&#x5176;&#x5B9E;&#x6211;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x5C0F;&#x670B;&#x53CB;&#x9A91;&#x5728;&#x7238;&#x7238;&#x80A9;&#x8180;&#x4E0A;&#xFF0C;&#x4ED6;&#x4EEC;&#x4E3B;&#x4F53;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x4E0D;&#x4F1A;&#x53D8;&#x7684;&#xFF0C;&#x5373;&#x65B9;&#x6CD5;&#x53C2;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#x4E0D;&#x53D8;&#xFF0C;&#x4F46;&#x5185;&#x5BB9;&#x53D8;&#x4E86;&#x3002;<em>(:&#x437;&#x309D;&#x2220;)</em>]
Overriding means that a method inherited from a parent class will be changed. But, when overriding a method everything remains <strong>exactly the same except the method definition &#x2013; basically what the method does is changed slightly to fit in with the needs of the child class</strong>. But, the method name, the number and types of parameters, and the return type will all remain the same.
Method overriding is a run-time phenomenon that is the driving force behind polymorphism.</p>
<h3 id="private-constructor">Private Constructor <a href="#private-constructor" class="header-anchor">#</a></h3>
<blockquote>
<p>What&#x2019;s the point of having a private constructor?</p>
</blockquote>
<hr>
<p>Defining a constructor with the private modifier says that only the native class (as in the class in which the private constructor is defined) is allowed to create an instance of the class, and no other caller is permitted to do so.</p>
<p>There are two possible reasons why one would want to use a private constructor &#x2013; the first is that <strong>you don&#x2019;t want any objects of your class to be created at all,</strong> and the second is that <strong>you only want objects to be created internally &#x2013; as in only created in your class.</strong></p>
<p>A <strong>singleton</strong> is a design pattern that allows only one instance of your class to be created, and this can be accomplished by using a private constructor.</p>
<h3 id="an-object-and-a-class">An object and a class <a href="#an-object-and-a-class" class="header-anchor">#</a></h3>
<blockquote>
<p>In Java, what&#x2019;s the difference between an object and a class?</p>
</blockquote>
<p>Shortly: An object is an instance of a class.
Objects have a lifespan but classes do not.</p>
<h3 id="an-object-and-a-class">An object and a class <a href="#an-object-and-a-class" class="header-anchor">#</a></h3>
<blockquote>
<p>In Java, what&#x2019;s the difference between an object and a class?</p>
</blockquote>
<hr>
<p><strong>References:</strong>
http://www.programmerinterview.com/</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;Always update...&lt;/p&gt;
&lt;h3 id=&quot;jvm-is-plantform-dependent&quot;&gt;JVM is plantform dependent? &lt;a
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 271. Encode and Decode Strings</title>
    <link href="http://yoursite.com/2017/02/10/271-Encode-and-Decode-Strings/"/>
    <id>http://yoursite.com/2017/02/10/271-Encode-and-Decode-Strings/</id>
    <published>2017-02-11T04:52:01.000Z</published>
    <updated>2017-02-11T05:50:31.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question: <a href="#question" class="header-anchor">#</a></h3>
<p>Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.</p>
<p>Machine 1 (sender) has the function:</p>
<p><figure class="highlight plain"><figcaption><span>encode(vector<string> strs) {</string></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  // ... your code</div><div class="line">  return encoded_string;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>Machine 2 (receiver) has the function:
<figure class="highlight plain"><figcaption><span>decode(string s) {</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  //... your code</div><div class="line">  return strs;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>So Machine 1 does:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string encoded_string = encode(strs);</div></pre></td></tr></table></figure></p>
<p>and Machine 2 does:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vector&lt;string&gt; strs2 = decode(encoded_string);</div></pre></td></tr></table></figure></p>
<p>strs2 in Machine 2 should be the same as strs in Machine 1.</p>
<p>Implement the encode and decode methods.</p>
<p>Note:</p>
<ul>
<li>The string may contain any possible characters out of 256 valid ascii characters. Your algorithm should be generalized enough to work on any possible characters.</li>
<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>
<li>Do not rely on any library method such as eval or serialize methods. You should implement your own encode/decode algorithm.</li>
</ul>
<h3 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h3>
<p>&#x4E4D;&#x4E00;&#x770B;&#xFF0C;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#x8BF4;&#x7684;&#x662F;&#x4EC0;&#x4E48;&#x3002;&#x5176;&#x5B9E;&#x9898;&#x610F;&#x662F;&#x7ED9;&#x4E00;&#x4E2A;list&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5148;&#x8981;&#x62FC;&#x6210;&#x4E00;&#x6574;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x662F;encode&#x3002;&#x7136;&#x540E;&#x628A;&#x8FD9;&#x6574;&#x4E2A;&#x5B57;&#x7B26;&#x62C6;&#x56DE;&#x4E00;&#x4E2A;list&#x7684;&#x5B57;&#x7B26;&#x3002;
&#x6240;&#x4EE5;&#x8003;&#x70B9;&#x662F;&#x5982;&#x4F55;&#x5408;&#x7406;&#x5730;&#x5206;&#x9694;&#xFF0C;&#x7136;&#x540E;&#x8FD8;&#x80FD;&#x8BC6;&#x522B;&#x51FA;&#x6765;&#x3002;
&#x8FD9;&#x54EA;&#x513F;&#x662F;&#x7B97;&#x6CD5;&#xFF0C;&#x5176;&#x5B9E;&#x8003;&#x7684;&#x662F;Serilization&#x8FD9;&#x4E2A;&#x8BA1;&#x7B97;&#x673A;&#x7CFB;&#x7EDF;&#x4E2D;&#x7684;&#x57FA;&#x672C;&#x6982;&#x5FF5;&#x3002;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#x4E32;&#x884C;&#x5316;(Serialization)&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x6982;&#x5FF5;&#xFF0C;&#x5B83;&#x662F;&#x6307;&#x5C06;&#x5BF9;&#x8C61;&#x5B58;&#x50A8;&#x5230;&#x4ECB;&#x8D28;&#xFF08;&#x5982;&#x6587;&#x4EF6;&#x3001;&#x5185;&#x5B58;&#x7F13;&#x51B2;&#x533A;&#x7B49;&#xFF09;&#x4E2D;&#x6216;&#x662F;&#x4EE5;&#x4E8C;&#x8FDB;&#x5236;&#x65B9;&#x5F0F;&#x901A;&#x8FC7;&#x7F51;&#x7EDC;&#x4F20;&#x8F93;&#x3002;&#x4E4B;&#x540E;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x53CD;&#x4E32;&#x884C;&#x5316;&#x4ECE;&#x8FD9;&#x4E9B;&#x8FDE;&#x7EED;&#x7684;&#x5B57;&#x8282;&#xFF08;byte&#xFF09;&#x6570;&#x636E;&#x91CD;&#x65B0;&#x6784;&#x5EFA;&#x4E00;&#x4E2A;&#x4E0E;&#x539F;&#x59CB;&#x5BF9;&#x8C61;&#x72B6;&#x6001;&#x76F8;&#x540C;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x7279;&#x5B9A;&#x60C5;&#x51B5;&#x4E0B;&#x4E5F;&#x53EF;&#x4EE5;&#x8BF4;&#x662F;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x526F;&#x672C;&#xFF0C;&#x4F46;&#x5E76;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x60C5;&#x51B5;&#x90FD;&#x8FD9;&#x6837;&#x3002;</div></pre></td></tr></table></figure></p>
<h3 id="code">Code: <a href="#code" class="header-anchor">#</a></h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Codec {</div><div class="line"></div><div class="line">    // Encodes a list of strings to a single string.</div><div class="line">    public String encode(List&lt;String&gt; strs) {</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        for(String s : strs) {</div><div class="line">            sb.append(s.length()).append(&apos;/&apos;).append(s);</div><div class="line">        }</div><div class="line">        return sb.toString();</div><div class="line">    }</div><div class="line"></div><div class="line">    // Decodes a single string to a list of strings.</div><div class="line">    public List&lt;String&gt; decode(String s) {</div><div class="line">        List&lt;String&gt; ret = new ArrayList&lt;String&gt;();</div><div class="line">        int i = 0;</div><div class="line">        while(i &lt; s.length()) {</div><div class="line">            int slash = s.indexOf(&apos;/&apos;, i);</div><div class="line">            int size = Integer.valueOf(s.substring(i, slash));</div><div class="line">            ret.add(s.substring(slash + 1, slash + size + 1));</div><div class="line">            i = slash + size + 1;</div><div class="line">        }</div><div class="line">        return ret;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question: &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Design
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Design" scheme="http://yoursite.com/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 346. Moving Average from Data Stream</title>
    <link href="http://yoursite.com/2017/02/10/346-Moving-Average-from-Data-Stream/"/>
    <id>http://yoursite.com/2017/02/10/346-Moving-Average-from-Data-Stream/</id>
    <published>2017-02-11T02:17:27.000Z</published>
    <updated>2017-02-11T02:20:33.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question <a href="#question" class="header-anchor">#</a></h3>
<p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</p>
<p>For example,
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MovingAverage m = new MovingAverage(3);</div><div class="line">m.next(1) = 1</div><div class="line">m.next(10) = (1 + 10) / 2</div><div class="line">m.next(3) = (1 + 10 + 3) / 3</div><div class="line">m.next(5) = (10 + 3 + 5) / 3</div></pre></td></tr></table></figure></p>
<h3 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h3>
<p>&#x975E;&#x5E38;&#x7B80;&#x5355;&#x7684;&#x9898;&#x76EE;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;queue&#x6216;&#x8005;arraylist&#x6216;&#x8005;array&#x4FDD;&#x5B58;next&#x7684;&#x503C;&#x3002;&#x7528;&#x4E00;&#x4E2A;sum&#x5B58;&#x7740;&#x603B;&#x548C;&#xFF0C;&#x6BCF;&#x6B21;&#x90FD;&#x8BA1;&#x7B97;&#x4E00;&#x4E0B;&#x5E73;&#x5747;&#x503C;&#x3002;</p>
<h3 id="code">Code: <a href="#code" class="header-anchor">#</a></h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class MovingAverage {</div><div class="line"></div><div class="line">    /** Initialize your data structure here. */</div><div class="line">    Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();</div><div class="line">    int size;</div><div class="line">    int count = 0;</div><div class="line">    int total = 0;</div><div class="line">    public MovingAverage(int size) {</div><div class="line">        this.size = size;</div><div class="line"></div><div class="line">    }</div><div class="line"></div><div class="line">    public double next(int val) {</div><div class="line">        if (count &lt; size) {</div><div class="line">            count ++;</div><div class="line">            q.offer(val);</div><div class="line">            total += val;</div><div class="line">            return total*1.0 / count;</div><div class="line">        } else {</div><div class="line">            int remove = q.poll();</div><div class="line">            q.offer(val);</div><div class="line">            total -= remove;</div><div class="line">            total += val;</div><div class="line">            return total*1.0/ size;</div><div class="line">        }</div><div class="line"></div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given a
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Design" scheme="http://yoursite.com/tags/Design/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 300. Longest Increasing Subsequence</title>
    <link href="http://yoursite.com/2017/02/10/Leetcode-300-Longest-Increasing-Subsequence/"/>
    <id>http://yoursite.com/2017/02/10/Leetcode-300-Longest-Increasing-Subsequence/</id>
    <published>2017-02-11T00:49:47.000Z</published>
    <updated>2017-02-11T01:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h3 id="question">Question <a href="#question" class="header-anchor">#</a></h3>
<p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.</p>
<p>Your algorithm should run in O(n2) complexity.</p>
<p><strong>Follow up:</strong>
Could you improve it to O(n log n) time complexity?</p>
<h3 id="solution-1-dynamic-programming-o-n-2">Solution 1: Dynamic Programming O(n^2) <a href="#solution-1-dynamic-programming-o-n-2" class="header-anchor">#</a></h3>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x7B2C;&#x4E00;&#x5C42;&#x5FAA;&#x73AF;&#xFF1A; array&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x6570;<br>
&#x7B2C;&#x4E8C;&#x5C42;&#x5FAA;&#x73AF;&#xFF1A; &#x4E4B;&#x524D;&#x7684;&#x6BCF;&#x4E2A;&#x6570;&#x4E2D;&#xFF0C;&#x9009;&#x62E9;&#x6BD4;&#x8FD9;&#x4E2A;&#x6570;&#x5C0F;&#x5E76;&#x4E14;&#x6709;&#x6700;&#x957F;&#x94FE;&#x7684;&#x90A3;&#x4E2A;&#x6570;</p>
<h4 id="code">Code <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public int lengthOfLIS(int[] nums) {</div><div class="line">    if (nums == null || nums.length == 0) return 0;</div><div class="line">    int[] best = new int[nums.length];</div><div class="line">    int max = 1;</div><div class="line">    for ( int i=0; i&lt;nums.length; i++) {</div><div class="line">        best[i] = 1;</div><div class="line">        for ( int j=0; j&lt;i; j++) {</div><div class="line">            if (nums[j] &lt; nums[i]) {</div><div class="line">                best[i] = Math.max(best[i], best[j] + 1);</div><div class="line">            }</div><div class="line">        }</div><div class="line">        max = Math.max(best[i], max);</div><div class="line">    }</div><div class="line">    return max;</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure></p>
<h3 id="solution-2-binary-search-o-nlogn">Solution 2: Binary Search O(nlogn) <a href="#solution-2-binary-search-o-nlogn" class="header-anchor">#</a></h3>
<h4 id="explanation">Explanation: <a href="#explanation" class="header-anchor">#</a></h4>
<p>&#x628A;&#x4E4B;&#x524D;&#x627E;&#x5230;&#x7684;&#x6700;&#x957F;&#x7684;&#x94FE;&#x5B58;&#x8D77;&#x6765;&#x3002;&#x9047;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x5982;&#x679C;&#x6BD4;list&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;&#x5927;&#xFF0C;&#x5C31;&#x653E;&#x5728;list&#x7684;&#x6700;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x662F;&#xFF0C;&#x5C31;&#x9009;&#x62E9;&#x6BD4;&#x5B83;&#x5927;&#xFF0C;&#x4F46;&#x662F;&#x5927;&#x6700;&#x5C11;&#x7684;&#x90A3;&#x4E2A;&#x6570;&#x6362;&#x6389;&#x3002;</p>
<h4 id="code">Code: <a href="#code" class="header-anchor">#</a></h4>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public int lengthOfLIS(int[] nums) {</div><div class="line">    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    for (int n: nums) {</div><div class="line">        if (list.size() == 0 || n &gt; list.get(list.size()-1)) {</div><div class="line">            list.add(n);</div><div class="line">        } else {</div><div class="line">            int start = 0;</div><div class="line">            int end = list.size();</div><div class="line">            while (start &lt; end) {</div><div class="line">                int mid = (start+end)/2;</div><div class="line">                if (list.get(mid) &lt; n) {</div><div class="line">                    start = mid +1 ;</div><div class="line">                } else {</div><div class="line">                    end = mid;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            list.set(end,n);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    return list.size();</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;question&quot;&gt;Question &lt;a href=&quot;#question&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given a
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="MicroSoft" scheme="http://yoursite.com/tags/MicroSoft/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 281. Zigzag Iterator</title>
    <link href="http://yoursite.com/2017/02/09/Leetcode-281/"/>
    <id>http://yoursite.com/2017/02/09/Leetcode-281/</id>
    <published>2017-02-09T22:36:56.000Z</published>
    <updated>2017-02-10T00:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>Question:</strong></p>
<p>Given two 1d vectors, implement an iterator to return their elements alternately.</p>
<p>For example, given two 1d vectors:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v1 = [1, 2]</div><div class="line">v2 = [3, 4, 5, 6]</div></pre></td></tr></table></figure></p>
<p>By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].</p>
<p><strong>Follow up:</strong>
What if you are given k 1d vectors? How well can your code be extended to such cases?</p>
<p>Clarification for the follow up question - Update (2015-09-18):
The &quot;Zigzag&quot; order is not clearly defined and is ambiguous for k &gt; 2 cases. If &quot;Zigzag&quot; does not look right to you, replace &quot;Zigzag&quot; with &quot;Cyclic&quot;. For example, given the following input:</p>
<p>[1,2,3]
[4,5,6,7]
[8,9]
It should return [1,4,8,2,5,9,3,6,7].</p>
<p><strong>Explanation:</strong>
&#x5982;&#x679C;&#x53EA;&#x6709;&#x4E24;&#x4E2A;vector&#xFF0C;&#x633A;&#x5BB9;&#x6613;&#x7684;&#x3002;&#x5C31;&#x7528;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x6B21;&#x90FD;&#x5224;&#x65AD;&#x4E0B;&#x5C31;&#x884C;&#x3002;</p>
<p><strong>Code</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class ZigzagIterator {</div><div class="line">    List&lt;Integer&gt; V1 = new ArrayList&lt;&gt;();</div><div class="line">    List&lt;Integer&gt; V2 = new ArrayList&lt;&gt;();</div><div class="line">    int index1 = 0;</div><div class="line">    int index2 = 0;</div><div class="line"></div><div class="line">    public ZigzagIterator(List&lt;Integer&gt; v1, List&lt;Integer&gt; v2) {</div><div class="line">        V1 = v1;</div><div class="line">        V2 = v2;</div><div class="line">    }</div><div class="line"></div><div class="line">    public int next() {</div><div class="line">        if (index1 &lt;= index2) {</div><div class="line">            if (index1 &lt; V1.size()) {</div><div class="line">                return V1.get(index1++);</div><div class="line">            } else {</div><div class="line">                return V2.get(index2++);</div><div class="line">            }</div><div class="line">        } else {</div><div class="line">            if (index2 &lt; V2.size()) {</div><div class="line">                return V2.get(index2++);</div><div class="line">            } else {</div><div class="line">                return V1.get(index1++);</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">    }</div><div class="line"></div><div class="line">    public boolean hasNext() {</div><div class="line">        if (index1 &lt; V1.size() || index2 &lt; V2.size()) return true;</div><div class="line">        return false;</div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p><strong>FollowUp:</strong>
&#x5982;&#x679C;&#x662F;K&#x4E2A;vector&#xFF0C;&#x6BCF;&#x6B21;&#x5224;&#x65AD;&#x6307;&#x9488;&#x5C31;&#x975E;&#x5E38;&#x4E0D;&#x5408;&#x7406;&#x4E86;&#x3002;&#x8FD9;&#x91CC;&#x6709;&#x4E00;&#x79CD;&#x5DE7;&#x5999;&#x7684;&#x529E;&#x6CD5;&#xFF0C;&#x7528;Queue&#xFF0C;&#x6216;&#x8005;list&#xFF0C;&#x9053;&#x7406;&#x76F8;&#x901A;&#x3002;
&#x57FA;&#x672C;&#x601D;&#x8DEF;&#xFF1A;&#x628A;&#x6BCF;&#x4E2A;list&#x53D8;&#x6210;iterator&#xFF0C;&#x7136;&#x540E;&#x653E;&#x8FDB;Queue&#x4E2D;&#xFF0C;&#x6BCF;&#x6B21;poll&#x4E00;&#x4E2A;&#x51FA;&#x6765;&#xFF0C;&#x7136;&#x540E;&#x5F97;&#x5230;iterator&#x5230;&#x7684;&#x503C;&#xFF0C;&#x5982;&#x679C;iterator&#x91CC;&#x9762;&#x8FD8;&#x6709;&#x503C;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;vector&#x8FD8;&#x6CA1;&#x6709;&#x7A7A;&#x7684;&#x8BDD;&#xFF0C;&#x518D;&#x6392;&#x5230;&#x961F;&#x4F0D;&#x7684;&#x6700;&#x540E;&#x3002;&#x4E0D;&#x65AD;&#x5FAA;&#x73AF;&#x3002;
&#x5DE7;&#x5999;&#x3002;</p>
<p><strong>Code&#xFF1A;</strong></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class ZigzagIterator {</div><div class="line">    LinkedList&lt;Iterator&gt; list;</div><div class="line">    public ZigzagIterator(List&lt;Integer&gt; v1, List&lt;Integer&gt; v2) {</div><div class="line">        list = new LinkedList&lt;Iterator&gt;();</div><div class="line">        if(!v1.isEmpty()) list.add(v1.iterator());</div><div class="line">        if(!v2.isEmpty()) list.add(v2.iterator());</div><div class="line">    }</div><div class="line"></div><div class="line">    public int next() {</div><div class="line">        Iterator poll = list.remove();</div><div class="line">        int result = (Integer)poll.next();</div><div class="line">        if(poll.hasNext()) list.add(poll);</div><div class="line">        return result;</div><div class="line">    }</div><div class="line"></div><div class="line">    public boolean hasNext() {</div><div class="line">        return !list.isEmpty();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given two 1d vectors, implement an iterator to return
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="Google" scheme="http://yoursite.com/tags/Google/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
  </entry>
  
</feed>
